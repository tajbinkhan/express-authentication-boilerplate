{"version":3,"sources":["../../../src/validators/commonRules.ts","../../../src/core/messages.ts"],"sourcesContent":["import { z } from \"zod\";\n\nimport { zodMessages } from \"@/core/messages\";\n\nconst convertBytesToMB = (bytes: number): number => {\n\treturn bytes / 1024 / 1024;\n};\n\nexport const MAX_FILE_SIZE = 2000000;\nexport const ACCEPTED_IMAGE_TYPES = [\"image/jpeg\", \"image/jpg\", \"image/png\", \"image/webp\"];\n\nexport const validateString = (name: string) => {\n\treturn z\n\t\t.string({\n\t\t\trequired_error: zodMessages.error.required.fieldIsRequired(name),\n\t\t\tinvalid_type_error: zodMessages.error.invalid.invalidString(name)\n\t\t})\n\t\t.min(1, zodMessages.error.required.fieldIsRequired(name));\n};\n\nexport const validateNumber = (name: string) => {\n\treturn z.coerce\n\t\t.number({\n\t\t\trequired_error: zodMessages.error.required.fieldIsRequired(name),\n\t\t\tinvalid_type_error: zodMessages.error.invalid.invalidNumber(name)\n\t\t})\n\t\t.min(1, zodMessages.error.required.fieldIsRequired(name));\n};\n\nexport const validateClientNumber = (name: string, min: number = 1) => {\n\treturn z\n\t\t.string({\n\t\t\trequired_error: zodMessages.error.required.fieldIsRequired(name),\n\t\t\tinvalid_type_error: zodMessages.error.invalid.invalidNumber(name)\n\t\t})\n\t\t.min(1, zodMessages.error.required.fieldIsRequired(name))\n\t\t.refine(value => {\n\t\t\treturn !isNaN(Number(value));\n\t\t}, zodMessages.error.invalid.invalidNumber(name))\n\t\t.or(\n\t\t\tz.coerce\n\t\t\t\t.number({\n\t\t\t\t\trequired_error: zodMessages.error.required.fieldIsRequired(name),\n\t\t\t\t\tinvalid_type_error: zodMessages.error.invalid.invalidNumber(name)\n\t\t\t\t})\n\t\t\t\t.min(min, zodMessages.error.required.fieldIsRequired(name))\n\t\t);\n};\n\nexport const validatePositiveNumber = (name: string) => {\n\treturn z\n\t\t.number({\n\t\t\trequired_error: zodMessages.error.required.fieldIsRequired(name),\n\t\t\tinvalid_type_error: zodMessages.error.invalid.invalidNumber(name)\n\t\t})\n\t\t.min(1, zodMessages.error.required.fieldIsRequired(name))\n\t\t.int()\n\t\t.positive();\n};\n\nexport const validateSelectObject = (name: string) => {\n\treturn z\n\t\t.object(\n\t\t\t{\n\t\t\t\tvalue: validateString(name),\n\t\t\t\tlabel: validateString(name)\n\t\t\t},\n\t\t\t{\n\t\t\t\trequired_error: zodMessages.error.required.fieldIsRequired(name),\n\t\t\t\tinvalid_type_error: zodMessages.error.invalid.invalidObject(name)\n\t\t\t}\n\t\t)\n\t\t.or(z.null());\n};\n\nexport const validateEnum = (name: string, values: string[]) => {\n\treturn z.enum(values as [string, ...string[]], {\n\t\trequired_error: zodMessages.error.required.fieldIsRequired(name),\n\t\tinvalid_type_error: zodMessages.error.invalid.invalidEnum(name, values)\n\t});\n};\n\nexport const validateUsername = z\n\t.string({\n\t\trequired_error: zodMessages.error.required.fieldIsRequired(\"Username\")\n\t})\n\t.min(1, zodMessages.error.required.fieldIsRequired(\"Username\"))\n\t.max(20, zodMessages.error.limit.stringMax(\"Username\", 20))\n\t.regex(new RegExp(\"^[a-zA-Z0-9_]*$\"), zodMessages.error.invalid.invalidUsername(\"Username\"));\n\nexport const validateEmail = z\n\t.string({\n\t\trequired_error: zodMessages.error.required.fieldIsRequired(\"Email\")\n\t})\n\t.min(1, zodMessages.error.required.fieldIsRequired(\"Email\"))\n\t.email(zodMessages.error.invalid.invalidEmail(\"Email\"));\n\nexport const validateUsernameOrEmail = z\n\t.string({\n\t\trequired_error: zodMessages.error.required.fieldIsRequired(\"Username or email\"),\n\t\tinvalid_type_error: zodMessages.error.invalid.invalidString(\"Username or email\")\n\t})\n\t.min(1, zodMessages.error.required.fieldIsRequired(\"Username or email\"))\n\t.max(255, zodMessages.error.limit.numberMax(\"Username or email\", 255))\n\t.refine(value => {\n\t\tconst emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n\t\tconst usernameRegex = /^[a-zA-Z0-9_]*$/;\n\n\t\t// Check if it's a valid email\n\t\tif (value.includes(\"@\")) {\n\t\t\treturn emailRegex.test(value);\n\t\t}\n\n\t\t// Check if it's a valid username\n\t\treturn usernameRegex.test(value) && value.length >= 1 && value.length <= 20;\n\t}, zodMessages.error.invalid.invalidUsernameOrEmail(\"Username or email\"));\n\nexport const validatePassword = z\n\t.string({\n\t\trequired_error: zodMessages.error.required.fieldIsRequired(\"Password\")\n\t})\n\t.min(1, zodMessages.error.required.fieldIsRequired(\"Password\"))\n\t.min(6, zodMessages.error.limit.stringMin(\"Password\", 6))\n\t.regex(new RegExp(\".*[A-Z].*\"), zodMessages.error.invalid.invalidUpperCase(\"Password\"))\n\t.regex(new RegExp(\".*[a-z].*\"), zodMessages.error.invalid.invalidLowerCase(\"Password\"))\n\t.regex(new RegExp(\".*\\\\d.*\"), zodMessages.error.invalid.invalidNumericCase(\"Password\"));\n\nexport const validateNewPassword = z\n\t.string({\n\t\trequired_error: zodMessages.error.required.fieldIsRequired(\"New Password\")\n\t})\n\t.min(1, zodMessages.error.required.fieldIsRequired(\"New Password\"))\n\t.min(6, zodMessages.error.limit.stringMin(\"New Password\", 6))\n\t.regex(new RegExp(\".*[A-Z].*\"), zodMessages.error.invalid.invalidUpperCase(\"New Password\"))\n\t.regex(new RegExp(\".*[a-z].*\"), zodMessages.error.invalid.invalidLowerCase(\"New Password\"))\n\t.regex(new RegExp(\".*\\\\d.*\"), zodMessages.error.invalid.invalidNumericCase(\"New Password\"));\n\nexport const validateConfirmPassword = z\n\t.string({\n\t\trequired_error: zodMessages.error.required.fieldIsRequired(\"Confirm Password\")\n\t})\n\t.min(1, zodMessages.error.required.fieldIsRequired(\"Confirm Password\"))\n\t.min(6, zodMessages.error.limit.stringMin(\"Confirm Password\", 6))\n\t.regex(new RegExp(\".*[A-Z].*\"), zodMessages.error.invalid.invalidUpperCase(\"Confirm Password\"))\n\n\t.regex(new RegExp(\".*[a-z].*\"), zodMessages.error.invalid.invalidLowerCase(\"Confirm Password\"))\n\n\t.regex(new RegExp(\".*\\\\d.*\"), zodMessages.error.invalid.invalidNumericCase(\"Confirm Password\"));\n\nexport const validateFile = (\n\tname: string,\n\tmaxFileSize: number = MAX_FILE_SIZE,\n\tacceptedImageTypes: string[] = ACCEPTED_IMAGE_TYPES\n) => {\n\treturn z\n\t\t.any()\n\t\t.refine(files => {\n\t\t\tif (typeof files === \"object\") {\n\t\t\t\treturn files?.length === 1;\n\t\t\t}\n\t\t\treturn true;\n\t\t}, zodMessages.error.required.fieldIsRequired(name))\n\t\t.refine(\n\t\t\tfiles => {\n\t\t\t\tif (typeof files === \"object\") {\n\t\t\t\t\treturn files?.[0]?.size <= maxFileSize;\n\t\t\t\t}\n\t\t\t\treturn true;\n\t\t\t},\n\t\t\t`Max file size is ${convertBytesToMB(maxFileSize)}MB`\n\t\t)\n\t\t.refine(files => {\n\t\t\tif (typeof files === \"object\") {\n\t\t\t\treturn acceptedImageTypes.includes(files?.[0]?.type);\n\t\t\t}\n\t\t\treturn true;\n\t\t}, \".jpg, .jpeg, .png and .webp files are accepted\");\n};\n\nexport const validateFiles = (\n\tname: string,\n\tlimit: number,\n\tmaxFileSize: number = MAX_FILE_SIZE,\n\tacceptedImageTypes: string[] = ACCEPTED_IMAGE_TYPES\n) => {\n\treturn z\n\t\t.any()\n\t\t.refine(files => files?.length >= 1, zodMessages.error.required.fieldIsRequired(name))\n\t\t.refine(files => files?.length <= 5, zodMessages.error.limit.arrayMax(name, limit))\n\t\t.refine(\n\t\t\tfiles => {\n\t\t\t\treturn Object.keys(files).every(key => {\n\t\t\t\t\treturn files[key].size <= maxFileSize;\n\t\t\t\t});\n\t\t\t},\n\t\t\t`Max file size is ${convertBytesToMB(maxFileSize)}MB`\n\t\t)\n\t\t.refine(files => {\n\t\t\treturn Object.keys(files).every(key => {\n\t\t\t\treturn acceptedImageTypes.includes(files[key].type);\n\t\t\t});\n\t\t}, \".jpg, .jpeg, .png and .webp files are accepted\");\n};\n","export const authMessages = {\n\tsuccess: {\n\t\tregistration: \"Registration successful. Welcome!\",\n\t\tlogin: \"Login successful. Welcome back!\",\n\t\tlogout: \"Logout successful. See you again!\",\n\t\tpasswordReset: \"Password reset successful. You can now log in with your new password.\",\n\t\temailVerification: \"Email verification successful. Your account is now active.\",\n\t\taccountVerification: \"Account verification successful. Your account is active.\",\n\t\tpasswordChange: \"Password change successful. Your password has been updated.\",\n\t\ttokenRefresh: \"Token refresh successful. You are still logged in.\",\n\t\ttokenValid: \"Token is valid. You are authenticated.\",\n\t\tauthorizationGranted: \"Access granted. You have the necessary permissions.\",\n\t\temailVerificationSent: \"Email verification sent. Please check your inbox.\",\n\t\tsessionUpdated: \"Session updated. You are still logged in.\"\n\t},\n\terror: {\n\t\tregistration: {\n\t\t\temailInUse: \"Registration failed. The email is already in use.\",\n\t\t\tweakPassword: \"Registration failed. The password is too weak.\",\n\t\t\tinvalidEmail: \"Registration failed. The email address is invalid.\",\n\t\t\tmissingFields: \"Registration failed. Please fill in all required fields.\",\n\t\t\tserverError: \"Registration failed. Server error occurred.\"\n\t\t},\n\t\tlogin: {\n\t\t\tinvalidCredentials: \"Login failed. Invalid email or password.\",\n\t\t\taccountLocked: \"Login failed. Your account is locked.\",\n\t\t\taccountNotVerified: \"Login failed. Please verify your email address.\",\n\t\t\tmissingFields: \"Login failed. Please provide both email and password.\",\n\t\t\tserverError: \"Login failed. Server error occurred.\",\n\t\t\ttwoFactorRequired: \"Login failed. Two-factor authentication is required.\",\n\t\t\ttwoFactorFailed: \"Login failed. Two-factor authentication failed.\",\n\t\t\tsessionExpired: \"Login failed. Your session has expired.\"\n\t\t},\n\t\tlogout: {\n\t\t\tnotLoggedIn: \"Logout failed. You are not logged in.\",\n\t\t\tserverError: \"Logout failed. Server error occurred.\"\n\t\t},\n\t\tpasswordReset: {\n\t\t\tinvalidToken: \"Password reset failed. The reset token is invalid or expired.\",\n\t\t\tuserNotFound: \"Password reset failed. No user found with this email address.\",\n\t\t\tweakPassword: \"Password reset failed. The new password is too weak.\",\n\t\t\tserverError: \"Password reset failed. Server error occurred.\"\n\t\t},\n\t\temailVerification: {\n\t\t\tinvalidToken: \"Email verification failed. The verification token is invalid or expired.\",\n\t\t\talreadyVerified: \"Email verification failed. The email is already verified.\",\n\t\t\tserverError: \"Email verification failed. Server error occurred.\"\n\t\t},\n\t\tpasswordChange: {\n\t\t\tincorrectPassword: \"Password change failed. The current password is incorrect.\",\n\t\t\tweakNewPassword: \"Password change failed. The new password is too weak.\",\n\t\t\tserverError: \"Password change failed. Server error occurred.\"\n\t\t},\n\t\ttokenRefresh: {\n\t\t\tinvalidToken: \"Token refresh failed. The refresh token is invalid or expired.\",\n\t\t\tserverError: \"Token refresh failed. Server error occurred.\"\n\t\t},\n\t\tauthorization: {\n\t\t\tinsufficientRole: \"Access denied. You do not have the necessary role.\",\n\t\t\tinsufficientRoles: \"Access denied. You do not have the necessary roles.\",\n\t\t\tinsufficientPermissions: \"Access denied. You do not have the necessary permissions.\",\n\t\t\tsessionExpired: \"Access denied. Your session has expired.\",\n\t\t\tnotAuthenticated: \"Access denied. You are not authenticated.\",\n\t\t\tserverError: \"Access denied. Server error occurred.\"\n\t\t}\n\t}\n};\n\nexport const crudMessages = {\n\tsuccess: {\n\t\tcreate: (item: string) => `${item} created successfully.`,\n\t\tread: (item: string) => `${item} retrieved successfully.`,\n\t\tupdate: (item: string) => `${item} updated successfully.`,\n\t\tdelete: (item: string) => `${item} deleted successfully.`\n\t},\n\terror: {\n\t\tcreate: {\n\t\t\tvalidationError: (item: string) => `Creation of ${item} failed. Validation error occurred.`,\n\t\t\talreadyExists: (item: string) => `Creation of ${item} failed. ${item} already exists.`,\n\t\t\tmissingFields: (item: string) => `Creation of ${item} failed. Missing required fields.`,\n\t\t\tserverError: (item: string) => `Creation of ${item} failed. Server error occurred.`,\n\t\t\tduplicateEntry: (item: string) => `Creation of ${item} failed. Duplicate entry detected.`,\n\t\t\tinvalidData: (item: string) => `Creation of ${item} failed. Invalid data provided.`,\n\t\t\tquotaExceeded: (item: string) => `Creation of ${item} failed. Quota exceeded.`\n\t\t},\n\t\tread: {\n\t\t\tnotFound: (item: string) => `Retrieval of ${item} failed. ${item} not found.`,\n\t\t\tunauthorized: (item: string) =>\n\t\t\t\t`Retrieval of ${item} failed. You do not have the necessary permissions.`,\n\t\t\tserverError: (item: string) => `Retrieval of ${item} failed. Server error occurred.`,\n\t\t\tnoData: (item: string) => `Retrieval of ${item} failed. No data available.`,\n\t\t\tforbidden: (item: string) => `Retrieval of ${item} failed. Forbidden access.`,\n\t\t\ttimeout: (item: string) => `Retrieval of ${item} failed. Operation timed out.`\n\t\t},\n\t\tupdate: {\n\t\t\tnotFound: (item: string) => `Update of ${item} failed. ${item} not found.`,\n\t\t\tvalidationError: (item: string) => `Update of ${item} failed. Validation error occurred.`,\n\t\t\tmissingFields: (item: string) => `Update of ${item} failed. Missing required fields.`,\n\t\t\tserverError: (item: string) => `Update of ${item} failed. Server error occurred.`,\n\t\t\tconflict: (item: string) => `Update of ${item} failed. Conflict with existing data.`,\n\t\t\tunauthorized: (item: string) => `Update of ${item} failed. Unauthorized access.`,\n\t\t\tnoChanges: (item: string) => `Update of ${item} failed. No changes detected.`,\n\t\t\tlocked: (item: string) => `Update of ${item} failed. The item is locked.`\n\t\t},\n\t\tdelete: {\n\t\t\tnotFound: (item: string) => `Deletion of ${item} failed. ${item} not found.`,\n\t\t\tunauthorized: (item: string) =>\n\t\t\t\t`Deletion of ${item} failed. You do not have the necessary permissions.`,\n\t\t\tserverError: (item: string) => `Deletion of ${item} failed. Server error occurred.`,\n\t\t\tconflict: (item: string) => `Deletion of ${item} failed. Conflict with related data.`,\n\t\t\tprotected: (item: string) => `Deletion of ${item} failed. ${item} is protected.`,\n\t\t\tdependencyError: (item: string) => `Deletion of ${item} failed. Dependency error occurred.`,\n\t\t\ttimeout: (item: string) => `Deletion of ${item} failed. Operation timed out.`\n\t\t}\n\t}\n};\n\nexport const zodMessages = {\n\terror: {\n\t\trequired: {\n\t\t\tfieldIsRequired: (field: string) => `${field} is required.`\n\t\t},\n\t\tlimit: {\n\t\t\tstringMin: (field: string, limit: number) => `${field} must be at least ${limit} characters.`,\n\t\t\tstringMax: (field: string, limit: number) => `${field} must not exceed ${limit} characters.`,\n\t\t\tarrayMin: (field: string, limit: number) => `${field} must have at least ${limit} items.`,\n\t\t\tarrayMax: (field: string, limit: number) => `${field} must not exceed ${limit} items.`,\n\t\t\tnumberMin: (field: string, limit: number) => `${field} must be at least ${limit}.`,\n\t\t\tnumberMax: (field: string, limit: number) => `${field} must not exceed ${limit}.`\n\t\t},\n\t\tinvalid: {\n\t\t\tinvalidString: (field: string) => `${field} must be a string.`,\n\t\t\tinvalidEmail: (field: string) => `${field} must be a valid email address.`,\n\t\t\tinvalidNumber: (field: string) => `${field} must be a number.`,\n\t\t\tinvalidBoolean: (field: string) => `${field} must be a boolean.`,\n\t\t\tinvalidDate: (field: string) => `${field} must be a date.`,\n\t\t\tinvalidArray: (field: string) => `${field} must be an array.`,\n\t\t\tinvalidObject: (field: string) => `${field} must be an object.`,\n\t\t\tinvalidEnum: (field: string, values: string[]) =>\n\t\t\t\t`${field} must be one of the following values: ${values.join(\", \")}.`,\n\t\t\tinvalidUnion: (field: string) => `${field} must be one of the specified types.`,\n\t\t\tinvalidIntersection: (field: string) =>\n\t\t\t\t`${field} must be a combination of the specified types.`,\n\t\t\tinvalidTuple: (field: string) => `${field} must be a tuple.`,\n\t\t\tinvalidRecord: (field: string) => `${field} must be a record.`,\n\t\t\tinvalidLiteral: (field: string, value: string) =>\n\t\t\t\t`${field} must be the literal value: ${value}.`,\n\t\t\tinvalidNull: (field: string) => `${field} must be null.`,\n\t\t\tinvalidUndefined: (field: string) => `${field} must be undefined.`,\n\t\t\tinvalidOptional: (field: string) => `${field} must be optional.`,\n\t\t\tinvalidNullable: (field: string) => `${field} must be nullable.`,\n\t\t\tinvalidPromise: (field: string) => `${field} must be a promise.`,\n\t\t\tinvalidFunction: (field: string) => `${field} must be a function.`,\n\t\t\tinvalidClass: (field: string) => `${field} must be a class.`,\n\t\t\tinvalidUnknown: (field: string) => `${field} must be unknown.`,\n\t\t\tinvalidNever: (field: string) => `${field} must be never.`,\n\t\t\tinvalidVoid: (field: string) => `${field} must be void.`,\n\t\t\tinvalidAny: (field: string) => `${field} must be any.`,\n\t\t\tinvalidUnknownKeys: (field: string) => `${field} must have unknown keys.`,\n\t\t\tinvalidFile: (field: string) => `${field} must be a file.`,\n\t\t\tinvalidFileSize: (field: string, limit: number) => `${field} must not exceed ${limit} bytes.`,\n\t\t\tinvalidFileType: (field: string, type: string) => `${field} must be of type ${type}.`,\n\t\t\tinvalidUpperCase: (field: string) => `${field} must be at least one upper case.`,\n\t\t\tinvalidLowerCase: (field: string) => `${field} must be at least one lower case.`,\n\t\t\tinvalidNumericCase: (field: string) => `${field} must be at least one number.`,\n\t\t\tinvalidUsername: (field: string) =>\n\t\t\t\t`${field} must contain only letters, numbers, and underscores.`,\n\t\t\tinvalidUsernameOrEmail: (field: string) =>\n\t\t\t\t`${field} must be a valid username or email address.`\n\t\t}\n\t}\n};\n"],"mappings":"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","names":[]}