{"version":3,"sources":["../../../../src/app/authentication/authentication.JWT.ts","../../../../src/core/constants.ts"],"sourcesContent":["import { hkdf } from \"@panva/hkdf\";\nimport { EncryptJWT, JWTPayload, base64url, calculateJwkThumbprint, jwtDecrypt } from \"jose\";\n\nimport { sessionTimeout } from \"@/core/constants\";\n\ntype Awaitable<T> = T | PromiseLike<T>;\nconst DEFAULT_MAX_AGE = sessionTimeout;\n\nconst now = () => (Date.now() / 1000) | 0;\n\nconst alg = \"dir\";\nconst enc = \"A256CBC-HS512\";\ntype Digest = Parameters<typeof calculateJwkThumbprint>[1];\n\n/** Issues a JWT. By default, the JWT is encrypted using \"A256CBC-HS512\". */\nexport async function encode<Payload = JWT>(params: JWTEncodeParams<Payload>) {\n\tconst {\n\t\ttoken,\n\t\tsecret = process.env.SECRET,\n\t\tmaxAge = DEFAULT_MAX_AGE,\n\t\tsalt = process.env.SESSION_COOKIE_NAME\n\t} = params;\n\n\tconst secrets = Array.isArray(secret) ? secret : [secret];\n\tconst encryptionSecret = await getDerivedEncryptionKey(enc, secrets[0], salt);\n\n\tconst thumbprint = await calculateJwkThumbprint(\n\t\t{ kty: \"oct\", k: base64url.encode(encryptionSecret) },\n\t\t`sha${encryptionSecret.byteLength << 3}` as Digest\n\t);\n\n\tconst generatedToken = await new EncryptJWT(token as JWTPayload)\n\t\t.setProtectedHeader({ alg, enc, kid: thumbprint })\n\t\t.setIssuedAt()\n\t\t.setExpirationTime(now() + maxAge)\n\t\t.setJti(crypto.randomUUID())\n\t\t.encrypt(encryptionSecret);\n\n\treturn generatedToken;\n}\n\n/** Decodes an Express.js issued JWT. */\nexport async function decode<Payload = JWT>(params: JWTDecodeParams): Promise<Payload | null> {\n\tconst { token, secret = process.env.SECRET, salt = process.env.SESSION_COOKIE_NAME } = params;\n\tconst secrets = Array.isArray(secret) ? secret : [secret];\n\tif (!token) return null;\n\tconst { payload } = await jwtDecrypt(\n\t\ttoken,\n\t\tasync ({ kid, enc }) => {\n\t\t\tfor (const secret of secrets) {\n\t\t\t\tconst encryptionSecret = await getDerivedEncryptionKey(enc, secret, salt);\n\t\t\t\tif (kid === undefined) return encryptionSecret;\n\n\t\t\t\tconst thumbprint = await calculateJwkThumbprint(\n\t\t\t\t\t{ kty: \"oct\", k: base64url.encode(encryptionSecret) },\n\t\t\t\t\t`sha${encryptionSecret.byteLength << 3}` as Digest\n\t\t\t\t);\n\t\t\t\tif (kid === thumbprint) return encryptionSecret;\n\t\t\t}\n\n\t\t\tthrow new Error(\"no matching decryption secret\");\n\t\t},\n\t\t{\n\t\t\tclockTolerance: 15,\n\t\t\tkeyManagementAlgorithms: [alg],\n\t\t\tcontentEncryptionAlgorithms: [enc, \"A256GCM\"]\n\t\t}\n\t);\n\treturn payload as Payload;\n}\n\nasync function getDerivedEncryptionKey(\n\tenc: string,\n\tkeyMaterial: Parameters<typeof hkdf>[1],\n\tsalt: Parameters<typeof hkdf>[2]\n) {\n\tlet length: number;\n\tswitch (enc) {\n\t\tcase \"A256CBC-HS512\":\n\t\t\tlength = 64;\n\t\t\tbreak;\n\t\tcase \"A256GCM\":\n\t\t\tlength = 32;\n\t\t\tbreak;\n\t\tdefault:\n\t\t\tthrow new Error(\"Unsupported JWT Content Encryption Algorithm\");\n\t}\n\treturn await hkdf(\n\t\t\"sha256\",\n\t\tkeyMaterial,\n\t\tsalt,\n\t\t`Express.js Generated Encryption Key (${salt})`,\n\t\tlength\n\t);\n}\n\nexport interface DefaultJWT extends Record<string, unknown> {\n\tname?: string | null;\n\temail?: string | null;\n\tpicture?: string | null;\n\tsub?: string;\n\tiat?: number;\n\texp?: number;\n\tjti?: string;\n}\n\n/**\n * Returned by the `jwt` callback when using JWT sessions\n *\n * [`jwt` callback](https://authjs.dev/reference/core/types#jwt)\n */\nexport interface JWT extends Record<string, unknown>, DefaultJWT {}\n\nexport interface JWTEncodeParams<Payload = JWT> {\n\t/**\n\t * The maximum age of the Express.js issued JWT in seconds.\n\t *\n\t * @default 30 * 24 * 60 * 60 // 30 days\n\t */\n\tmaxAge?: number;\n\t/** Used in combination with `secret`, to derive the encryption secret for JWTs. */\n\tsalt?: string;\n\t/** Used in combination with `salt`, to derive the encryption secret for JWTs. */\n\tsecret?: string | string[];\n\t/** The JWT payload. */\n\ttoken: Payload;\n}\n\nexport interface JWTDecodeParams {\n\t/** Used in combination with `secret`, to derive the encryption secret for JWTs. */\n\tsalt?: string;\n\t/**\n\t * Used in combination with `salt`, to derive the encryption secret for JWTs.\n\t *\n\t * @note\n\t * You can also pass an array of secrets, in which case the first secret that successfully\n\t * decrypts the JWT will be used. This is useful for rotating secrets without invalidating existing sessions.\n\t * The newer secret should be added to the start of the array, which will be used for all new sessions.\n\t */\n\tsecret?: string | string[];\n\t/** The Express.js issued JWT to be decoded */\n\ttoken?: string;\n}\n\nexport interface JWTOptions {\n\t/**\n\t * The secret used to encode/decode the Express.js issued JWT.\n\t * It can be an array of secrets, in which case the first secret that successfully\n\t * decrypts the JWT will be used. This is useful for rotating secrets without invalidating existing sessions.\n\t * @internal\n\t */\n\tsecret: string | string[];\n\t/**\n\t * The maximum age of the Express.js issued JWT in seconds.\n\t *\n\t * @default 30 * 24 * 60 * 60 // 30 days\n\t */\n\tmaxAge: number;\n\t/** Override this method to control the Express.js issued JWT encoding. */\n\tencode: (params: JWTEncodeParams) => Awaitable<string>;\n\t/** Override this method to control the Express.js issued JWT decoding. */\n\tdecode: (params: JWTDecodeParams) => Awaitable<JWT | null>;\n}\n","export const origins = [\"http://localhost:3000\"];\nexport const sessionTimeout = 1000 * 60 * 60 * 24 * 7; // 1 week in milliseconds\nexport const csrfTimeout = 1000 * 60 * 60; // 5 seconds in milliseconds\n"],"mappings":";;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAAqB;AACrB,kBAAsF;;;ACA/E,IAAM,iBAAiB,MAAO,KAAK,KAAK,KAAK;AAC7C,IAAM,cAAc,MAAO,KAAK;;;ADIvC,IAAM,kBAAkB;AAExB,IAAM,MAAM,MAAO,KAAK,IAAI,IAAI,MAAQ;AAExC,IAAM,MAAM;AACZ,IAAM,MAAM;AAIZ,eAAsB,OAAsB,QAAkC;AAC7E,QAAM;AAAA,IACL;AAAA,IACA,SAAS,QAAQ,IAAI;AAAA,IACrB,SAAS;AAAA,IACT,OAAO,QAAQ,IAAI;AAAA,EACpB,IAAI;AAEJ,QAAM,UAAU,MAAM,QAAQ,MAAM,IAAI,SAAS,CAAC,MAAM;AACxD,QAAM,mBAAmB,MAAM,wBAAwB,KAAK,QAAQ,CAAC,GAAG,IAAI;AAE5E,QAAM,aAAa,UAAM;AAAA,IACxB,EAAE,KAAK,OAAO,GAAG,sBAAU,OAAO,gBAAgB,EAAE;AAAA,IACpD,MAAM,iBAAiB,cAAc,CAAC;AAAA,EACvC;AAEA,QAAM,iBAAiB,MAAM,IAAI,uBAAW,KAAmB,EAC7D,mBAAmB,EAAE,KAAK,KAAK,KAAK,WAAW,CAAC,EAChD,YAAY,EACZ,kBAAkB,IAAI,IAAI,MAAM,EAChC,OAAO,OAAO,WAAW,CAAC,EAC1B,QAAQ,gBAAgB;AAE1B,SAAO;AACR;AAGA,eAAsB,OAAsB,QAAkD;AAC7F,QAAM,EAAE,OAAO,SAAS,QAAQ,IAAI,QAAQ,OAAO,QAAQ,IAAI,oBAAoB,IAAI;AACvF,QAAM,UAAU,MAAM,QAAQ,MAAM,IAAI,SAAS,CAAC,MAAM;AACxD,MAAI,CAAC,MAAO,QAAO;AACnB,QAAM,EAAE,QAAQ,IAAI,UAAM;AAAA,IACzB;AAAA,IACA,OAAO,EAAE,KAAK,KAAAA,KAAI,MAAM;AACvB,iBAAWC,WAAU,SAAS;AAC7B,cAAM,mBAAmB,MAAM,wBAAwBD,MAAKC,SAAQ,IAAI;AACxE,YAAI,QAAQ,OAAW,QAAO;AAE9B,cAAM,aAAa,UAAM;AAAA,UACxB,EAAE,KAAK,OAAO,GAAG,sBAAU,OAAO,gBAAgB,EAAE;AAAA,UACpD,MAAM,iBAAiB,cAAc,CAAC;AAAA,QACvC;AACA,YAAI,QAAQ,WAAY,QAAO;AAAA,MAChC;AAEA,YAAM,IAAI,MAAM,+BAA+B;AAAA,IAChD;AAAA,IACA;AAAA,MACC,gBAAgB;AAAA,MAChB,yBAAyB,CAAC,GAAG;AAAA,MAC7B,6BAA6B,CAAC,KAAK,SAAS;AAAA,IAC7C;AAAA,EACD;AACA,SAAO;AACR;AAEA,eAAe,wBACdD,MACA,aACA,MACC;AACD,MAAI;AACJ,UAAQA,MAAK;AAAA,IACZ,KAAK;AACJ,eAAS;AACT;AAAA,IACD,KAAK;AACJ,eAAS;AACT;AAAA,IACD;AACC,YAAM,IAAI,MAAM,8CAA8C;AAAA,EAChE;AACA,SAAO,UAAM;AAAA,IACZ;AAAA,IACA;AAAA,IACA;AAAA,IACA,wCAAwC,IAAI;AAAA,IAC5C;AAAA,EACD;AACD;","names":["enc","secret"]}