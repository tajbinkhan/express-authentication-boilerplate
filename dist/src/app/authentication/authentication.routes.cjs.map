{"version":3,"sources":["../../../../src/app/authentication/authentication.routes.ts","../../../../src/app/authentication/authentication.controller.ts","../../../../src/app/authentication/authentication.service.ts","../../../../src/core/constants.ts","../../../../src/databases/drizzle/connection.ts","../../../../src/models/drizzle/authentication.model.ts","../../../../src/databases/drizzle/helpers.ts","../../../../src/databases/drizzle/lists.ts","../../../../src/models/drizzle/todo.model.ts","../../../../src/databases/drizzle/schema.ts","../../../../src/databases/drizzle/service.ts","../../../../src/service/otpService.ts","../../../../src/utils/appHelpers.ts","../../../../src/utils/statusCodes.ts","../../../../src/utils/serviceApi.ts","../../../../src/app/authentication/authentication.validator.ts","../../../../src/core/messages.ts","../../../../src/validators/commonRules.ts","../../../../src/controllers/base/api.controller.ts","../../../../src/app/authentication/authentication.JWT.ts","../../../../src/service/cookieService.ts","../../../../src/service/emailService.ts","../../../../src/middlewares/authentication.middleware.ts"],"sourcesContent":["import express, { Router } from \"express\";\nimport passport from \"passport\";\n\nimport AuthenticationController from \"@/app/authentication/authentication.controller\";\n\nimport { authenticationMiddleware } from \"@/middlewares/authentication.middleware\";\n\nexport const authenticationRouter: Router = (() => {\n\tconst router = express.Router();\n\n\t// Get current user route\n\trouter.get(\"/me\", authenticationMiddleware, (req, res) => {\n\t\tnew AuthenticationController(req, res).getSession();\n\t});\n\n\t// Session route\n\trouter.get(\"/session\", authenticationMiddleware, (req, res) => {\n\t\tnew AuthenticationController(req, res).verifySession();\n\t});\n\n\t// Account verification route\n\trouter.get(\"/account-verification\", authenticationMiddleware, (req, res) => {\n\t\tnew AuthenticationController(req, res).checkAccountVerification();\n\t});\n\n\t// Register route\n\trouter.post(\"/register\", (req, res) => {\n\t\tnew AuthenticationController(req, res).register();\n\t});\n\n\t// Request OTP route\n\trouter.post(\"/request-otp\", (req, res) => {\n\t\tnew AuthenticationController(req, res).requestOTPForUnverifiedUser();\n\t});\n\n\t// Local Authentication\n\trouter.post(\"/login\", async (req, res) => {\n\t\tnew AuthenticationController(req, res).loginWithUsername();\n\t});\n\n\t// Local Authentication with OTP\n\trouter.post(\"/login/otp\", async (req, res) => {\n\t\tnew AuthenticationController(req, res).loginWithUsernameAndOTP();\n\t});\n\n\t// Google Authentication\n\trouter.get(\"/login/google\", passport.authenticate(\"google\", { scope: [\"profile\", \"email\"] }));\n\trouter.get(\n\t\t\"/google/callback\",\n\t\tpassport.authenticate(\"google\", { failureRedirect: \"/login\" }),\n\t\t(req, res) => {\n\t\t\tnew AuthenticationController(req, res).loginWithGoogle();\n\t\t}\n\t);\n\n\t// Verify user route\n\trouter.post(\"/verify-user\", (req, res) => {\n\t\tnew AuthenticationController(req, res).verifyUser();\n\t});\n\n\t// Check user route\n\trouter.post(\"/check-user\", (req, res) => {\n\t\tnew AuthenticationController(req, res).checkUser();\n\t});\n\n\t// Password reset route\n\trouter.post(\"/reset-password\", (req, res) => {\n\t\tnew AuthenticationController(req, res).resetPassword();\n\t});\n\n\t// Password reset confirmation route\n\trouter.post(\"/reset-password/confirm\", (req, res) => {\n\t\tnew AuthenticationController(req, res).resetPasswordConfirm();\n\t});\n\n\t// Password change route\n\trouter.post(\"/change-password\", authenticationMiddleware, (req, res) => {\n\t\tnew AuthenticationController(req, res).changePassword();\n\t});\n\n\t// Logout route\n\trouter.post(\"/logout\", authenticationMiddleware, (req, res) => {\n\t\tnew AuthenticationController(req, res).logout();\n\t});\n\n\t// UI Routes\n\trouter.get(\"/google\", (req, res) => {\n\t\tres.status(200).send(`\n\t\t\t<!DOCTYPE html>\n\t\t\t<html lang=\"en\">\n\t\t\t<head>\n\t\t\t\t<meta charset=\"UTF-8\">\n\t\t\t\t<meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n\t\t\t\t<title>Google Login</title>\n\t\t\t\t<style>\n\t\t\t\t\tbody {\n\t\t\t\t\t\tdisplay: flex;\n\t\t\t\t\t\tjustify-content: center;\n\t\t\t\t\t\talign-items: center;\n\t\t\t\t\t\theight: 100vh;\n\t\t\t\t\t\tmargin: 0;\n\t\t\t\t\t\tfont-family: Arial, sans-serif;\n\t\t\t\t\t\tbackground-color: #f1f1f1;\n\t\t\t\t\t}\n\n\t\t\t\t\t.google-login-btn {\n\t\t\t\t\t\tmax-width: 200px;\n\t\t\t\t\t\tdisplay: flex;\n\t\t\t\t\t\talign-items: center;\n\t\t\t\t\t\tjustify-content: center;\n\t\t\t\t\t\tbackground-color: #4285F4;\n\t\t\t\t\t\tcolor: white;\n\t\t\t\t\t\tfont-family: Arial, sans-serif;\n\t\t\t\t\t\tfont-size: 16px;\n\t\t\t\t\t\tfont-weight: bold;\n\t\t\t\t\t\tpadding: 10px 20px;\n\t\t\t\t\t\tborder-radius: 4px;\n\t\t\t\t\t\ttext-decoration: none;\n\t\t\t\t\t\tborder: none;\n\t\t\t\t\t\tbox-shadow: 0 2px 4px rgba(0, 0, 0, 0.2);\n\t\t\t\t\t\tcursor: pointer;\n\t\t\t\t\t\ttransition: background-color 0.3s ease, box-shadow 0.3s ease;\n\t\t\t\t\t}\n\n\t\t\t\t\t.google-login-btn:hover {\n\t\t\t\t\t\tbackground-color: #357AE8;\n\t\t\t\t\t\tbox-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);\n\t\t\t\t\t}\n\t\t\t\t</style>\n\t\t\t</head>\n\t\t\t<body>\n\t\t\t\t<a href=\"http://localhost:8080/api/auth/login/google\" class=\"google-login-btn\">\n\t\t\t\t\tSign in with Google\n\t\t\t\t</a>\n\t\t\t</body>\n\t\t\t</html>\n\t\t\t`);\n\t});\n\n\treturn router;\n})();\n","import bcrypt from \"bcrypt\";\nimport { Request, Response } from \"express\";\n\nimport AuthenticationService from \"@/app/authentication/authentication.service\";\nimport {\n\tUserChangePasswordSchema,\n\tUserPasswordResetSchema,\n\tUserRegisterSchema,\n\tUserReverificationSchema,\n\tUserVerificationSchema,\n\tUsernameLoginSchema,\n\tUsernameLoginWithOTPSchema\n} from \"@/app/authentication/authentication.validator\";\n\nimport { ApiController } from \"@/controllers/base/api.controller\";\nimport { TOKEN_LIST } from \"@/databases/drizzle/lists\";\nimport { UserSchemaType } from \"@/databases/drizzle/types\";\nimport CookieService from \"@/service/cookieService\";\nimport sendEmail from \"@/service/emailService\";\nimport OTPService from \"@/service/otpService\";\nimport { ServiceApiResponse } from \"@/utils/serviceApi\";\nimport { status } from \"@/utils/statusCodes\";\n\nexport default class AuthenticationController extends ApiController {\n\tprotected authenticationService: AuthenticationService;\n\tprotected otpService: OTPService;\n\tprotected cookieService: CookieService;\n\n\t/**\n\t * Construct the controller\n\t *\n\t * @param request\n\t * @param response\n\t */\n\tconstructor(request: Request, response: Response) {\n\t\tsuper(request, response);\n\t\tthis.authenticationService = new AuthenticationService();\n\t\tthis.otpService = new OTPService();\n\t\tthis.cookieService = new CookieService(request, response);\n\t}\n\n\tasync register(): Promise<Response> {\n\t\ttry {\n\t\t\tconst body = this.getReqBody();\n\t\t\tconst check = UserRegisterSchema.safeParse(body);\n\t\t\tif (!check.success)\n\t\t\t\treturn this.apiResponse.badResponse(check.error.errors.map(err => err.message).join(\", \"));\n\n\t\t\tconst extendedData: Omit<UserSchemaType, \"id\" | \"role\" | \"createdAt\" | \"updatedAt\"> = {\n\t\t\t\t...check.data,\n\t\t\t\timage: null,\n\t\t\t\temailVerified: null,\n\t\t\t\tpassword: bcrypt.hashSync(check.data.password, 10)\n\t\t\t};\n\n\t\t\tconst user = await this.authenticationService.createUser(extendedData);\n\n\t\t\tconst otp = await this.otpService.saveOTPToDatabase(user.data, TOKEN_LIST.EMAIL_VERIFICATION);\n\n\t\t\tif (otp && user.data.email) {\n\t\t\t\tsendEmail({\n\t\t\t\t\temail: user.data.email,\n\t\t\t\t\temailSubject: \"Your account verification OTP\",\n\t\t\t\t\ttemplate: \"otpEmailTemplate\",\n\t\t\t\t\tdata: {\n\t\t\t\t\t\tusername: user.data.username,\n\t\t\t\t\t\totp,\n\t\t\t\t\t\totpExpirationTime: 5\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t}\n\n\t\t\treturn this.apiResponse.sendResponse(user);\n\t\t} catch (error) {\n\t\t\treturn this.apiResponse.sendResponse(error as ServiceApiResponse<unknown>);\n\t\t}\n\t}\n\n\tasync loginWithUsername(): Promise<Response | undefined> {\n\t\ttry {\n\t\t\tconst body = this.getReqBody();\n\t\t\tconst check = UsernameLoginSchema.safeParse(body);\n\t\t\tif (!check.success) {\n\t\t\t\treturn this.apiResponse.badResponse(check.error.errors.map(err => err.message).join(\", \"));\n\t\t\t}\n\n\t\t\tconst user = await this.authenticationService.findUserByUsernameOrEmail(check.data.username);\n\t\t\tawait this.authenticationService.checkAccountVerification(user.data.id);\n\t\t\tawait this.authenticationService.passwordChecker(check.data.password, user.data.password);\n\n\t\t\tconst { password, ...userData } = user.data;\n\n\t\t\tconst accessToken = await this.cookieService.saveCookieToBrowser(userData);\n\n\t\t\t// Log the user in to establish session\n\t\t\tthis.request.login(user.data, err => {\n\t\t\t\tif (err) {\n\t\t\t\t\treturn this.apiResponse.sendResponse({\n\t\t\t\t\t\tstatus: status.HTTP_500_INTERNAL_SERVER_ERROR,\n\t\t\t\t\t\tmessage: \"Login failed\"\n\t\t\t\t\t});\n\t\t\t\t}\n\n\t\t\t\tconst { password, ...userData } = user.data;\n\n\t\t\t\treturn this.apiResponse.successResponse(\"Login successful\", {\n\t\t\t\t\tuser: userData,\n\t\t\t\t\ttoken: accessToken\n\t\t\t\t});\n\t\t\t});\n\t\t} catch (error) {\n\t\t\treturn this.apiResponse.sendResponse(error as ServiceApiResponse<unknown>);\n\t\t}\n\t}\n\n\tasync loginWithUsernameAndOTP(): Promise<Response | undefined> {\n\t\ttry {\n\t\t\tconst body = this.getReqBody();\n\t\t\tconst check = UsernameLoginWithOTPSchema.safeParse(body);\n\t\t\tif (!check.success) {\n\t\t\t\treturn this.apiResponse.badResponse(check.error.errors.map(err => err.message).join(\", \"));\n\t\t\t}\n\n\t\t\tconst user = await this.authenticationService.findUserByUsernameOrEmail(check.data.username);\n\t\t\tawait this.authenticationService.checkAccountVerification(user.data.id);\n\t\t\tawait this.authenticationService.passwordChecker(check.data.password, user.data.password);\n\n\t\t\tconst { password, ...userData } = user.data;\n\n\t\t\tawait this.otpService.verifyOTPFromDatabase(\n\t\t\t\tuserData,\n\t\t\t\tString(check.data.otp),\n\t\t\t\tTOKEN_LIST.LOGIN_OTP\n\t\t\t);\n\n\t\t\tconst accessToken = await this.cookieService.saveCookieToBrowser(userData);\n\n\t\t\t// Log the user in to establish session\n\t\t\tthis.request.login(user.data, err => {\n\t\t\t\tif (err) {\n\t\t\t\t\treturn this.apiResponse.sendResponse({\n\t\t\t\t\t\tstatus: status.HTTP_500_INTERNAL_SERVER_ERROR,\n\t\t\t\t\t\tmessage: \"Login failed\"\n\t\t\t\t\t});\n\t\t\t\t}\n\n\t\t\t\tconst { password, ...userData } = user.data;\n\n\t\t\t\treturn this.apiResponse.successResponse(\"Login successful\", {\n\t\t\t\t\tuser: userData,\n\t\t\t\t\ttoken: accessToken\n\t\t\t\t});\n\t\t\t});\n\t\t} catch (error) {\n\t\t\treturn this.apiResponse.sendResponse(error as ServiceApiResponse<unknown>);\n\t\t}\n\t}\n\n\tasync loginWithGoogle(): Promise<Response | void> {\n\t\ttry {\n\t\t\tconst user = this.request.user;\n\n\t\t\tawait this.cookieService.saveCookieToBrowser(user!);\n\n\t\t\tconst appUrl = process.env.APP_URL + \"?success=Google\";\n\n\t\t\treturn this.response.redirect(appUrl);\n\n\t\t\t// return this.apiResponse.successResponse(\"Login successful\", {\n\t\t\t// \tuser: user,\n\t\t\t// \ttoken: accessToken\n\t\t\t// });\n\t\t} catch (error) {\n\t\t\treturn this.apiResponse.sendResponse(error as ServiceApiResponse<unknown>);\n\t\t}\n\t}\n\n\tasync logout(): Promise<Response | undefined> {\n\t\ttry {\n\t\t\tthis.request.session.destroy(err => {\n\t\t\t\tif (err) {\n\t\t\t\t\treturn this.apiResponse.sendResponse({\n\t\t\t\t\t\tstatus: status.HTTP_500_INTERNAL_SERVER_ERROR,\n\t\t\t\t\t\tmessage: \"Error logging out\"\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t\tthis.cookieService.clearCookieFromBrowser();\n\t\t\t\treturn this.apiResponse.successResponse(\"Logged out\");\n\t\t\t});\n\t\t} catch (error) {\n\t\t\treturn this.apiResponse.sendResponse(error as ServiceApiResponse<unknown>);\n\t\t}\n\t}\n\n\tasync getSession(): Promise<Response> {\n\t\ttry {\n\t\t\tconst { user } = this.request;\n\t\t\tif (!user) return this.apiResponse.unauthorizedResponse(\"Unauthorized: Not authenticated\");\n\n\t\t\treturn this.apiResponse.successResponse(\"Authorized\", user);\n\t\t} catch (error) {\n\t\t\treturn this.apiResponse.sendResponse(error as ServiceApiResponse<unknown>);\n\t\t}\n\t}\n\n\tasync verifySession(): Promise<Response> {\n\t\ttry {\n\t\t\treturn this.apiResponse.successResponse(\"Authorized\");\n\t\t} catch (error) {\n\t\t\treturn this.apiResponse.sendResponse(error as ServiceApiResponse<unknown>);\n\t\t}\n\t}\n\n\tasync checkAccountVerification(): Promise<Response> {\n\t\ttry {\n\t\t\tconst { user } = this.request;\n\n\t\t\tif (!user?.emailVerified) {\n\t\t\t\tthis.request.session.destroy(err => {\n\t\t\t\t\tif (err) {\n\t\t\t\t\t\treturn this.apiResponse.sendResponse({\n\t\t\t\t\t\t\tstatus: status.HTTP_500_INTERNAL_SERVER_ERROR,\n\t\t\t\t\t\t\tmessage: \"Error logging out\"\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t\tthis.cookieService.clearCookieFromBrowser();\n\t\t\t\t\treturn this.apiResponse.unauthorizedResponse(\"Unauthorized: Account is not verified\");\n\t\t\t\t});\n\t\t\t\treturn this.apiResponse.unauthorizedResponse(\"Unauthorized: Account is not verified\");\n\t\t\t}\n\n\t\t\treturn this.apiResponse.successResponse(\"User is verified\");\n\t\t} catch (error) {\n\t\t\treturn this.apiResponse.sendResponse(error as ServiceApiResponse<unknown>);\n\t\t}\n\t}\n\n\tasync checkUser(): Promise<Response> {\n\t\ttry {\n\t\t\tconst { body } = this.request;\n\t\t\tconst check = UsernameLoginSchema.safeParse(body);\n\t\t\tif (!check.success)\n\t\t\t\treturn this.apiResponse.badResponse(check.error.errors.map(err => err.message).join(\", \"));\n\n\t\t\tconst user = await this.authenticationService.findUserByUsernameOrEmail(check.data.username);\n\n\t\t\tawait this.authenticationService.passwordChecker(check.data.password, user.data.password);\n\n\t\t\tif (check.data.otp) {\n\t\t\t\tawait this.authenticationService.checkAccountVerification(user.data.id);\n\t\t\t\tconst otp = await this.otpService.saveOTPToDatabase(user.data, TOKEN_LIST.LOGIN_OTP);\n\n\t\t\t\tif (otp && user.data.email) {\n\t\t\t\t\tsendEmail({\n\t\t\t\t\t\temail: user.data.email,\n\t\t\t\t\t\temailSubject: \"Login OTP\",\n\t\t\t\t\t\ttemplate: \"otpEmailTemplate\",\n\t\t\t\t\t\tdata: {\n\t\t\t\t\t\t\tusername: user.data.username,\n\t\t\t\t\t\t\totp,\n\t\t\t\t\t\t\totpExpirationTime: 5\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn this.apiResponse.successResponse(\"User found\");\n\t\t} catch (error) {\n\t\t\treturn this.apiResponse.sendResponse(error as ServiceApiResponse<unknown>);\n\t\t}\n\t}\n\n\tasync verifyUser(): Promise<Response> {\n\t\ttry {\n\t\t\tconst { body } = this.request;\n\t\t\tconst check = UserVerificationSchema.safeParse(body);\n\t\t\tif (!check.success)\n\t\t\t\treturn this.apiResponse.badResponse(check.error.errors.map(err => err.message).join(\", \"));\n\n\t\t\tconst user = await this.authenticationService.findUserByUsernameOrEmail(check.data.username);\n\n\t\t\tawait this.otpService.verifyOTPFromDatabase(\n\t\t\t\tuser.data,\n\t\t\t\tString(check.data.otp),\n\t\t\t\tTOKEN_LIST.EMAIL_VERIFICATION\n\t\t\t);\n\t\t\tawait this.authenticationService.accountVerification(user.data.id);\n\n\t\t\treturn this.apiResponse.successResponse(\"User verified\");\n\t\t} catch (error) {\n\t\t\treturn this.apiResponse.sendResponse(error as ServiceApiResponse<unknown>);\n\t\t}\n\t}\n\n\tasync resetPassword(): Promise<Response> {\n\t\ttry {\n\t\t\tconst { body } = this.request;\n\t\t\tif (!body.email) return this.apiResponse.badResponse(\"Email is required\");\n\n\t\t\tconst user = await this.authenticationService.findUserByEmail(body.email);\n\n\t\t\tconst otp = await this.otpService.saveOTPToDatabase(user.data, TOKEN_LIST.PASSWORD_RESET);\n\n\t\t\tif (otp && user.data.email) {\n\t\t\t\tsendEmail({\n\t\t\t\t\temail: user.data.email,\n\t\t\t\t\temailSubject: \"Your password reset OTP\",\n\t\t\t\t\ttemplate: \"otpEmailTemplate\",\n\t\t\t\t\tdata: {\n\t\t\t\t\t\tusername: user.data.username,\n\t\t\t\t\t\totp,\n\t\t\t\t\t\totpExpirationTime: 5\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t}\n\n\t\t\treturn this.apiResponse.successResponse(\"Password reset OTP sent\");\n\t\t} catch (error) {\n\t\t\treturn this.apiResponse.sendResponse(error as ServiceApiResponse<unknown>);\n\t\t}\n\t}\n\n\tasync resetPasswordConfirm(): Promise<Response> {\n\t\ttry {\n\t\t\tconst { body } = this.request;\n\t\t\tconst check = UserPasswordResetSchema.safeParse(body);\n\t\t\tif (!check.success)\n\t\t\t\treturn this.apiResponse.badResponse(check.error.errors.map(err => err.message).join(\", \"));\n\n\t\t\tconst user = await this.authenticationService.findUserByEmail(check.data.email);\n\n\t\t\tawait this.otpService.verifyOTPFromDatabase(\n\t\t\t\tuser.data,\n\t\t\t\tString(check.data.otp),\n\t\t\t\tTOKEN_LIST.PASSWORD_RESET\n\t\t\t);\n\t\t\tawait this.authenticationService.changePassword(user.data.id, check.data.password);\n\n\t\t\treturn this.apiResponse.successResponse(\"User password reset\");\n\t\t} catch (error) {\n\t\t\treturn this.apiResponse.sendResponse(error as ServiceApiResponse<unknown>);\n\t\t}\n\t}\n\n\tasync changePassword(): Promise<Response> {\n\t\ttry {\n\t\t\tconst { body, user: UserData } = this.request;\n\t\t\tconst check = UserChangePasswordSchema.safeParse(body);\n\t\t\tif (!check.success)\n\t\t\t\treturn this.apiResponse.badResponse(check.error.errors.map(err => err.message).join(\", \"));\n\n\t\t\tconst user = await this.authenticationService.findUserById(UserData?.id!, true);\n\n\t\t\tawait this.authenticationService.passwordChecker(check.data.oldPassword, user.data.password);\n\t\t\tconst response = await this.authenticationService.changePassword(\n\t\t\t\tuser.data.id,\n\t\t\t\tcheck.data.newPassword\n\t\t\t);\n\n\t\t\treturn this.apiResponse.sendResponse(response);\n\t\t} catch (error) {\n\t\t\treturn this.apiResponse.sendResponse(error as ServiceApiResponse<unknown>);\n\t\t}\n\t}\n\n\tasync requestOTPForUnverifiedUser() {\n\t\ttry {\n\t\t\tconst { body } = this.request;\n\t\t\tconst check = UserReverificationSchema.safeParse(body);\n\t\t\tif (!check.success)\n\t\t\t\treturn this.apiResponse.badResponse(check.error.errors.map(err => err.message).join(\", \"));\n\n\t\t\tconst user = await this.authenticationService.findUserByUsernameOrEmail(check.data.username);\n\n\t\t\tif (user.data.emailVerified) return this.apiResponse.badResponse(\"User is already verified\");\n\n\t\t\tconst otp = await this.otpService.saveOTPToDatabase(user.data, TOKEN_LIST.EMAIL_VERIFICATION);\n\n\t\t\tif (otp && user.data.email) {\n\t\t\t\tsendEmail({\n\t\t\t\t\temail: user.data.email,\n\t\t\t\t\temailSubject: \"Your account verification OTP\",\n\t\t\t\t\ttemplate: \"otpEmailTemplate\",\n\t\t\t\t\tdata: {\n\t\t\t\t\t\tusername: user.data.username,\n\t\t\t\t\t\totp,\n\t\t\t\t\t\totpExpirationTime: 5\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t}\n\n\t\t\treturn this.apiResponse.successResponse(\"OTP sent\");\n\t\t} catch (error) {\n\t\t\treturn this.apiResponse.sendResponse(error as ServiceApiResponse<unknown>);\n\t\t}\n\t}\n}\n","import bcrypt from \"bcrypt\";\nimport { and, eq } from \"drizzle-orm\";\nimport { Profile as GoogleUserProfile } from \"passport-google-oauth20\";\n\nimport { CreateUserType } from \"@/app/authentication/authentication.type\";\n\nimport { sessionTimeout } from \"@/core/constants\";\nimport DrizzleService from \"@/databases/drizzle/service\";\nimport { AccountSchemaType, UserSchemaType } from \"@/databases/drizzle/types\";\nimport { accounts, users } from \"@/models/drizzle/authentication.model\";\nimport OTPEmailService from \"@/service/otpService\";\nimport AppHelpers from \"@/utils/appHelpers\";\nimport { ServiceApiResponse, ServiceResponse } from \"@/utils/serviceApi\";\nimport { status } from \"@/utils/statusCodes\";\n\nexport default class AuthenticationService extends DrizzleService {\n\tprotected otpService: OTPEmailService;\n\n\t/**\n\t * Constructor for AuthenticationService\n\t */\n\tconstructor() {\n\t\tsuper();\n\t\tthis.otpService = new OTPEmailService();\n\t}\n\n\tasync createUser(\n\t\tdata: CreateUserType\n\t): Promise<ServiceApiResponse<Omit<UserSchemaType, \"password\">>> {\n\t\ttry {\n\t\t\tdata.username && (await this.duplicateUserCheckByUsername(data.username));\n\t\t\tdata.email && (await this.duplicateUserCheckByEmail(data.email));\n\t\t\tconst createdUser = await this.db.insert(users).values(data).returning();\n\n\t\t\tconst { password, ...user } = createdUser[0];\n\n\t\t\treturn ServiceResponse.createResponse(\n\t\t\t\tstatus.HTTP_201_CREATED,\n\t\t\t\t\"User created successfully\",\n\t\t\t\tuser\n\t\t\t);\n\t\t} catch (error) {\n\t\t\treturn ServiceResponse.createErrorResponse(error);\n\t\t}\n\t}\n\n\tasync createGoogleAccount(\n\t\tuserId: number,\n\t\tdata: GoogleUserProfile,\n\t\taccessToken: string\n\t): Promise<ServiceApiResponse<AccountSchemaType>> {\n\t\ttry {\n\t\t\tconst createdGoogleAccount = await this.db\n\t\t\t\t.insert(accounts)\n\t\t\t\t.values({\n\t\t\t\t\tuserId,\n\t\t\t\t\ttype: \"oauth\",\n\t\t\t\t\tprovider: \"google\",\n\t\t\t\t\tproviderAccountId: data.id,\n\t\t\t\t\taccessToken: accessToken,\n\t\t\t\t\trefreshToken: null,\n\t\t\t\t\texpiresAt: sessionTimeout,\n\t\t\t\t\ttokenType: \"access_token\",\n\t\t\t\t\tscope: \"profile\",\n\t\t\t\t\tidToken: data.id,\n\t\t\t\t\tsessionState: null\n\t\t\t\t})\n\t\t\t\t.returning();\n\n\t\t\treturn ServiceResponse.createResponse(\n\t\t\t\tstatus.HTTP_201_CREATED,\n\t\t\t\t\"Google account created successfully\",\n\t\t\t\tcreatedGoogleAccount[0]\n\t\t\t);\n\t\t} catch (error) {\n\t\t\treturn ServiceResponse.createErrorResponse(error);\n\t\t}\n\t}\n\n\tasync createUserFromGoogle(\n\t\tdata: GoogleUserProfile,\n\t\taccessToken: string\n\t): Promise<ServiceApiResponse<Omit<UserSchemaType, \"password\">>> {\n\t\ttry {\n\t\t\tconst checkUserExistence = await this.db.query.users.findFirst({\n\t\t\t\twhere: eq(users.email, data._json.email!),\n\t\t\t\twith: {\n\t\t\t\t\taccounts: {\n\t\t\t\t\t\twhere: and(eq(accounts.providerAccountId, data.id), eq(accounts.provider, \"google\"))\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\n\t\t\t// If user exists\n\t\t\tif (checkUserExistence) {\n\t\t\t\t// If user has a google account, update the access token\n\t\t\t\tif (checkUserExistence.accounts.length > 0) {\n\t\t\t\t\tawait this.db\n\t\t\t\t\t\t.update(accounts)\n\t\t\t\t\t\t.set({ accessToken })\n\t\t\t\t\t\t.where(eq(accounts.providerAccountId, data.id));\n\n\t\t\t\t\tif (!checkUserExistence.emailVerified)\n\t\t\t\t\t\tawait this.accountVerification(checkUserExistence.id);\n\n\t\t\t\t\tconst { accounts: userAccounts, ...user } = checkUserExistence;\n\n\t\t\t\t\treturn ServiceResponse.createResponse(\n\t\t\t\t\t\tstatus.HTTP_200_OK,\n\t\t\t\t\t\t\"Google account updated successfully\",\n\t\t\t\t\t\tuser\n\t\t\t\t\t);\n\t\t\t\t} else {\n\t\t\t\t\t// If user does not have a google account, create one\n\t\t\t\t\tawait this.createGoogleAccount(checkUserExistence.id, data, accessToken);\n\n\t\t\t\t\tconst { accounts: userAccounts, ...user } = checkUserExistence;\n\n\t\t\t\t\treturn ServiceResponse.createResponse(\n\t\t\t\t\t\tstatus.HTTP_201_CREATED,\n\t\t\t\t\t\t\"Google account created successfully\",\n\t\t\t\t\t\tuser\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// If user does not exist, create a new user\n\t\t\tconst createdUser = await this.createUser({\n\t\t\t\tname: data._json.name!,\n\t\t\t\temail: data._json.email!,\n\t\t\t\tusername: data._json.email!.split(\"@\")[0],\n\t\t\t\tpassword: null,\n\t\t\t\temailVerified: new Date(),\n\t\t\t\timage: data._json.picture!\n\t\t\t});\n\n\t\t\t// Create google account\n\t\t\tawait this.createGoogleAccount(createdUser.data?.id!, data, accessToken);\n\n\t\t\treturn ServiceResponse.createResponse(\n\t\t\t\tstatus.HTTP_201_CREATED,\n\t\t\t\t\"User created successfully\",\n\t\t\t\tcreatedUser.data\n\t\t\t);\n\t\t} catch (error) {\n\t\t\treturn ServiceResponse.createErrorResponse(error);\n\t\t}\n\t}\n\n\tasync findUserByUsernameOrEmail(username: string): Promise<ServiceApiResponse<UserSchemaType>> {\n\t\ttry {\n\t\t\tconst inputType = AppHelpers.detectInputType(username);\n\n\t\t\tlet findUser: Partial<Omit<UserSchemaType, \"password\">> = {};\n\n\t\t\tif (inputType === \"EMAIL\") {\n\t\t\t\tconst user = await this.findUserByEmail(username, true);\n\t\t\t\tfindUser = user.data!;\n\t\t\t\treturn ServiceResponse.createResponse(\n\t\t\t\t\tstatus.HTTP_200_OK,\n\t\t\t\t\t\"User found successfully\",\n\t\t\t\t\tfindUser as UserSchemaType\n\t\t\t\t);\n\t\t\t} else if (inputType === \"USERNAME\") {\n\t\t\t\tconst user = await this.findUserByUsername(username, true);\n\t\t\t\tfindUser = user.data!;\n\t\t\t\treturn ServiceResponse.createResponse(\n\t\t\t\t\tstatus.HTTP_200_OK,\n\t\t\t\t\t\"User found successfully\",\n\t\t\t\t\tfindUser as UserSchemaType\n\t\t\t\t);\n\t\t\t}\n\t\t\treturn ServiceResponse.createResponse(\n\t\t\t\tstatus.HTTP_400_BAD_REQUEST,\n\t\t\t\t\"Invalid input type\",\n\t\t\t\tfindUser as UserSchemaType\n\t\t\t);\n\t\t} catch (error) {\n\t\t\treturn ServiceResponse.createErrorResponse(error);\n\t\t}\n\t}\n\n\tasync findUserById(\n\t\tid: number,\n\t\twithPassword: boolean = false\n\t): Promise<ServiceApiResponse<UserSchemaType>> {\n\t\ttry {\n\t\t\tconst user = await this.db.query.users.findFirst({\n\t\t\t\twhere: eq(users.id, id)\n\t\t\t});\n\n\t\t\tif (!user)\n\t\t\t\treturn ServiceResponse.createRejectResponse(status.HTTP_404_NOT_FOUND, \"User not found\");\n\n\t\t\tif (withPassword)\n\t\t\t\treturn ServiceResponse.createResponse(status.HTTP_200_OK, \"User found successfully\", user);\n\n\t\t\tconst { password, ...userData } = user;\n\n\t\t\treturn ServiceResponse.createResponse(\n\t\t\t\tstatus.HTTP_200_OK,\n\t\t\t\t\"User found successfully\",\n\t\t\t\tuserData as UserSchemaType\n\t\t\t);\n\t\t} catch (error) {\n\t\t\treturn ServiceResponse.createErrorResponse(error);\n\t\t}\n\t}\n\n\tasync findUserByEmail(\n\t\temail: string,\n\t\twithPassword: boolean = false\n\t): Promise<ServiceApiResponse<UserSchemaType>> {\n\t\ttry {\n\t\t\tconst user = await this.db.query.users.findFirst({\n\t\t\t\twhere: eq(users.email, email)\n\t\t\t});\n\n\t\t\tif (!user)\n\t\t\t\treturn ServiceResponse.createRejectResponse(status.HTTP_404_NOT_FOUND, \"User not found\");\n\n\t\t\tif (withPassword)\n\t\t\t\treturn ServiceResponse.createResponse(status.HTTP_200_OK, \"User found successfully\", user);\n\n\t\t\tconst { password, ...userData } = user;\n\n\t\t\treturn ServiceResponse.createResponse(\n\t\t\t\tstatus.HTTP_200_OK,\n\t\t\t\t\"User found successfully\",\n\t\t\t\tuserData as UserSchemaType\n\t\t\t);\n\t\t} catch (error) {\n\t\t\treturn ServiceResponse.createErrorResponse(error);\n\t\t}\n\t}\n\n\tasync findUserByUsername(\n\t\tusername: string,\n\t\twithPassword: boolean = false\n\t): Promise<ServiceApiResponse<UserSchemaType>> {\n\t\ttry {\n\t\t\tconst user = await this.db.query.users.findFirst({\n\t\t\t\twhere: eq(users.username, username)\n\t\t\t});\n\n\t\t\tif (!user)\n\t\t\t\treturn ServiceResponse.createRejectResponse(status.HTTP_404_NOT_FOUND, \"User not found\");\n\n\t\t\tif (withPassword)\n\t\t\t\treturn ServiceResponse.createResponse(status.HTTP_200_OK, \"User found successfully\", user);\n\n\t\t\tconst { password, ...userData } = user;\n\n\t\t\treturn ServiceResponse.createResponse(\n\t\t\t\tstatus.HTTP_200_OK,\n\t\t\t\t\"User found successfully\",\n\t\t\t\tuserData as UserSchemaType\n\t\t\t);\n\t\t} catch (error) {\n\t\t\treturn ServiceResponse.createErrorResponse(error);\n\t\t}\n\t}\n\n\tasync duplicateUserCheckByEmail(email: string): Promise<ServiceApiResponse<boolean>> {\n\t\ttry {\n\t\t\tconst user = await this.db.query.users.findFirst({\n\t\t\t\twhere: eq(users.email, email)\n\t\t\t});\n\n\t\t\tif (user)\n\t\t\t\treturn ServiceResponse.createRejectResponse(\n\t\t\t\t\tstatus.HTTP_409_CONFLICT,\n\t\t\t\t\t\"User already exists\"\n\t\t\t\t);\n\n\t\t\treturn ServiceResponse.createResponse(status.HTTP_200_OK, \"User does not exist\", false);\n\t\t} catch (error) {\n\t\t\treturn ServiceResponse.createErrorResponse(error);\n\t\t}\n\t}\n\n\tasync duplicateUserCheckByUsername(username: string): Promise<ServiceApiResponse<boolean>> {\n\t\ttry {\n\t\t\tconst user = await this.db.query.users.findFirst({\n\t\t\t\twhere: eq(users.username, username)\n\t\t\t});\n\n\t\t\tif (user)\n\t\t\t\treturn ServiceResponse.createRejectResponse(\n\t\t\t\t\tstatus.HTTP_409_CONFLICT,\n\t\t\t\t\t\"User already exists\"\n\t\t\t\t);\n\n\t\t\treturn ServiceResponse.createResponse(status.HTTP_200_OK, \"User does not exist\", false);\n\t\t} catch (error) {\n\t\t\treturn ServiceResponse.createErrorResponse(error);\n\t\t}\n\t}\n\n\tasync passwordChecker(\n\t\tpassword: string,\n\t\thashedPassword: string | null\n\t): Promise<ServiceApiResponse<boolean>> {\n\t\ttry {\n\t\t\tif (!hashedPassword) {\n\t\t\t\treturn ServiceResponse.createRejectResponse(\n\t\t\t\t\tstatus.HTTP_400_BAD_REQUEST,\n\t\t\t\t\t\"User account has no password\"\n\t\t\t\t);\n\t\t\t}\n\t\t\tconst check = await bcrypt.compare(password, hashedPassword);\n\n\t\t\tif (!check)\n\t\t\t\treturn ServiceResponse.createRejectResponse(\n\t\t\t\t\tstatus.HTTP_400_BAD_REQUEST,\n\t\t\t\t\t\"Password incorrect\"\n\t\t\t\t);\n\n\t\t\treturn ServiceResponse.createResponse(status.HTTP_200_OK, \"Password checked\", check);\n\t\t} catch (error) {\n\t\t\treturn ServiceResponse.createErrorResponse(error);\n\t\t}\n\t}\n\n\tasync accountVerification(id: number): Promise<ServiceApiResponse<boolean>> {\n\t\ttry {\n\t\t\tawait this.db\n\t\t\t\t.update(users)\n\t\t\t\t.set({\n\t\t\t\t\temailVerified: new Date()\n\t\t\t\t})\n\t\t\t\t.where(eq(users.id, id));\n\n\t\t\treturn ServiceResponse.createResponse(status.HTTP_200_OK, \"User verified\", true);\n\t\t} catch (error) {\n\t\t\treturn ServiceResponse.createErrorResponse(error);\n\t\t}\n\t}\n\n\tasync checkAccountVerification(id: number): Promise<ServiceApiResponse<boolean>> {\n\t\ttry {\n\t\t\tconst user = await this.findUserById(id);\n\n\t\t\tif (!user.data?.emailVerified)\n\t\t\t\treturn ServiceResponse.createRejectResponse(\n\t\t\t\t\tstatus.HTTP_400_BAD_REQUEST,\n\t\t\t\t\t\"User is not verified\"\n\t\t\t\t);\n\n\t\t\treturn ServiceResponse.createResponse(status.HTTP_200_OK, \"User is verified\", true);\n\t\t} catch (error) {\n\t\t\treturn ServiceResponse.createErrorResponse(error);\n\t\t}\n\t}\n\n\tasync changePassword(id: number, newPassword: string): Promise<ServiceApiResponse<boolean>> {\n\t\ttry {\n\t\t\tconst hashedPassword = await bcrypt.hash(newPassword, 10);\n\n\t\t\tawait this.db\n\t\t\t\t.update(users)\n\t\t\t\t.set({\n\t\t\t\t\tpassword: hashedPassword\n\t\t\t\t})\n\t\t\t\t.where(eq(users.id, id));\n\n\t\t\treturn ServiceResponse.createResponse(\n\t\t\t\tstatus.HTTP_200_OK,\n\t\t\t\t\"Password changed successfully\",\n\t\t\t\ttrue\n\t\t\t);\n\t\t} catch (error) {\n\t\t\treturn ServiceResponse.createErrorResponse(error);\n\t\t}\n\t}\n}\n","export const origins = [\"http://localhost:3000\"];\nexport const sessionTimeout = 1000 * 60 * 60 * 24 * 7; // 1 week in milliseconds\nexport const csrfTimeout = 1000 * 60 * 60; // 5 seconds in milliseconds\n","import dotenv from \"dotenv\";\nimport { drizzle } from \"drizzle-orm/postgres-js\";\nimport postgres from \"postgres\";\n\nimport schema from \"@/databases/drizzle/schema\";\n\ndotenv.config();\n\nconst sql = postgres(process.env.DATABASE_URL);\nconst db = drizzle(sql, { schema });\n\nconst pool = postgres(process.env.DATABASE_URL, { max: 1 });\nexport const dbPool = drizzle(pool);\n\nexport default db;\n","import { relations } from \"drizzle-orm\";\nimport {\n\tinteger,\n\tpgEnum,\n\tpgTable,\n\tserial,\n\ttext,\n\ttimestamp,\n\tuniqueIndex\n} from \"drizzle-orm/pg-core\";\n\nimport { timestamps } from \"@/databases/drizzle/helpers\";\nimport { ROLE_LIST, TOKEN_LIST } from \"@/databases/drizzle/lists\";\n\nexport const ROLE_TYPE = pgEnum(\"role_type\", ROLE_LIST.enumValues);\n\nexport const TOKEN_TYPE = pgEnum(\"token_type\", TOKEN_LIST.enumValues);\n\nexport const users = pgTable(\"user\", {\n\tid: serial(\"id\").primaryKey(),\n\tname: text(\"name\"),\n\tusername: text(\"username\").unique(),\n\temail: text(\"email\").unique(),\n\tpassword: text(\"password\"),\n\temailVerified: timestamp(\"email_verified\", { withTimezone: true }),\n\timage: text(\"image\"),\n\trole: ROLE_TYPE(\"role\").default(\"SUBSCRIBER\"),\n\t...timestamps\n});\n\nexport const accounts = pgTable(\"account\", {\n\tid: serial(\"id\").primaryKey(),\n\tuserId: integer(\"user_id\")\n\t\t.notNull()\n\t\t.references(() => users.id, { onDelete: \"cascade\" }),\n\ttype: text(\"type\").notNull(),\n\tprovider: text(\"provider\").notNull(),\n\tproviderAccountId: text(\"provider_account_id\").notNull(),\n\trefreshToken: text(\"refresh_token\"),\n\taccessToken: text(\"access_token\"),\n\texpiresAt: integer(\"expires_at\"),\n\ttokenType: text(\"token_type\"),\n\tscope: text(\"scope\"),\n\tidToken: text(\"id_token\"),\n\tsessionState: text(\"session_state\"),\n\t...timestamps\n});\n\nexport const sessions = pgTable(\"session\", {\n\tid: serial(\"id\").primaryKey(),\n\tsessionId: text(\"session_id\").notNull().unique(),\n\tsessionCookie: text(\"session_cookie\").unique(),\n\tuserId: integer(\"user_id\").references(() => users.id, { onDelete: \"cascade\" }),\n\texpires: timestamp(\"expires\", { withTimezone: true }).notNull(),\n\t...timestamps\n});\n\nexport const verificationToken = pgTable(\n\t\"verification_token\",\n\t{\n\t\tid: serial(\"id\").primaryKey(),\n\t\tidentifier: text(\"identifier\").notNull(),\n\t\ttoken: text(\"token\").notNull(),\n\t\ttokenType: TOKEN_TYPE(\"token_type\").notNull(),\n\t\texpires: timestamp(\"expires\", { withTimezone: true }).notNull(),\n\t\t...timestamps\n\t},\n\ttable => ({\n\t\tidentifierTypeIdx: uniqueIndex(\"identifier_type_idx\").on(table.identifier, table.tokenType)\n\t})\n);\n\n// Relationships\nexport const usersRelations = relations(users, ({ many }) => ({\n\taccounts: many(accounts),\n\tsessions: many(sessions)\n}));\n\nexport const accountsRelations = relations(accounts, ({ one }) => ({\n\tuser: one(users, {\n\t\tfields: [accounts.userId],\n\t\treferences: [users.id]\n\t})\n}));\n\nexport const sessionsRelations = relations(sessions, ({ one }) => ({\n\tuser: one(users, {\n\t\tfields: [sessions.userId],\n\t\treferences: [users.id]\n\t})\n}));\n","import { timestamp } from \"drizzle-orm/pg-core\";\n\nexport const timestamps = {\n\tcreatedAt: timestamp(\"created_at\", { withTimezone: true }).notNull().defaultNow(),\n\tupdatedAt: timestamp(\"updated_at\", { withTimezone: true })\n\t\t.notNull()\n\t\t.defaultNow()\n\t\t.$onUpdate(() => new Date())\n};\n","export const ROLE_LIST = {\n\tSUPER_ADMIN: \"SUPER_ADMIN\",\n\tADMINISTRATOR: \"ADMINISTRATOR\",\n\tEDITOR: \"EDITOR\",\n\tAUTHOR: \"AUTHOR\",\n\tCONTRIBUTOR: \"CONTRIBUTOR\",\n\tSUBSCRIBER: \"SUBSCRIBER\",\n\tenumValues: [\"SUPER_ADMIN\", \"ADMINISTRATOR\", \"EDITOR\", \"AUTHOR\", \"CONTRIBUTOR\", \"SUBSCRIBER\"]\n} as const;\n\nexport const TOKEN_LIST = {\n\tPASSWORD_RESET: \"PASSWORD_RESET\",\n\tEMAIL_VERIFICATION: \"EMAIL_VERIFICATION\",\n\tLOGIN_OTP: \"LOGIN_OTP\",\n\tenumValues: [\"PASSWORD_RESET\", \"EMAIL_VERIFICATION\", \"LOGIN_OTP\"]\n} as const;\n","import { pgTable, serial, text, varchar } from \"drizzle-orm/pg-core\";\n\nimport { timestamps } from \"@/databases/drizzle/helpers\";\n\nexport const todo = pgTable(\"todo\", {\n\tid: serial(\"id\").primaryKey(),\n\ttitle: varchar(\"title\", { length: 255 }).notNull(),\n\tdescription: text(\"description\").notNull(),\n\t...timestamps\n});\n","import * as AuthenticationSchema from \"@/models/drizzle/authentication.model\";\nimport * as TodoSchema from \"@/models/drizzle/todo.model\";\n\nconst schema = {\n\t...TodoSchema,\n\t...AuthenticationSchema\n};\n\nexport default schema;\n","import db from \"@/databases/drizzle/connection\";\n\nexport default abstract class DrizzleService {\n\tprotected db: typeof db;\n\n\tconstructor() {\n\t\tthis.db = db;\n\t}\n}\n","import { and, eq } from \"drizzle-orm\";\n\nimport DrizzleService from \"@/databases/drizzle/service\";\nimport { TokenType, UserSchemaType } from \"@/databases/drizzle/types\";\nimport { verificationToken } from \"@/models/drizzle/authentication.model\";\nimport AppHelpers from \"@/utils/appHelpers\";\nimport { ServiceResponse } from \"@/utils/serviceApi\";\nimport { status } from \"@/utils/statusCodes\";\n\nexport default class OTPService extends DrizzleService {\n\tprivate async limitOTPRequest(\n\t\tuser: Partial<UserSchemaType>,\n\t\ttokenType: TokenType,\n\t\ttimeLimit: number = 5\n\t) {\n\t\ttry {\n\t\t\tconst otpRequestCount = await this.db.query.verificationToken.findFirst({\n\t\t\t\twhere: and(\n\t\t\t\t\teq(verificationToken.identifier, user.email!),\n\t\t\t\t\teq(verificationToken.tokenType, tokenType)\n\t\t\t\t)\n\t\t\t});\n\n\t\t\tconst currentMinute = new Date().getTime();\n\t\t\tconst otpRequestUpdateTime = new Date(otpRequestCount?.updatedAt!).getTime();\n\t\t\tconst timeDifference = currentMinute - otpRequestUpdateTime;\n\t\t\t// Convert it to human readable time\n\t\t\tconst timeDifferenceInMinutes = Math.floor(timeDifference / 60000);\n\t\t\tconsole.log(\"Time difference in minutes: \", timeDifferenceInMinutes);\n\n\t\t\tif (otpRequestCount && timeDifferenceInMinutes < timeLimit) {\n\t\t\t\tconst message = `You can only request OTP per ${timeLimit} minute(s). Please wait for ${timeLimit - timeDifferenceInMinutes} minute(s)`;\n\t\t\t\treturn ServiceResponse.createRejectResponse(status.HTTP_429_TOO_MANY_REQUESTS, message);\n\t\t\t}\n\n\t\t\treturn Promise.resolve(true);\n\t\t} catch (error) {\n\t\t\treturn ServiceResponse.createErrorResponse(error);\n\t\t}\n\t}\n\n\tasync saveOTPToDatabase(\n\t\tuser: Partial<UserSchemaType>,\n\t\ttokenType: TokenType,\n\t\texpiresAt: Date = AppHelpers.OTPExpiry()\n\t) {\n\t\ttry {\n\t\t\tif (!user.email)\n\t\t\t\treturn ServiceResponse.createRejectResponse(\n\t\t\t\t\tstatus.HTTP_404_NOT_FOUND,\n\t\t\t\t\t\"Email is not registered\"\n\t\t\t\t);\n\n\t\t\tawait this.limitOTPRequest(user, tokenType);\n\n\t\t\tconst generatedOTP = AppHelpers.OTPGenerator();\n\t\t\tawait this.db\n\t\t\t\t.insert(verificationToken)\n\t\t\t\t.values({\n\t\t\t\t\tidentifier: user.email,\n\t\t\t\t\ttoken: String(generatedOTP),\n\t\t\t\t\ttokenType,\n\t\t\t\t\texpires: expiresAt\n\t\t\t\t})\n\t\t\t\t.onConflictDoUpdate({\n\t\t\t\t\ttarget: [verificationToken.identifier, verificationToken.tokenType],\n\t\t\t\t\tset: {\n\t\t\t\t\t\ttoken: String(generatedOTP),\n\t\t\t\t\t\texpires: expiresAt\n\t\t\t\t\t}\n\t\t\t\t});\n\n\t\t\treturn Promise.resolve(generatedOTP);\n\t\t} catch (error) {\n\t\t\treturn ServiceResponse.createErrorResponse(error);\n\t\t}\n\t}\n\n\tasync verifyOTPFromDatabase(user: Partial<UserSchemaType>, otp: string, tokenType: TokenType) {\n\t\ttry {\n\t\t\tconst tokenRecord = await this.db.query.verificationToken.findFirst({\n\t\t\t\twhere: and(\n\t\t\t\t\teq(verificationToken.identifier, user.email!),\n\t\t\t\t\teq(verificationToken.token, otp),\n\t\t\t\t\teq(verificationToken.tokenType, tokenType)\n\t\t\t\t)\n\t\t\t});\n\n\t\t\tif (!tokenRecord)\n\t\t\t\treturn ServiceResponse.createRejectResponse(status.HTTP_400_BAD_REQUEST, \"Invalid OTP\");\n\n\t\t\tif (tokenRecord?.expires && tokenRecord.expires < new Date()) {\n\t\t\t\tawait this.deleteOTPFromDatabase(user, tokenType);\n\t\t\t\treturn ServiceResponse.createRejectResponse(status.HTTP_400_BAD_REQUEST, \"OTP expired\");\n\t\t\t}\n\n\t\t\tawait this.deleteOTPFromDatabase(user, tokenType);\n\n\t\t\treturn Promise.resolve(true);\n\t\t} catch (error) {\n\t\t\treturn ServiceResponse.createErrorResponse(error);\n\t\t}\n\t}\n\n\tasync deleteOTPFromDatabase(user: Partial<UserSchemaType>, tokenType: TokenType) {\n\t\ttry {\n\t\t\tawait this.db\n\t\t\t\t.delete(verificationToken)\n\t\t\t\t.where(\n\t\t\t\t\tand(\n\t\t\t\t\t\teq(verificationToken.identifier, user.email!),\n\t\t\t\t\t\teq(verificationToken.tokenType, tokenType)\n\t\t\t\t\t)\n\t\t\t\t);\n\n\t\t\treturn Promise.resolve(true);\n\t\t} catch (error) {\n\t\t\treturn ServiceResponse.createErrorResponse(error);\n\t\t}\n\t}\n}\n","import * as crypto from \"crypto\";\nimport { CookieOptions } from \"express\";\n\ninterface SameSiteCookieConfig {\n\tsameSite: CookieOptions[\"sameSite\"];\n\tsecure: boolean;\n\tdomain?: string;\n}\n\nexport default class AppHelpers {\n\t/**\n\t * Encodes a buffer into a base32 string.\n\t * @param buffer - The buffer to encode.\n\t * @returns The base32 encoded string.\n\t */\n\tprivate base32Encode(buffer: Buffer): string {\n\t\tconst alphabet = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ234567\"; // Base32 alphabet\n\t\tlet result = \"\";\n\t\tlet bits = 0;\n\t\tlet value = 0;\n\n\t\tfor (let i = 0; i < buffer.length; i++) {\n\t\t\tvalue = (value << 8) | buffer[i];\n\t\t\tbits += 8;\n\n\t\t\twhile (bits >= 5) {\n\t\t\t\tresult += alphabet[(value >>> (bits - 5)) & 31];\n\t\t\t\tbits -= 5;\n\t\t\t}\n\t\t}\n\n\t\tif (bits > 0) {\n\t\t\tresult += alphabet[(value << (5 - bits)) & 31];\n\t\t}\n\n\t\treturn result;\n\t}\n\n\t/**\n\t * Generates a token using the user information and a secret key.\n\t * @param userInfo - The user information to encrypt.\n\t * @param secretKey - The secret key to encrypt the user information.\n\t * @returns The generated token.\n\t */\n\tpublic generateToken(userId: number, secretKey: string): string {\n\t\t// 1. Generate a timestamp\n\t\tconst timestamp = new Date().toISOString();\n\n\t\t// 2. Combine timestamp and user information\n\t\tconst data = `${timestamp}:${userId}`;\n\t\tconst buffer = Buffer.from(data, \"utf-8\");\n\n\t\t// 3. Encrypt the data using AES\n\t\tconst algorithm = \"aes-256-cbc\";\n\t\tconst iv = crypto.randomBytes(16); // Initialization vector\n\t\tconst key = crypto.createHash(\"sha256\").update(secretKey).digest(); // Derive a 256-bit key\n\t\tconst cipher = crypto.createCipheriv(algorithm, key, iv);\n\t\tconst encrypted = Buffer.concat([cipher.update(buffer), cipher.final()]);\n\n\t\t// 4. Combine IV and encrypted data\n\t\tconst encryptedBuffer = Buffer.concat([iv, encrypted]);\n\n\t\t// 5. Encode to Base32\n\t\treturn this.base32Encode(encryptedBuffer);\n\t}\n\n\t/**\n\t * Determines if the input is an email or a username.\n\t * @param input - The user-provided input.\n\t * @returns \"email\" if the input is an email, \"username\" otherwise.\n\t */\n\tstatic detectInputType(input: string): \"EMAIL\" | \"USERNAME\" {\n\t\t// Regular expression to validate email format\n\t\tconst emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n\t\treturn emailRegex.test(input) ? \"EMAIL\" : \"USERNAME\";\n\t}\n\n\t/**\n\t * Generates a random OTP of the specified length.\n\t * @param length - The length of the OTP to generate.\n\t * @returns The generated OTP.\n\t * @throws An error if the length is less than 4.\n\t */\n\tstatic OTPGenerator(length: number = 4): number {\n\t\tif (length < 4) {\n\t\t\tthrow new Error(\"The OTP length must be at least 4.\");\n\t\t}\n\n\t\tconst min = Math.pow(10, length - 1);\n\t\tconst max = Math.pow(10, length) - 1;\n\t\treturn Math.floor(Math.random() * (max - min + 1) + min);\n\t}\n\n\t/**\n\t * Generate OTP expiry time.\n\t * @param expiryTime - The expiry time in minutes.\n\t * @returns The expiry time in Date format.\n\t */\n\tstatic OTPExpiry(expiryTime: number = 5): Date {\n\t\tconst now = new Date();\n\t\treturn new Date(now.getTime() + expiryTime * 60000);\n\t}\n\n\t/**\n\t * Determines the appropriate SameSite and secure settings for cookies based on the provided URLs.\n\t * @returns The SameSite and secure settings for cookies.\n\t */\n\tstatic sameSiteCookieConfig(): SameSiteCookieConfig {\n\t\ttry {\n\t\t\tconst appUrl = process.env.APP_URL;\n\t\t\tconst apiUrl =\n\t\t\t\tprocess.env.NODE_ENV === \"production\"\n\t\t\t\t\t? process.env.API_URL\n\t\t\t\t\t: `http://localhost:${process.env.PORT}`;\n\n\t\t\tconst appUrlObj = new URL(appUrl);\n\t\t\tconst apiUrlObj = new URL(apiUrl);\n\n\t\t\t// Extract the base domain (excluding subdomains)\n\t\t\tconst getBaseDomain = (hostname: string) => {\n\t\t\t\tconst parts = hostname.split(\".\");\n\t\t\t\treturn parts.slice(-2).join(\".\");\n\t\t\t};\n\n\t\t\tconst appBaseDomain = getBaseDomain(appUrlObj.hostname);\n\t\t\tconst apiBaseDomain = getBaseDomain(apiUrlObj.hostname);\n\n\t\t\tconst isSecure = appUrlObj.protocol === \"https:\" || apiUrlObj.protocol === \"https:\";\n\n\t\t\t// Determine domain value - only set if on same base domain\n\t\t\tlet domain: string | undefined;\n\t\t\tif (appBaseDomain === apiBaseDomain && !appUrlObj.hostname.includes(\"localhost\")) {\n\t\t\t\tdomain = \".\" + appBaseDomain;\n\t\t\t}\n\n\t\t\t// For localhost, set the exact hostname\n\t\t\tif (apiUrlObj.hostname.includes(\"localhost\")) {\n\t\t\t\tdomain = apiUrlObj.hostname;\n\t\t\t}\n\n\t\t\t// Determine sameSite value\n\t\t\tlet sameSite: CookieOptions[\"sameSite\"];\n\t\t\tif (appBaseDomain === apiBaseDomain) {\n\t\t\t\tsameSite = \"strict\";\n\t\t\t} else if (\n\t\t\t\tappUrlObj.hostname.includes(\"localhost\") &&\n\t\t\t\tapiUrlObj.hostname.includes(\"localhost\")\n\t\t\t) {\n\t\t\t\tsameSite = \"lax\";\n\t\t\t} else {\n\t\t\t\tsameSite = \"none\";\n\t\t\t}\n\n\t\t\treturn {\n\t\t\t\tsameSite,\n\t\t\t\tsecure: isSecure,\n\t\t\t\tdomain\n\t\t\t};\n\t\t} catch (error) {\n\t\t\treturn {\n\t\t\t\tsameSite: \"lax\",\n\t\t\t\tsecure: true\n\t\t\t};\n\t\t}\n\t}\n}\n","export const status = {\n\tHTTP_100_CONTINUE: 100,\n\tHTTP_101_SWITCHING_PROTOCOLS: 101,\n\tHTTP_102_PROCESSING: 102,\n\tHTTP_103_EARLY_HINTS: 103,\n\tHTTP_200_OK: 200,\n\tHTTP_201_CREATED: 201,\n\tHTTP_202_ACCEPTED: 202,\n\tHTTP_203_NON_AUTHORITATIVE_INFORMATION: 203,\n\tHTTP_204_NO_DATA: 204,\n\tHTTP_205_RESET_DATA: 205,\n\tHTTP_206_PARTIAL_DATA: 206,\n\tHTTP_207_MULTI_STATUS: 207,\n\tHTTP_208_ALREADY_REPORTED: 208,\n\tHTTP_226_IM_USED: 226,\n\tHTTP_300_MULTIPLE_CHOICES: 300,\n\tHTTP_301_MOVED_PERMANENTLY: 301,\n\tHTTP_302_FOUND: 302,\n\tHTTP_303_SEE_OTHER: 303,\n\tHTTP_304_NOT_MODIFIED: 304,\n\tHTTP_305_USE_PROXY: 305,\n\tHTTP_306_SWITCH_PROXY: 306,\n\tHTTP_307_TEMPORARY_REDIRECT: 307,\n\tHTTP_308_PERMANENT_REDIRECT: 308,\n\tHTTP_400_BAD_REQUEST: 400,\n\tHTTP_401_UNAUTHORIZED: 401,\n\tHTTP_402_PAYMENT_REQUIRED: 402,\n\tHTTP_403_FORBIDDEN: 403,\n\tHTTP_404_NOT_FOUND: 404,\n\tHTTP_405_METHOD_NOT_ALLOWED: 405,\n\tHTTP_406_NOT_ACCEPTABLE: 406,\n\tHTTP_407_PROXY_AUTHENTICATION_REQUIRED: 407,\n\tHTTP_408_REQUEST_TIMEOUT: 408,\n\tHTTP_409_CONFLICT: 409,\n\tHTTP_410_GONE: 410,\n\tHTTP_411_LENGTH_REQUIRED: 411,\n\tHTTP_412_PRECONDITION_FAILED: 412,\n\tHTTP_413_PAYLOAD_TOO_LARGE: 413,\n\tHTTP_414_URI_TOO_LONG: 414,\n\tHTTP_415_UNSUPPORTED_MEDIA_TYPE: 415,\n\tHTTP_416_RANGE_NOT_SATISFIABLE: 416,\n\tHTTP_417_EXPECTATION_FAILED: 417,\n\tHTTP_418_IM_A_TEAPOT: 418,\n\tHTTP_421_MISDIRECTED_REQUEST: 421,\n\tHTTP_422_UNPROCESSABLE_ENTITY: 422,\n\tHTTP_423_LOCKED: 423,\n\tHTTP_424_FAILED_DEPENDENCY: 424,\n\tHTTP_425_TOO_EARLY: 425,\n\tHTTP_426_UPGRADE_REQUIRED: 426,\n\tHTTP_428_PRECONDITION_REQUIRED: 428,\n\tHTTP_429_TOO_MANY_REQUESTS: 429,\n\tHTTP_431_REQUEST_HEADER_FIELDS_TOO_LARGE: 431,\n\tHTTP_451_UNAVAILABLE_FOR_LEGAL_REASONS: 451,\n\tHTTP_500_INTERNAL_SERVER_ERROR: 500,\n\tHTTP_501_NOT_IMPLEMENTED: 501,\n\tHTTP_502_BAD_GATEWAY: 502,\n\tHTTP_503_SERVICE_UNAVAILABLE: 503,\n\tHTTP_504_GATEWAY_TIMEOUT: 504,\n\tHTTP_505_HTTP_VERSION_NOT_SUPPORTED: 505,\n\tHTTP_506_VARIANT_ALSO_NEGOTIATES: 506,\n\tHTTP_507_INSUFFICIENT_STORAGE: 507,\n\tHTTP_508_LOOP_DETECTED: 508,\n\tHTTP_510_NOT_EXTENDED: 510,\n\tHTTP_511_NETWORK_AUTHENTICATION_REQUIRED: 511\n};\n","import { Response } from \"express\";\n\nimport { status } from \"@/utils/statusCodes\";\n\n// Create a type from the status object values\ntype HttpStatusCode = (typeof status)[keyof typeof status];\n\n// Stricter Pagination interface with required fields\nexport interface Pagination {\n\ttotalItems: number;\n\tlimit: number;\n\toffset: number;\n\tcurrentPage: number;\n\ttotalPages: number;\n\thasPrevPage: boolean;\n\thasNextPage: boolean;\n\tprevPage: number | null;\n\tnextPage: number | null;\n}\n\n// Base interface for API responses\ninterface BaseApiResponse {\n\tstatus: HttpStatusCode;\n\tmessage: string;\n}\n\n// Generic response interfaces with strict typing\nexport interface ServiceApiResponse<T> extends BaseApiResponse {\n\tdata: T;\n\tpagination?: Pagination;\n}\n\nexport interface ServiceSendApiResponse<T> extends BaseApiResponse {\n\tdata?: T;\n\tpagination?: Pagination;\n}\n\n// Error type definitions\nexport interface ApiError extends BaseApiResponse {\n\terror?: string;\n}\n\nconst isApiError = (error: unknown): error is ApiError => {\n\treturn (\n\t\terror !== null &&\n\t\ttypeof error === \"object\" &&\n\t\t\"status\" in error &&\n\t\ttypeof (error as ApiError).status === \"number\" &&\n\t\t\"message\" in error &&\n\t\ttypeof (error as ApiError).message === \"string\"\n\t);\n};\n\nconst NO_CONTENT_STATUSES = new Set([status.HTTP_204_NO_DATA]);\n\nexport class ServiceResponse {\n\tstatic async createResponse<T>(\n\t\tstatus: HttpStatusCode,\n\t\tmessage: string,\n\t\tdata: T,\n\t\tpagination?: Pagination\n\t): Promise<ServiceApiResponse<T>> {\n\t\tif (NO_CONTENT_STATUSES.has(status)) {\n\t\t\treturn Promise.resolve({ status, message, data: undefined as T });\n\t\t}\n\t\treturn Promise.resolve({ status, message, data, pagination });\n\t}\n\n\tstatic async createRejectResponse<T>(\n\t\tstatus: HttpStatusCode,\n\t\tmessage: string\n\t): Promise<ServiceApiResponse<T>> {\n\t\treturn Promise.reject({ status, message });\n\t}\n\n\tstatic createErrorResponse(error: unknown): Promise<never> {\n\t\tconsole.error(\"Error:\", error instanceof Error ? error.message : error);\n\n\t\tif (isApiError(error)) return Promise.reject(error);\n\n\t\treturn Promise.reject({\n\t\t\tstatus: status.HTTP_500_INTERNAL_SERVER_ERROR,\n\t\t\tmessage: \"Internal Server Error\"\n\t\t});\n\t}\n}\n\nexport class ApiResponse {\n\tprivate readonly response: Response;\n\n\tconstructor(response: Response) {\n\t\tthis.response = response;\n\t}\n\n\tsuccessResponse<T>(message: string, data?: T, pagination?: Pagination) {\n\t\treturn this.sendResponse<T>({\n\t\t\tstatus: status.HTTP_200_OK,\n\t\t\tmessage,\n\t\t\tdata,\n\t\t\tpagination\n\t\t});\n\t}\n\n\tunauthorizedResponse(message: string) {\n\t\treturn this.sendResponse({\n\t\t\tstatus: status.HTTP_401_UNAUTHORIZED,\n\t\t\tmessage\n\t\t});\n\t}\n\n\tforbiddenResponse(message: string) {\n\t\treturn this.sendResponse({\n\t\t\tstatus: status.HTTP_403_FORBIDDEN,\n\t\t\tmessage\n\t\t});\n\t}\n\n\tbadResponse(message: string) {\n\t\treturn this.sendResponse({\n\t\t\tstatus: status.HTTP_400_BAD_REQUEST,\n\t\t\tmessage\n\t\t});\n\t}\n\n\tinternalServerError(message: string = \"Internal Server Error\") {\n\t\treturn this.sendResponse({\n\t\t\tstatus: status.HTTP_500_INTERNAL_SERVER_ERROR,\n\t\t\tmessage\n\t\t});\n\t}\n\n\tsendResponse<T>({ status, message, data, pagination }: ServiceSendApiResponse<T>): Response {\n\t\tif (NO_CONTENT_STATUSES.has(status)) {\n\t\t\treturn this.response.status(status).json({});\n\t\t}\n\n\t\tconst responseBody: Partial<ServiceSendApiResponse<T>> = { status, message };\n\n\t\tif (data !== undefined) {\n\t\t\tresponseBody.data = data;\n\t\t}\n\n\t\tif (pagination) {\n\t\t\tresponseBody.pagination = pagination;\n\t\t}\n\n\t\treturn this.response.status(status).json(responseBody);\n\t}\n}\n","import { z } from \"zod\";\n\nimport { zodMessages } from \"@/core/messages\";\nimport {\n\tvalidateEmail,\n\tvalidateNewPassword,\n\tvalidatePassword,\n\tvalidatePositiveNumber,\n\tvalidateString,\n\tvalidateUsername,\n\tvalidateUsernameOrEmail\n} from \"@/validators/commonRules\";\n\nexport const UsernameLoginSchema = z.object({\n\tusername: validateUsernameOrEmail,\n\tpassword: validatePassword,\n\totp: z\n\t\t.boolean({\n\t\t\tinvalid_type_error: zodMessages.error.invalid.invalidBoolean(\"OTP\")\n\t\t})\n\t\t.optional()\n});\n\nexport const UsernameLoginWithOTPSchema = z.object({\n\tusername: validateUsernameOrEmail,\n\tpassword: validatePassword,\n\totp: validatePositiveNumber(\"OTP\")\n});\n\nexport const UserRegisterSchema = z.object({\n\tname: validateString(\"Name\"),\n\tusername: validateUsername,\n\temail: validateEmail,\n\tpassword: validatePassword\n});\n\nexport const UserVerificationSchema = z.object({\n\tusername: validateUsernameOrEmail,\n\totp: validatePositiveNumber(\"OTP\")\n});\n\nexport const UserReverificationSchema = z.object({\n\tusername: validateUsernameOrEmail\n});\n\nexport const UserPasswordResetSchema = z.object({\n\temail: validateEmail,\n\totp: validatePositiveNumber(\"OTP\"),\n\tpassword: validatePassword\n});\n\nexport const UserChangePasswordSchema = z.object({\n\toldPassword: validatePassword,\n\tnewPassword: validateNewPassword\n});\n\nexport type UsernameLoginSchemaType = z.infer<typeof UsernameLoginSchema>;\nexport type UserRegisterSchemaType = z.infer<typeof UserRegisterSchema>;\n","export const authMessages = {\n\tsuccess: {\n\t\tregistration: \"Registration successful. Welcome!\",\n\t\tlogin: \"Login successful. Welcome back!\",\n\t\tlogout: \"Logout successful. See you again!\",\n\t\tpasswordReset: \"Password reset successful. You can now log in with your new password.\",\n\t\temailVerification: \"Email verification successful. Your account is now active.\",\n\t\taccountVerification: \"Account verification successful. Your account is active.\",\n\t\tpasswordChange: \"Password change successful. Your password has been updated.\",\n\t\ttokenRefresh: \"Token refresh successful. You are still logged in.\",\n\t\ttokenValid: \"Token is valid. You are authenticated.\",\n\t\tauthorizationGranted: \"Access granted. You have the necessary permissions.\",\n\t\temailVerificationSent: \"Email verification sent. Please check your inbox.\",\n\t\tsessionUpdated: \"Session updated. You are still logged in.\"\n\t},\n\terror: {\n\t\tregistration: {\n\t\t\temailInUse: \"Registration failed. The email is already in use.\",\n\t\t\tweakPassword: \"Registration failed. The password is too weak.\",\n\t\t\tinvalidEmail: \"Registration failed. The email address is invalid.\",\n\t\t\tmissingFields: \"Registration failed. Please fill in all required fields.\",\n\t\t\tserverError: \"Registration failed. Server error occurred.\"\n\t\t},\n\t\tlogin: {\n\t\t\tinvalidCredentials: \"Login failed. Invalid email or password.\",\n\t\t\taccountLocked: \"Login failed. Your account is locked.\",\n\t\t\taccountNotVerified: \"Login failed. Please verify your email address.\",\n\t\t\tmissingFields: \"Login failed. Please provide both email and password.\",\n\t\t\tserverError: \"Login failed. Server error occurred.\",\n\t\t\ttwoFactorRequired: \"Login failed. Two-factor authentication is required.\",\n\t\t\ttwoFactorFailed: \"Login failed. Two-factor authentication failed.\",\n\t\t\tsessionExpired: \"Login failed. Your session has expired.\"\n\t\t},\n\t\tlogout: {\n\t\t\tnotLoggedIn: \"Logout failed. You are not logged in.\",\n\t\t\tserverError: \"Logout failed. Server error occurred.\"\n\t\t},\n\t\tpasswordReset: {\n\t\t\tinvalidToken: \"Password reset failed. The reset token is invalid or expired.\",\n\t\t\tuserNotFound: \"Password reset failed. No user found with this email address.\",\n\t\t\tweakPassword: \"Password reset failed. The new password is too weak.\",\n\t\t\tserverError: \"Password reset failed. Server error occurred.\"\n\t\t},\n\t\temailVerification: {\n\t\t\tinvalidToken: \"Email verification failed. The verification token is invalid or expired.\",\n\t\t\talreadyVerified: \"Email verification failed. The email is already verified.\",\n\t\t\tserverError: \"Email verification failed. Server error occurred.\"\n\t\t},\n\t\tpasswordChange: {\n\t\t\tincorrectPassword: \"Password change failed. The current password is incorrect.\",\n\t\t\tweakNewPassword: \"Password change failed. The new password is too weak.\",\n\t\t\tserverError: \"Password change failed. Server error occurred.\"\n\t\t},\n\t\ttokenRefresh: {\n\t\t\tinvalidToken: \"Token refresh failed. The refresh token is invalid or expired.\",\n\t\t\tserverError: \"Token refresh failed. Server error occurred.\"\n\t\t},\n\t\tauthorization: {\n\t\t\tinsufficientRole: \"Access denied. You do not have the necessary role.\",\n\t\t\tinsufficientRoles: \"Access denied. You do not have the necessary roles.\",\n\t\t\tinsufficientPermissions: \"Access denied. You do not have the necessary permissions.\",\n\t\t\tsessionExpired: \"Access denied. Your session has expired.\",\n\t\t\tnotAuthenticated: \"Access denied. You are not authenticated.\",\n\t\t\tserverError: \"Access denied. Server error occurred.\"\n\t\t}\n\t}\n};\n\nexport const crudMessages = {\n\tsuccess: {\n\t\tcreate: (item: string) => `${item} created successfully.`,\n\t\tread: (item: string) => `${item} retrieved successfully.`,\n\t\tupdate: (item: string) => `${item} updated successfully.`,\n\t\tdelete: (item: string) => `${item} deleted successfully.`\n\t},\n\terror: {\n\t\tcreate: {\n\t\t\tvalidationError: (item: string) => `Creation of ${item} failed. Validation error occurred.`,\n\t\t\talreadyExists: (item: string) => `Creation of ${item} failed. ${item} already exists.`,\n\t\t\tmissingFields: (item: string) => `Creation of ${item} failed. Missing required fields.`,\n\t\t\tserverError: (item: string) => `Creation of ${item} failed. Server error occurred.`,\n\t\t\tduplicateEntry: (item: string) => `Creation of ${item} failed. Duplicate entry detected.`,\n\t\t\tinvalidData: (item: string) => `Creation of ${item} failed. Invalid data provided.`,\n\t\t\tquotaExceeded: (item: string) => `Creation of ${item} failed. Quota exceeded.`\n\t\t},\n\t\tread: {\n\t\t\tnotFound: (item: string) => `Retrieval of ${item} failed. ${item} not found.`,\n\t\t\tunauthorized: (item: string) =>\n\t\t\t\t`Retrieval of ${item} failed. You do not have the necessary permissions.`,\n\t\t\tserverError: (item: string) => `Retrieval of ${item} failed. Server error occurred.`,\n\t\t\tnoData: (item: string) => `Retrieval of ${item} failed. No data available.`,\n\t\t\tforbidden: (item: string) => `Retrieval of ${item} failed. Forbidden access.`,\n\t\t\ttimeout: (item: string) => `Retrieval of ${item} failed. Operation timed out.`\n\t\t},\n\t\tupdate: {\n\t\t\tnotFound: (item: string) => `Update of ${item} failed. ${item} not found.`,\n\t\t\tvalidationError: (item: string) => `Update of ${item} failed. Validation error occurred.`,\n\t\t\tmissingFields: (item: string) => `Update of ${item} failed. Missing required fields.`,\n\t\t\tserverError: (item: string) => `Update of ${item} failed. Server error occurred.`,\n\t\t\tconflict: (item: string) => `Update of ${item} failed. Conflict with existing data.`,\n\t\t\tunauthorized: (item: string) => `Update of ${item} failed. Unauthorized access.`,\n\t\t\tnoChanges: (item: string) => `Update of ${item} failed. No changes detected.`,\n\t\t\tlocked: (item: string) => `Update of ${item} failed. The item is locked.`\n\t\t},\n\t\tdelete: {\n\t\t\tnotFound: (item: string) => `Deletion of ${item} failed. ${item} not found.`,\n\t\t\tunauthorized: (item: string) =>\n\t\t\t\t`Deletion of ${item} failed. You do not have the necessary permissions.`,\n\t\t\tserverError: (item: string) => `Deletion of ${item} failed. Server error occurred.`,\n\t\t\tconflict: (item: string) => `Deletion of ${item} failed. Conflict with related data.`,\n\t\t\tprotected: (item: string) => `Deletion of ${item} failed. ${item} is protected.`,\n\t\t\tdependencyError: (item: string) => `Deletion of ${item} failed. Dependency error occurred.`,\n\t\t\ttimeout: (item: string) => `Deletion of ${item} failed. Operation timed out.`\n\t\t}\n\t}\n};\n\nexport const zodMessages = {\n\terror: {\n\t\trequired: {\n\t\t\tfieldIsRequired: (field: string) => `${field} is required.`\n\t\t},\n\t\tlimit: {\n\t\t\tstringMin: (field: string, limit: number) => `${field} must be at least ${limit} characters.`,\n\t\t\tstringMax: (field: string, limit: number) => `${field} must not exceed ${limit} characters.`,\n\t\t\tarrayMin: (field: string, limit: number) => `${field} must have at least ${limit} items.`,\n\t\t\tarrayMax: (field: string, limit: number) => `${field} must not exceed ${limit} items.`,\n\t\t\tnumberMin: (field: string, limit: number) => `${field} must be at least ${limit}.`,\n\t\t\tnumberMax: (field: string, limit: number) => `${field} must not exceed ${limit}.`\n\t\t},\n\t\tinvalid: {\n\t\t\tinvalidString: (field: string) => `${field} must be a string.`,\n\t\t\tinvalidEmail: (field: string) => `${field} must be a valid email address.`,\n\t\t\tinvalidNumber: (field: string) => `${field} must be a number.`,\n\t\t\tinvalidBoolean: (field: string) => `${field} must be a boolean.`,\n\t\t\tinvalidDate: (field: string) => `${field} must be a date.`,\n\t\t\tinvalidArray: (field: string) => `${field} must be an array.`,\n\t\t\tinvalidObject: (field: string) => `${field} must be an object.`,\n\t\t\tinvalidEnum: (field: string, values: string[]) =>\n\t\t\t\t`${field} must be one of the following values: ${values.join(\", \")}.`,\n\t\t\tinvalidUnion: (field: string) => `${field} must be one of the specified types.`,\n\t\t\tinvalidIntersection: (field: string) =>\n\t\t\t\t`${field} must be a combination of the specified types.`,\n\t\t\tinvalidTuple: (field: string) => `${field} must be a tuple.`,\n\t\t\tinvalidRecord: (field: string) => `${field} must be a record.`,\n\t\t\tinvalidLiteral: (field: string, value: string) =>\n\t\t\t\t`${field} must be the literal value: ${value}.`,\n\t\t\tinvalidNull: (field: string) => `${field} must be null.`,\n\t\t\tinvalidUndefined: (field: string) => `${field} must be undefined.`,\n\t\t\tinvalidOptional: (field: string) => `${field} must be optional.`,\n\t\t\tinvalidNullable: (field: string) => `${field} must be nullable.`,\n\t\t\tinvalidPromise: (field: string) => `${field} must be a promise.`,\n\t\t\tinvalidFunction: (field: string) => `${field} must be a function.`,\n\t\t\tinvalidClass: (field: string) => `${field} must be a class.`,\n\t\t\tinvalidUnknown: (field: string) => `${field} must be unknown.`,\n\t\t\tinvalidNever: (field: string) => `${field} must be never.`,\n\t\t\tinvalidVoid: (field: string) => `${field} must be void.`,\n\t\t\tinvalidAny: (field: string) => `${field} must be any.`,\n\t\t\tinvalidUnknownKeys: (field: string) => `${field} must have unknown keys.`,\n\t\t\tinvalidFile: (field: string) => `${field} must be a file.`,\n\t\t\tinvalidFileSize: (field: string, limit: number) => `${field} must not exceed ${limit} bytes.`,\n\t\t\tinvalidFileType: (field: string, type: string) => `${field} must be of type ${type}.`,\n\t\t\tinvalidUpperCase: (field: string) => `${field} must be at least one upper case.`,\n\t\t\tinvalidLowerCase: (field: string) => `${field} must be at least one lower case.`,\n\t\t\tinvalidNumericCase: (field: string) => `${field} must be at least one number.`,\n\t\t\tinvalidUsername: (field: string) =>\n\t\t\t\t`${field} must contain only letters, numbers, and underscores.`,\n\t\t\tinvalidUsernameOrEmail: (field: string) =>\n\t\t\t\t`${field} must be a valid username or email address.`\n\t\t}\n\t}\n};\n","import { z } from \"zod\";\n\nimport { zodMessages } from \"@/core/messages\";\n\nconst convertBytesToMB = (bytes: number): number => {\n\treturn bytes / 1024 / 1024;\n};\n\nexport const MAX_FILE_SIZE = 2000000;\nexport const ACCEPTED_IMAGE_TYPES = [\"image/jpeg\", \"image/jpg\", \"image/png\", \"image/webp\"];\n\nexport const validateString = (name: string) => {\n\treturn z\n\t\t.string({\n\t\t\trequired_error: zodMessages.error.required.fieldIsRequired(name),\n\t\t\tinvalid_type_error: zodMessages.error.invalid.invalidString(name)\n\t\t})\n\t\t.min(1, zodMessages.error.required.fieldIsRequired(name));\n};\n\nexport const validateNumber = (name: string) => {\n\treturn z.coerce\n\t\t.number({\n\t\t\trequired_error: zodMessages.error.required.fieldIsRequired(name),\n\t\t\tinvalid_type_error: zodMessages.error.invalid.invalidNumber(name)\n\t\t})\n\t\t.min(1, zodMessages.error.required.fieldIsRequired(name));\n};\n\nexport const validateClientNumber = (name: string, min: number = 1) => {\n\treturn z\n\t\t.string({\n\t\t\trequired_error: zodMessages.error.required.fieldIsRequired(name),\n\t\t\tinvalid_type_error: zodMessages.error.invalid.invalidNumber(name)\n\t\t})\n\t\t.min(1, zodMessages.error.required.fieldIsRequired(name))\n\t\t.refine(value => {\n\t\t\treturn !isNaN(Number(value));\n\t\t}, zodMessages.error.invalid.invalidNumber(name))\n\t\t.or(\n\t\t\tz.coerce\n\t\t\t\t.number({\n\t\t\t\t\trequired_error: zodMessages.error.required.fieldIsRequired(name),\n\t\t\t\t\tinvalid_type_error: zodMessages.error.invalid.invalidNumber(name)\n\t\t\t\t})\n\t\t\t\t.min(min, zodMessages.error.required.fieldIsRequired(name))\n\t\t);\n};\n\nexport const validatePositiveNumber = (name: string) => {\n\treturn z\n\t\t.number({\n\t\t\trequired_error: zodMessages.error.required.fieldIsRequired(name),\n\t\t\tinvalid_type_error: zodMessages.error.invalid.invalidNumber(name)\n\t\t})\n\t\t.min(1, zodMessages.error.required.fieldIsRequired(name))\n\t\t.int()\n\t\t.positive();\n};\n\nexport const validateSelectObject = (name: string) => {\n\treturn z\n\t\t.object(\n\t\t\t{\n\t\t\t\tvalue: validateString(name),\n\t\t\t\tlabel: validateString(name)\n\t\t\t},\n\t\t\t{\n\t\t\t\trequired_error: zodMessages.error.required.fieldIsRequired(name),\n\t\t\t\tinvalid_type_error: zodMessages.error.invalid.invalidObject(name)\n\t\t\t}\n\t\t)\n\t\t.or(z.null());\n};\n\nexport const validateEnum = (name: string, values: string[]) => {\n\treturn z.enum(values as [string, ...string[]], {\n\t\trequired_error: zodMessages.error.required.fieldIsRequired(name),\n\t\tinvalid_type_error: zodMessages.error.invalid.invalidEnum(name, values)\n\t});\n};\n\nexport const validateUsername = z\n\t.string({\n\t\trequired_error: zodMessages.error.required.fieldIsRequired(\"Username\")\n\t})\n\t.min(1, zodMessages.error.required.fieldIsRequired(\"Username\"))\n\t.max(20, zodMessages.error.limit.stringMax(\"Username\", 20))\n\t.regex(new RegExp(\"^[a-zA-Z0-9_]*$\"), zodMessages.error.invalid.invalidUsername(\"Username\"));\n\nexport const validateEmail = z\n\t.string({\n\t\trequired_error: zodMessages.error.required.fieldIsRequired(\"Email\")\n\t})\n\t.min(1, zodMessages.error.required.fieldIsRequired(\"Email\"))\n\t.email(zodMessages.error.invalid.invalidEmail(\"Email\"));\n\nexport const validateUsernameOrEmail = z\n\t.string({\n\t\trequired_error: zodMessages.error.required.fieldIsRequired(\"Username or email\"),\n\t\tinvalid_type_error: zodMessages.error.invalid.invalidString(\"Username or email\")\n\t})\n\t.min(1, zodMessages.error.required.fieldIsRequired(\"Username or email\"))\n\t.max(255, zodMessages.error.limit.numberMax(\"Username or email\", 255))\n\t.refine(value => {\n\t\tconst emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n\t\tconst usernameRegex = /^[a-zA-Z0-9_]*$/;\n\n\t\t// Check if it's a valid email\n\t\tif (value.includes(\"@\")) {\n\t\t\treturn emailRegex.test(value);\n\t\t}\n\n\t\t// Check if it's a valid username\n\t\treturn usernameRegex.test(value) && value.length >= 1 && value.length <= 20;\n\t}, zodMessages.error.invalid.invalidUsernameOrEmail(\"Username or email\"));\n\nexport const validatePassword = z\n\t.string({\n\t\trequired_error: zodMessages.error.required.fieldIsRequired(\"Password\")\n\t})\n\t.min(1, zodMessages.error.required.fieldIsRequired(\"Password\"))\n\t.min(6, zodMessages.error.limit.stringMin(\"Password\", 6))\n\t.regex(new RegExp(\".*[A-Z].*\"), zodMessages.error.invalid.invalidUpperCase(\"Password\"))\n\t.regex(new RegExp(\".*[a-z].*\"), zodMessages.error.invalid.invalidLowerCase(\"Password\"))\n\t.regex(new RegExp(\".*\\\\d.*\"), zodMessages.error.invalid.invalidNumericCase(\"Password\"));\n\nexport const validateNewPassword = z\n\t.string({\n\t\trequired_error: zodMessages.error.required.fieldIsRequired(\"New Password\")\n\t})\n\t.min(1, zodMessages.error.required.fieldIsRequired(\"New Password\"))\n\t.min(6, zodMessages.error.limit.stringMin(\"New Password\", 6))\n\t.regex(new RegExp(\".*[A-Z].*\"), zodMessages.error.invalid.invalidUpperCase(\"New Password\"))\n\t.regex(new RegExp(\".*[a-z].*\"), zodMessages.error.invalid.invalidLowerCase(\"New Password\"))\n\t.regex(new RegExp(\".*\\\\d.*\"), zodMessages.error.invalid.invalidNumericCase(\"New Password\"));\n\nexport const validateConfirmPassword = z\n\t.string({\n\t\trequired_error: zodMessages.error.required.fieldIsRequired(\"Confirm Password\")\n\t})\n\t.min(1, zodMessages.error.required.fieldIsRequired(\"Confirm Password\"))\n\t.min(6, zodMessages.error.limit.stringMin(\"Confirm Password\", 6))\n\t.regex(new RegExp(\".*[A-Z].*\"), zodMessages.error.invalid.invalidUpperCase(\"Confirm Password\"))\n\n\t.regex(new RegExp(\".*[a-z].*\"), zodMessages.error.invalid.invalidLowerCase(\"Confirm Password\"))\n\n\t.regex(new RegExp(\".*\\\\d.*\"), zodMessages.error.invalid.invalidNumericCase(\"Confirm Password\"));\n\nexport const validateFile = (\n\tname: string,\n\tmaxFileSize: number = MAX_FILE_SIZE,\n\tacceptedImageTypes: string[] = ACCEPTED_IMAGE_TYPES\n) => {\n\treturn z\n\t\t.any()\n\t\t.refine(files => {\n\t\t\tif (typeof files === \"object\") {\n\t\t\t\treturn files?.length === 1;\n\t\t\t}\n\t\t\treturn true;\n\t\t}, zodMessages.error.required.fieldIsRequired(name))\n\t\t.refine(\n\t\t\tfiles => {\n\t\t\t\tif (typeof files === \"object\") {\n\t\t\t\t\treturn files?.[0]?.size <= maxFileSize;\n\t\t\t\t}\n\t\t\t\treturn true;\n\t\t\t},\n\t\t\t`Max file size is ${convertBytesToMB(maxFileSize)}MB`\n\t\t)\n\t\t.refine(files => {\n\t\t\tif (typeof files === \"object\") {\n\t\t\t\treturn acceptedImageTypes.includes(files?.[0]?.type);\n\t\t\t}\n\t\t\treturn true;\n\t\t}, \".jpg, .jpeg, .png and .webp files are accepted\");\n};\n\nexport const validateFiles = (\n\tname: string,\n\tlimit: number,\n\tmaxFileSize: number = MAX_FILE_SIZE,\n\tacceptedImageTypes: string[] = ACCEPTED_IMAGE_TYPES\n) => {\n\treturn z\n\t\t.any()\n\t\t.refine(files => files?.length >= 1, zodMessages.error.required.fieldIsRequired(name))\n\t\t.refine(files => files?.length <= 5, zodMessages.error.limit.arrayMax(name, limit))\n\t\t.refine(\n\t\t\tfiles => {\n\t\t\t\treturn Object.keys(files).every(key => {\n\t\t\t\t\treturn files[key].size <= maxFileSize;\n\t\t\t\t});\n\t\t\t},\n\t\t\t`Max file size is ${convertBytesToMB(maxFileSize)}MB`\n\t\t)\n\t\t.refine(files => {\n\t\t\treturn Object.keys(files).every(key => {\n\t\t\t\treturn acceptedImageTypes.includes(files[key].type);\n\t\t\t});\n\t\t}, \".jpg, .jpeg, .png and .webp files are accepted\");\n};\n","import { Request, Response } from \"express\";\n\nimport { ApiResponse } from \"@/utils/serviceApi\";\n\ntype QueryParamsProxy = {\n\t[key: string]: string | null;\n};\n\nexport abstract class ApiController {\n\tprotected request: Request;\n\tprotected response: Response;\n\tprotected searchParams: QueryParamsProxy;\n\tprotected apiResponse: ApiResponse;\n\n\tprotected constructor(req: Request, res: Response) {\n\t\tthis.request = req;\n\t\tthis.response = res;\n\t\tthis.apiResponse = new ApiResponse(res);\n\n\t\tthis.searchParams = this.getQueryParam(req);\n\t}\n\n\tgetReqBody() {\n\t\treturn this.request.body;\n\t}\n\n\tgetQueryParam(request: Request): QueryParamsProxy {\n\t\tconst queryParams = request.query;\n\t\tconst handler = {\n\t\t\tget: (target: Record<string, any>, prop: string) => {\n\t\t\t\treturn target[prop] || null;\n\t\t\t}\n\t\t};\n\t\treturn new Proxy(queryParams, handler) as QueryParamsProxy;\n\t}\n}\n\nexport interface ApiCrudController {\n\tindex(): unknown;\n\tcreate(): unknown;\n\tshow(id: number | string): unknown;\n\tupdate(id: number | string): unknown;\n\tdelete(id: number | string): unknown;\n}\n","import { hkdf } from \"@panva/hkdf\";\nimport { EncryptJWT, JWTPayload, base64url, calculateJwkThumbprint, jwtDecrypt } from \"jose\";\n\nimport { sessionTimeout } from \"@/core/constants\";\n\ntype Awaitable<T> = T | PromiseLike<T>;\nconst DEFAULT_MAX_AGE = sessionTimeout;\n\nconst now = () => (Date.now() / 1000) | 0;\n\nconst alg = \"dir\";\nconst enc = \"A256CBC-HS512\";\ntype Digest = Parameters<typeof calculateJwkThumbprint>[1];\n\n/** Issues a JWT. By default, the JWT is encrypted using \"A256CBC-HS512\". */\nexport async function encode<Payload = JWT>(params: JWTEncodeParams<Payload>) {\n\tconst {\n\t\ttoken,\n\t\tsecret = process.env.SECRET,\n\t\tmaxAge = DEFAULT_MAX_AGE,\n\t\tsalt = process.env.SESSION_COOKIE_NAME\n\t} = params;\n\n\tconst secrets = Array.isArray(secret) ? secret : [secret];\n\tconst encryptionSecret = await getDerivedEncryptionKey(enc, secrets[0], salt);\n\n\tconst thumbprint = await calculateJwkThumbprint(\n\t\t{ kty: \"oct\", k: base64url.encode(encryptionSecret) },\n\t\t`sha${encryptionSecret.byteLength << 3}` as Digest\n\t);\n\n\tconst generatedToken = await new EncryptJWT(token as JWTPayload)\n\t\t.setProtectedHeader({ alg, enc, kid: thumbprint })\n\t\t.setIssuedAt()\n\t\t.setExpirationTime(now() + maxAge)\n\t\t.setJti(crypto.randomUUID())\n\t\t.encrypt(encryptionSecret);\n\n\treturn generatedToken;\n}\n\n/** Decodes an Express.js issued JWT. */\nexport async function decode<Payload = JWT>(params: JWTDecodeParams): Promise<Payload | null> {\n\tconst { token, secret = process.env.SECRET, salt = process.env.SESSION_COOKIE_NAME } = params;\n\tconst secrets = Array.isArray(secret) ? secret : [secret];\n\tif (!token) return null;\n\tconst { payload } = await jwtDecrypt(\n\t\ttoken,\n\t\tasync ({ kid, enc }) => {\n\t\t\tfor (const secret of secrets) {\n\t\t\t\tconst encryptionSecret = await getDerivedEncryptionKey(enc, secret, salt);\n\t\t\t\tif (kid === undefined) return encryptionSecret;\n\n\t\t\t\tconst thumbprint = await calculateJwkThumbprint(\n\t\t\t\t\t{ kty: \"oct\", k: base64url.encode(encryptionSecret) },\n\t\t\t\t\t`sha${encryptionSecret.byteLength << 3}` as Digest\n\t\t\t\t);\n\t\t\t\tif (kid === thumbprint) return encryptionSecret;\n\t\t\t}\n\n\t\t\tthrow new Error(\"no matching decryption secret\");\n\t\t},\n\t\t{\n\t\t\tclockTolerance: 15,\n\t\t\tkeyManagementAlgorithms: [alg],\n\t\t\tcontentEncryptionAlgorithms: [enc, \"A256GCM\"]\n\t\t}\n\t);\n\treturn payload as Payload;\n}\n\nasync function getDerivedEncryptionKey(\n\tenc: string,\n\tkeyMaterial: Parameters<typeof hkdf>[1],\n\tsalt: Parameters<typeof hkdf>[2]\n) {\n\tlet length: number;\n\tswitch (enc) {\n\t\tcase \"A256CBC-HS512\":\n\t\t\tlength = 64;\n\t\t\tbreak;\n\t\tcase \"A256GCM\":\n\t\t\tlength = 32;\n\t\t\tbreak;\n\t\tdefault:\n\t\t\tthrow new Error(\"Unsupported JWT Content Encryption Algorithm\");\n\t}\n\treturn await hkdf(\n\t\t\"sha256\",\n\t\tkeyMaterial,\n\t\tsalt,\n\t\t`Express.js Generated Encryption Key (${salt})`,\n\t\tlength\n\t);\n}\n\nexport interface DefaultJWT extends Record<string, unknown> {\n\tname?: string | null;\n\temail?: string | null;\n\tpicture?: string | null;\n\tsub?: string;\n\tiat?: number;\n\texp?: number;\n\tjti?: string;\n}\n\n/**\n * Returned by the `jwt` callback when using JWT sessions\n *\n * [`jwt` callback](https://authjs.dev/reference/core/types#jwt)\n */\nexport interface JWT extends Record<string, unknown>, DefaultJWT {}\n\nexport interface JWTEncodeParams<Payload = JWT> {\n\t/**\n\t * The maximum age of the Express.js issued JWT in seconds.\n\t *\n\t * @default 30 * 24 * 60 * 60 // 30 days\n\t */\n\tmaxAge?: number;\n\t/** Used in combination with `secret`, to derive the encryption secret for JWTs. */\n\tsalt?: string;\n\t/** Used in combination with `salt`, to derive the encryption secret for JWTs. */\n\tsecret?: string | string[];\n\t/** The JWT payload. */\n\ttoken: Payload;\n}\n\nexport interface JWTDecodeParams {\n\t/** Used in combination with `secret`, to derive the encryption secret for JWTs. */\n\tsalt?: string;\n\t/**\n\t * Used in combination with `salt`, to derive the encryption secret for JWTs.\n\t *\n\t * @note\n\t * You can also pass an array of secrets, in which case the first secret that successfully\n\t * decrypts the JWT will be used. This is useful for rotating secrets without invalidating existing sessions.\n\t * The newer secret should be added to the start of the array, which will be used for all new sessions.\n\t */\n\tsecret?: string | string[];\n\t/** The Express.js issued JWT to be decoded */\n\ttoken?: string;\n}\n\nexport interface JWTOptions {\n\t/**\n\t * The secret used to encode/decode the Express.js issued JWT.\n\t * It can be an array of secrets, in which case the first secret that successfully\n\t * decrypts the JWT will be used. This is useful for rotating secrets without invalidating existing sessions.\n\t * @internal\n\t */\n\tsecret: string | string[];\n\t/**\n\t * The maximum age of the Express.js issued JWT in seconds.\n\t *\n\t * @default 30 * 24 * 60 * 60 // 30 days\n\t */\n\tmaxAge: number;\n\t/** Override this method to control the Express.js issued JWT encoding. */\n\tencode: (params: JWTEncodeParams) => Awaitable<string>;\n\t/** Override this method to control the Express.js issued JWT decoding. */\n\tdecode: (params: JWTDecodeParams) => Awaitable<JWT | null>;\n}\n","import { Request, Response } from \"express\";\n\nimport { encode } from \"@/app/authentication/authentication.JWT\";\n\nimport { sessionTimeout } from \"@/core/constants\";\nimport { UserSchemaType } from \"@/databases/drizzle/types\";\nimport AppHelpers from \"@/utils/appHelpers\";\n\nexport default class CookieService {\n\tprotected request: Request;\n\tprotected response: Response;\n\tprotected jwtCookieName: string;\n\tprotected sessionCookieName: string;\n\n\tconstructor(request: Request, response: Response) {\n\t\tthis.request = request;\n\t\tthis.response = response;\n\t\tthis.jwtCookieName = process.env.JWT_COOKIE_NAME;\n\t\tthis.sessionCookieName = process.env.SESSION_COOKIE_NAME;\n\t}\n\n\tasync saveCookieToBrowser(user: Omit<UserSchemaType, \"password\">) {\n\t\ttry {\n\t\t\tconst accessToken = await encode({\n\t\t\t\ttoken: user\n\t\t\t});\n\n\t\t\tthis.response.cookie(this.jwtCookieName, accessToken, {\n\t\t\t\thttpOnly: true,\n\t\t\t\tmaxAge: sessionTimeout,\n\t\t\t\tsameSite: AppHelpers.sameSiteCookieConfig().sameSite,\n\t\t\t\tsecure: AppHelpers.sameSiteCookieConfig().secure,\n\t\t\t\t...(AppHelpers.sameSiteCookieConfig().domain && {\n\t\t\t\t\tdomain: AppHelpers.sameSiteCookieConfig().domain\n\t\t\t\t})\n\t\t\t});\n\n\t\t\treturn Promise.resolve(accessToken);\n\t\t} catch (error) {\n\t\t\treturn Promise.resolve(null);\n\t\t}\n\t}\n\n\tasync clearCookieFromBrowser() {\n\t\tthis.response.clearCookie(this.jwtCookieName);\n\t\tthis.response.clearCookie(this.sessionCookieName);\n\t}\n}\n","import ejs from \"ejs\";\nimport nodemailer from \"nodemailer\";\nimport path from \"path\";\n\nconst __dirname = process.cwd();\nconst templatesPath = path.join(__dirname, \"public/templates\");\n\ninterface EmailService {\n\temail: string;\n\temailSubject: string;\n\ttemplate: string;\n\tdata?: any;\n\tuser?: string;\n\tpassword?: string;\n\temailFrom?: string;\n}\n\nconst sendEmail = async ({\n\temail,\n\temailSubject,\n\ttemplate,\n\tdata,\n\tuser = process.env.EMAIL_SERVER_USER,\n\tpassword = process.env.EMAIL_SERVER_PASSWORD,\n\temailFrom = process.env.EMAIL_FROM\n}: EmailService) => {\n\t// Configure your email transporter (replace placeholders with actual values)\n\tconst transporter = nodemailer.createTransport({\n\t\thost: process.env.EMAIL_SERVER_HOST,\n\t\tport: Number(process.env.EMAIL_SERVER_PORT),\n\t\tauth: {\n\t\t\tuser,\n\t\t\tpass: password\n\t\t},\n\t\tsecure: false\n\t});\n\n\tconst html = await ejs.renderFile(path.join(templatesPath, `${template}.ejs`), data, {\n\t\tasync: true\n\t});\n\n\t// Email content\n\tconst mailOptions = {\n\t\tfrom: emailFrom,\n\t\tto: email,\n\t\treply_to: emailFrom,\n\t\tsubject: emailSubject,\n\t\thtml\n\t};\n\n\t// Send the email\n\ttry {\n\t\tconst report = await transporter.sendMail(mailOptions);\n\t\tconsole.log(\"Email sent: %s\", report.messageId);\n\t\treturn Promise.resolve(report);\n\t} catch (error) {\n\t\treturn Promise.reject(error);\n\t}\n};\n\nexport default sendEmail;\n","import { NextFunction, Request, Response } from \"express\";\n\nimport { decode } from \"@/app/authentication/authentication.JWT\";\n\nimport CookieService from \"@/service/cookieService\";\nimport { ApiResponse } from \"@/utils/serviceApi\";\n\nconst jwtTokenName = process.env.JWT_COOKIE_NAME;\nconst sessionCookieName = process.env.SESSION_COOKIE_NAME;\n\nexport const authenticationMiddleware = async (\n\treq: Request,\n\tres: Response,\n\tnext: NextFunction\n): Promise<void> => {\n\tconst apiResponse = new ApiResponse(res);\n\ttry {\n\t\tconst token = req.cookies[jwtTokenName];\n\n\t\tif (!token) {\n\t\t\tres.clearCookie(jwtTokenName);\n\t\t\tres.clearCookie(sessionCookieName);\n\t\t\tapiResponse.unauthorizedResponse(\"Unauthorized: No token provided\");\n\t\t\treturn;\n\t\t}\n\n\t\tconst decodeToken = await decode({ token });\n\n\t\tif (!decodeToken) {\n\t\t\tres.clearCookie(jwtTokenName);\n\t\t\tres.clearCookie(sessionCookieName);\n\t\t\tapiResponse.unauthorizedResponse(\"Unauthorized: Invalid token\");\n\t\t\treturn;\n\t\t}\n\n\t\tif (!req.isAuthenticated()) {\n\t\t\tres.clearCookie(jwtTokenName);\n\t\t\tres.clearCookie(sessionCookieName);\n\t\t\tapiResponse.unauthorizedResponse(\"Unauthorized: Not authenticated\");\n\t\t\treturn;\n\t\t}\n\n\t\tconst { iat, jti, exp, password, ...rest } = decodeToken;\n\t\tconst cookieService = new CookieService(req, res);\n\t\tawait cookieService.saveCookieToBrowser(rest as any);\n\n\t\tnext();\n\t} catch (error) {\n\t\tres.clearCookie(jwtTokenName);\n\t\tres.clearCookie(sessionCookieName);\n\t\tconsole.error(\"Authentication middleware error:\", error);\n\t\tapiResponse.unauthorizedResponse(\"Unauthorized\");\n\t\treturn;\n\t}\n};\n"],"mappings":"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","names":["import_bcrypt","import_drizzle_orm","import_pg_core","import_pg_core","dotenv","postgres","import_drizzle_orm","crypto","timestamp","now","status","bcrypt","import_zod","enc","secret","path","nodemailer","ejs","bcrypt","password","userData","express","passport"]}