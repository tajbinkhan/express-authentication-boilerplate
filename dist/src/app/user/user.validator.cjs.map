{"version":3,"sources":["../../../../src/app/user/user.validator.ts","../../../../src/validators/baseQuery.schema.ts"],"sourcesContent":["import { PgTableWithColumns } from \"drizzle-orm/pg-core\";\nimport { z } from \"zod\";\n\nimport { SortingHelper } from \"@/utils/sortingHelper\";\nimport { BaseQuerySchema } from \"@/validators/baseQuery.schema\";\n\nexport const UserQuerySchema = <T extends PgTableWithColumns<any>>(\n\tsortingHelper: SortingHelper<T>\n) => {\n\tconst baseSchema = BaseQuerySchema(sortingHelper);\n\n\treturn z.preprocess(\n\t\t(data: any) => ({\n\t\t\t...baseSchema.parse(data),\n\t\t\troleQuery: data.roleQuery ? String(data.roleQuery).split(\",\") : undefined\n\t\t}),\n\t\tz.object({\n\t\t\tpage: z.number().optional(),\n\t\t\tlimit: z.number().optional(),\n\t\t\tsortingMethod: z.string().optional(),\n\t\t\tsortBy: z.string().optional(),\n\t\t\tsearch: z.string().optional(),\n\t\t\troleQuery: z.array(z.string()).optional()\n\t\t})\n\t);\n};\n","import { PgTableWithColumns } from \"drizzle-orm/pg-core\";\nimport { z } from \"zod\";\n\nimport { SortingHelper } from \"@/utils/sortingHelper\";\n\n// We'll create a function that generates the schemas with a SortingHelper instance\nexport const createSortingSchemas = <T extends PgTableWithColumns<any>>(\n\tsortingHelper: SortingHelper<T>\n) => {\n\tconst sortMethodSchema = (pageValue: boolean) =>\n\t\tz\n\t\t\t.string()\n\t\t\t.optional()\n\t\t\t.transform(val => {\n\t\t\t\tif (val && sortingHelper.isValidSortMethod(val)) return String(val);\n\t\t\t\treturn pageValue ? \"id\" : undefined;\n\t\t\t})\n\t\t\t.pipe(z.string().optional());\n\n\tconst sortBySchema = (pageValue: boolean) =>\n\t\tz\n\t\t\t.string()\n\t\t\t.optional()\n\t\t\t.transform(val => {\n\t\t\t\tif (val && sortingHelper.isValidSortDirection(val)) return String(val).toLowerCase();\n\t\t\t\treturn pageValue ? \"desc\" : undefined;\n\t\t\t})\n\t\t\t.pipe(z.string().optional());\n\n\treturn { sortMethodSchema, sortBySchema };\n};\n\nexport const limitSchema = (pageValue: boolean) =>\n\tz\n\t\t.string()\n\t\t.optional()\n\t\t.transform(val => {\n\t\t\treturn val ? (isNaN(Number(val)) ? 10 : Number(val)) : pageValue ? 10 : undefined;\n\t\t})\n\t\t.pipe(z.number().optional());\n\nexport const searchSchema = z\n\t.string()\n\t.optional()\n\t.transform(val => (val ? String(val) : undefined));\n\n// Function to create the complete query schema\nexport const BaseQuerySchema = <T extends PgTableWithColumns<any>>(\n\tsortingHelper: SortingHelper<T>\n) => {\n\tconst { sortMethodSchema, sortBySchema } = createSortingSchemas(sortingHelper);\n\n\treturn z.preprocess(\n\t\t(data: any) => {\n\t\t\tconst page = data.page ? (isNaN(data.page) ? 1 : Number(data.page)) : undefined;\n\t\t\tconst hasPage = !!page;\n\n\t\t\treturn {\n\t\t\t\tpage,\n\t\t\t\tlimit: limitSchema(hasPage).parse(data.limit),\n\t\t\t\tsortingMethod: sortMethodSchema(hasPage).parse(data.sortingMethod),\n\t\t\t\tsortBy: sortBySchema(hasPage).parse(data.sortBy),\n\t\t\t\tsearch: searchSchema.parse(data.search)\n\t\t\t};\n\t\t},\n\t\tz.object({\n\t\t\tpage: z.number().optional(),\n\t\t\tlimit: z.number().optional(),\n\t\t\tsortingMethod: z.string().optional(),\n\t\t\tsortBy: z.string().optional(),\n\t\t\tsearch: z.string().optional()\n\t\t})\n\t);\n};\n"],"mappings":";;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AACA,IAAAA,cAAkB;;;ACAlB,iBAAkB;AAKX,IAAM,uBAAuB,CACnC,kBACI;AACJ,QAAM,mBAAmB,CAAC,cACzB,aACE,OAAO,EACP,SAAS,EACT,UAAU,SAAO;AACjB,QAAI,OAAO,cAAc,kBAAkB,GAAG,EAAG,QAAO,OAAO,GAAG;AAClE,WAAO,YAAY,OAAO;AAAA,EAC3B,CAAC,EACA,KAAK,aAAE,OAAO,EAAE,SAAS,CAAC;AAE7B,QAAM,eAAe,CAAC,cACrB,aACE,OAAO,EACP,SAAS,EACT,UAAU,SAAO;AACjB,QAAI,OAAO,cAAc,qBAAqB,GAAG,EAAG,QAAO,OAAO,GAAG,EAAE,YAAY;AACnF,WAAO,YAAY,SAAS;AAAA,EAC7B,CAAC,EACA,KAAK,aAAE,OAAO,EAAE,SAAS,CAAC;AAE7B,SAAO,EAAE,kBAAkB,aAAa;AACzC;AAEO,IAAM,cAAc,CAAC,cAC3B,aACE,OAAO,EACP,SAAS,EACT,UAAU,SAAO;AACjB,SAAO,MAAO,MAAM,OAAO,GAAG,CAAC,IAAI,KAAK,OAAO,GAAG,IAAK,YAAY,KAAK;AACzE,CAAC,EACA,KAAK,aAAE,OAAO,EAAE,SAAS,CAAC;AAEtB,IAAM,eAAe,aAC1B,OAAO,EACP,SAAS,EACT,UAAU,SAAQ,MAAM,OAAO,GAAG,IAAI,MAAU;AAG3C,IAAM,kBAAkB,CAC9B,kBACI;AACJ,QAAM,EAAE,kBAAkB,aAAa,IAAI,qBAAqB,aAAa;AAE7E,SAAO,aAAE;AAAA,IACR,CAAC,SAAc;AACd,YAAM,OAAO,KAAK,OAAQ,MAAM,KAAK,IAAI,IAAI,IAAI,OAAO,KAAK,IAAI,IAAK;AACtE,YAAM,UAAU,CAAC,CAAC;AAElB,aAAO;AAAA,QACN;AAAA,QACA,OAAO,YAAY,OAAO,EAAE,MAAM,KAAK,KAAK;AAAA,QAC5C,eAAe,iBAAiB,OAAO,EAAE,MAAM,KAAK,aAAa;AAAA,QACjE,QAAQ,aAAa,OAAO,EAAE,MAAM,KAAK,MAAM;AAAA,QAC/C,QAAQ,aAAa,MAAM,KAAK,MAAM;AAAA,MACvC;AAAA,IACD;AAAA,IACA,aAAE,OAAO;AAAA,MACR,MAAM,aAAE,OAAO,EAAE,SAAS;AAAA,MAC1B,OAAO,aAAE,OAAO,EAAE,SAAS;AAAA,MAC3B,eAAe,aAAE,OAAO,EAAE,SAAS;AAAA,MACnC,QAAQ,aAAE,OAAO,EAAE,SAAS;AAAA,MAC5B,QAAQ,aAAE,OAAO,EAAE,SAAS;AAAA,IAC7B,CAAC;AAAA,EACF;AACD;;;ADnEO,IAAM,kBAAkB,CAC9B,kBACI;AACJ,QAAM,aAAa,gBAAgB,aAAa;AAEhD,SAAO,cAAE;AAAA,IACR,CAAC,UAAe;AAAA,MACf,GAAG,WAAW,MAAM,IAAI;AAAA,MACxB,WAAW,KAAK,YAAY,OAAO,KAAK,SAAS,EAAE,MAAM,GAAG,IAAI;AAAA,IACjE;AAAA,IACA,cAAE,OAAO;AAAA,MACR,MAAM,cAAE,OAAO,EAAE,SAAS;AAAA,MAC1B,OAAO,cAAE,OAAO,EAAE,SAAS;AAAA,MAC3B,eAAe,cAAE,OAAO,EAAE,SAAS;AAAA,MACnC,QAAQ,cAAE,OAAO,EAAE,SAAS;AAAA,MAC5B,QAAQ,cAAE,OAAO,EAAE,SAAS;AAAA,MAC5B,WAAW,cAAE,MAAM,cAAE,OAAO,CAAC,EAAE,SAAS;AAAA,IACzC,CAAC;AAAA,EACF;AACD;","names":["import_zod"]}