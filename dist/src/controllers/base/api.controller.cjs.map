{"version":3,"sources":["../../../../src/controllers/base/api.controller.ts","../../../../src/utils/statusCodes.ts","../../../../src/utils/serviceApi.ts"],"sourcesContent":["import { Request, Response } from \"express\";\n\nimport { ApiResponse } from \"@/utils/serviceApi\";\n\ntype QueryParamsProxy = {\n\t[key: string]: string | null;\n};\n\nexport abstract class ApiController {\n\tprotected request: Request;\n\tprotected response: Response;\n\tprotected searchParams: QueryParamsProxy;\n\tprotected apiResponse: ApiResponse;\n\n\tprotected constructor(req: Request, res: Response) {\n\t\tthis.request = req;\n\t\tthis.response = res;\n\t\tthis.apiResponse = new ApiResponse(res);\n\n\t\tthis.searchParams = this.getQueryParam(req);\n\t}\n\n\tgetReqBody() {\n\t\treturn this.request.body;\n\t}\n\n\tgetQueryParam(request: Request): QueryParamsProxy {\n\t\tconst queryParams = request.query;\n\t\tconst handler = {\n\t\t\tget: (target: Record<string, any>, prop: string) => {\n\t\t\t\treturn target[prop] || null;\n\t\t\t}\n\t\t};\n\t\treturn new Proxy(queryParams, handler) as QueryParamsProxy;\n\t}\n}\n\nexport interface ApiCrudController {\n\tindex(): unknown;\n\tcreate(): unknown;\n\tshow(id: number | string): unknown;\n\tupdate(id: number | string): unknown;\n\tdelete(id: number | string): unknown;\n}\n","export const status = {\n\tHTTP_100_CONTINUE: 100,\n\tHTTP_101_SWITCHING_PROTOCOLS: 101,\n\tHTTP_102_PROCESSING: 102,\n\tHTTP_103_EARLY_HINTS: 103,\n\tHTTP_200_OK: 200,\n\tHTTP_201_CREATED: 201,\n\tHTTP_202_ACCEPTED: 202,\n\tHTTP_203_NON_AUTHORITATIVE_INFORMATION: 203,\n\tHTTP_204_NO_DATA: 204,\n\tHTTP_205_RESET_DATA: 205,\n\tHTTP_206_PARTIAL_DATA: 206,\n\tHTTP_207_MULTI_STATUS: 207,\n\tHTTP_208_ALREADY_REPORTED: 208,\n\tHTTP_226_IM_USED: 226,\n\tHTTP_300_MULTIPLE_CHOICES: 300,\n\tHTTP_301_MOVED_PERMANENTLY: 301,\n\tHTTP_302_FOUND: 302,\n\tHTTP_303_SEE_OTHER: 303,\n\tHTTP_304_NOT_MODIFIED: 304,\n\tHTTP_305_USE_PROXY: 305,\n\tHTTP_306_SWITCH_PROXY: 306,\n\tHTTP_307_TEMPORARY_REDIRECT: 307,\n\tHTTP_308_PERMANENT_REDIRECT: 308,\n\tHTTP_400_BAD_REQUEST: 400,\n\tHTTP_401_UNAUTHORIZED: 401,\n\tHTTP_402_PAYMENT_REQUIRED: 402,\n\tHTTP_403_FORBIDDEN: 403,\n\tHTTP_404_NOT_FOUND: 404,\n\tHTTP_405_METHOD_NOT_ALLOWED: 405,\n\tHTTP_406_NOT_ACCEPTABLE: 406,\n\tHTTP_407_PROXY_AUTHENTICATION_REQUIRED: 407,\n\tHTTP_408_REQUEST_TIMEOUT: 408,\n\tHTTP_409_CONFLICT: 409,\n\tHTTP_410_GONE: 410,\n\tHTTP_411_LENGTH_REQUIRED: 411,\n\tHTTP_412_PRECONDITION_FAILED: 412,\n\tHTTP_413_PAYLOAD_TOO_LARGE: 413,\n\tHTTP_414_URI_TOO_LONG: 414,\n\tHTTP_415_UNSUPPORTED_MEDIA_TYPE: 415,\n\tHTTP_416_RANGE_NOT_SATISFIABLE: 416,\n\tHTTP_417_EXPECTATION_FAILED: 417,\n\tHTTP_418_IM_A_TEAPOT: 418,\n\tHTTP_421_MISDIRECTED_REQUEST: 421,\n\tHTTP_422_UNPROCESSABLE_ENTITY: 422,\n\tHTTP_423_LOCKED: 423,\n\tHTTP_424_FAILED_DEPENDENCY: 424,\n\tHTTP_425_TOO_EARLY: 425,\n\tHTTP_426_UPGRADE_REQUIRED: 426,\n\tHTTP_428_PRECONDITION_REQUIRED: 428,\n\tHTTP_429_TOO_MANY_REQUESTS: 429,\n\tHTTP_431_REQUEST_HEADER_FIELDS_TOO_LARGE: 431,\n\tHTTP_451_UNAVAILABLE_FOR_LEGAL_REASONS: 451,\n\tHTTP_500_INTERNAL_SERVER_ERROR: 500,\n\tHTTP_501_NOT_IMPLEMENTED: 501,\n\tHTTP_502_BAD_GATEWAY: 502,\n\tHTTP_503_SERVICE_UNAVAILABLE: 503,\n\tHTTP_504_GATEWAY_TIMEOUT: 504,\n\tHTTP_505_HTTP_VERSION_NOT_SUPPORTED: 505,\n\tHTTP_506_VARIANT_ALSO_NEGOTIATES: 506,\n\tHTTP_507_INSUFFICIENT_STORAGE: 507,\n\tHTTP_508_LOOP_DETECTED: 508,\n\tHTTP_510_NOT_EXTENDED: 510,\n\tHTTP_511_NETWORK_AUTHENTICATION_REQUIRED: 511\n};\n","import { Response } from \"express\";\n\nimport { status } from \"@/utils/statusCodes\";\n\n// Create a type from the status object values\ntype HttpStatusCode = (typeof status)[keyof typeof status];\n\n// Stricter Pagination interface with required fields\nexport interface Pagination {\n\ttotalItems: number;\n\tlimit: number;\n\toffset: number;\n\tcurrentPage: number;\n\ttotalPages: number;\n\thasPrevPage: boolean;\n\thasNextPage: boolean;\n\tprevPage: number | null;\n\tnextPage: number | null;\n}\n\n// Base interface for API responses\ninterface BaseApiResponse {\n\tstatus: HttpStatusCode;\n\tmessage: string;\n}\n\n// Generic response interfaces with strict typing\nexport interface ServiceApiResponse<T> extends BaseApiResponse {\n\tdata: T;\n\tpagination?: Pagination;\n}\n\nexport interface ServiceSendApiResponse<T> extends BaseApiResponse {\n\tdata?: T;\n\tpagination?: Pagination;\n}\n\n// Error type definitions\nexport interface ApiError extends BaseApiResponse {\n\terror?: string;\n}\n\nconst isApiError = (error: unknown): error is ApiError => {\n\treturn (\n\t\terror !== null &&\n\t\ttypeof error === \"object\" &&\n\t\t\"status\" in error &&\n\t\ttypeof (error as ApiError).status === \"number\" &&\n\t\t\"message\" in error &&\n\t\ttypeof (error as ApiError).message === \"string\"\n\t);\n};\n\nconst NO_CONTENT_STATUSES = new Set([status.HTTP_204_NO_DATA]);\n\nexport class ServiceResponse {\n\tstatic async createResponse<T>(\n\t\tstatus: HttpStatusCode,\n\t\tmessage: string,\n\t\tdata: T,\n\t\tpagination?: Pagination\n\t): Promise<ServiceApiResponse<T>> {\n\t\tif (NO_CONTENT_STATUSES.has(status)) {\n\t\t\treturn Promise.resolve({ status, message, data: undefined as T });\n\t\t}\n\t\treturn Promise.resolve({ status, message, data, pagination });\n\t}\n\n\tstatic async createRejectResponse<T>(\n\t\tstatus: HttpStatusCode,\n\t\tmessage: string\n\t): Promise<ServiceApiResponse<T>> {\n\t\treturn Promise.reject({ status, message });\n\t}\n\n\tstatic createErrorResponse(error: unknown): Promise<never> {\n\t\tconsole.error(\"Error:\", error instanceof Error ? error.message : error);\n\n\t\tif (isApiError(error)) return Promise.reject(error);\n\n\t\treturn Promise.reject({\n\t\t\tstatus: status.HTTP_500_INTERNAL_SERVER_ERROR,\n\t\t\tmessage: \"Internal Server Error\"\n\t\t});\n\t}\n}\n\nexport class ApiResponse {\n\tprivate readonly response: Response;\n\n\tconstructor(response: Response) {\n\t\tthis.response = response;\n\t}\n\n\tsuccessResponse<T>(message: string, data?: T, pagination?: Pagination) {\n\t\treturn this.sendResponse<T>({\n\t\t\tstatus: status.HTTP_200_OK,\n\t\t\tmessage,\n\t\t\tdata,\n\t\t\tpagination\n\t\t});\n\t}\n\n\tunauthorizedResponse(message: string) {\n\t\treturn this.sendResponse({\n\t\t\tstatus: status.HTTP_401_UNAUTHORIZED,\n\t\t\tmessage\n\t\t});\n\t}\n\n\tforbiddenResponse(message: string) {\n\t\treturn this.sendResponse({\n\t\t\tstatus: status.HTTP_403_FORBIDDEN,\n\t\t\tmessage\n\t\t});\n\t}\n\n\tbadResponse(message: string) {\n\t\treturn this.sendResponse({\n\t\t\tstatus: status.HTTP_400_BAD_REQUEST,\n\t\t\tmessage\n\t\t});\n\t}\n\n\tinternalServerError(message: string = \"Internal Server Error\") {\n\t\treturn this.sendResponse({\n\t\t\tstatus: status.HTTP_500_INTERNAL_SERVER_ERROR,\n\t\t\tmessage\n\t\t});\n\t}\n\n\tsendResponse<T>({ status, message, data, pagination }: ServiceSendApiResponse<T>): Response {\n\t\tif (NO_CONTENT_STATUSES.has(status)) {\n\t\t\treturn this.response.status(status).json({});\n\t\t}\n\n\t\tconst responseBody: Partial<ServiceSendApiResponse<T>> = { status, message };\n\n\t\tif (data !== undefined) {\n\t\t\tresponseBody.data = data;\n\t\t}\n\n\t\tif (pagination) {\n\t\t\tresponseBody.pagination = pagination;\n\t\t}\n\n\t\treturn this.response.status(status).json(responseBody);\n\t}\n}\n"],"mappings":"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","names":["status"]}