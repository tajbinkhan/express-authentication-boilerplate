{"version":3,"sources":["../../../src/multer/processImage.ts","../../../src/multer/converter.ts","../../../src/multer/fileTypes.ts","../../../src/multer/globalConfig.ts"],"sourcesContent":["import { Request } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport sharp from \"sharp\";\n\nimport { convertToWebP } from \"@/multer/converter\";\nimport { ALLOWED_IMAGE_TYPES } from \"@/multer/fileTypes\";\nimport { fileUrl, originalDir, uploadDir } from \"@/multer/globalConfig\";\n\n// Image sizes to generate\nconst sizes = [\n\t{ name: \"thumbnail\", width: 150, height: 150 },\n\t{ name: \"medium\", width: 300, height: 300 },\n\t{ name: \"large\", width: 1024, height: 1024 }\n];\n\nexport const convertedDir = path.join(uploadDir, \"converted\");\n\n// Optimize and save images in size-based folders\nexport const processImage = async (req: Request) => {\n\ttry {\n\t\tconst fileName = req.file?.filename!;\n\t\tconst originalFilePath = path.join(originalDir, fileName);\n\t\tconst baseName = fileName.replace(path.extname(fileName), \"\");\n\n\t\t// Generate URL for the original and converted files\n\t\tconst urls = [\n\t\t\tfileUrl(req, originalDir) // Original file URL\n\t\t];\n\n\t\tif (req.file?.mimetype! in ALLOWED_IMAGE_TYPES) {\n\t\t\turls.push(fileUrl(req, convertedDir, `${baseName}-original.webp`));\n\n\t\t\t// Ensure \"uploads/converted\" directory exists\n\t\t\tif (!fs.existsSync(convertedDir)) {\n\t\t\t\tfs.mkdirSync(convertedDir, { recursive: true });\n\t\t\t}\n\n\t\t\t// Convert to WebP and save in \"uploads/converted\"\n\t\t\tconst webpFilePath = await convertToWebP(originalFilePath, convertedDir, baseName);\n\n\t\t\t// Get the dimensions of the original image\n\t\t\tconst metadata = await sharp(originalFilePath).metadata();\n\n\t\t\tfor (const size of sizes) {\n\t\t\t\tif (\n\t\t\t\t\tmetadata.width &&\n\t\t\t\t\tmetadata.height &&\n\t\t\t\t\t(metadata.width > size.width || metadata.height > size.height)\n\t\t\t\t) {\n\t\t\t\t\tconst sizeDir = path.join(uploadDir, `${size.width}x${size.height}`);\n\t\t\t\t\tif (!fs.existsSync(sizeDir)) {\n\t\t\t\t\t\tfs.mkdirSync(sizeDir, { recursive: true });\n\t\t\t\t\t}\n\n\t\t\t\t\t// Resize WebP file to the required sizes\n\t\t\t\t\tconst outputFileName = `${baseName}-${size.width}x${size.height}.webp`;\n\t\t\t\t\tconst outputFilePath = path.join(sizeDir, outputFileName);\n\t\t\t\t\tawait sharp(webpFilePath)\n\t\t\t\t\t\t.resize(size.width, size.height, { fit: \"inside\" })\n\t\t\t\t\t\t.toFile(outputFilePath);\n\n\t\t\t\t\t// Add resized image URL to the list\n\t\t\t\t\turls.push(fileUrl(req, sizeDir, outputFileName));\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn urls;\n\t} catch (error) {\n\t\treturn null;\n\t}\n};\n","import path from \"path\";\nimport sharp from \"sharp\";\n\nexport const convertToWebP = async (filePath: string, outputDir: string, fileName: string) => {\n\tconst outputFilePath = path.join(outputDir, `${fileName}.webp`);\n\n\t// Use sharp to convert the image\n\tawait sharp(filePath)\n\t\t.webp({ quality: 80 }) // Adjust quality as needed\n\t\t.toFile(outputFilePath);\n\n\treturn outputFilePath;\n};\n","export const ALLOWED_DOCUMENT_TYPES = {\n\t\"application/pdf\": \"pdf\", // Adobe Portable Document Format\n\t\"application/msword\": \"doc\", // Microsoft Word (Legacy)\n\t\"application/vnd.openxmlformats-officedocument.wordprocessingml.document\": \"docx\", // Modern Word\n\t\"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet\": \"xlsx\", // Modern Excel\n\t\"application/vnd.openxmlformats-officedocument.presentationml.presentation\": \"pptx\", // Modern PowerPoint\n\t\"application/vnd.ms-excel\": \"xls\", // Microsoft Excel (Legacy)\n\t\"application/vnd.ms-powerpoint\": \"ppt\", // Microsoft PowerPoint (Legacy)\n\t\"text/plain\": \"txt\", // Plain text files\n\t\"text/csv\": \"csv\" // Comma-separated values\n};\n\nexport const ALLOWED_IMAGE_TYPES = {\n\t\"image/jpeg\": \"jpg\", // JPEG images\n\t\"image/png\": \"png\", // PNG images\n\t\"image/gif\": \"gif\", // GIF images\n\t\"image/webp\": \"webp\", // WebP images\n\t\"image/svg+xml\": \"svg\", // Scalable Vector Graphics\n\t\"image/bmp\": \"bmp\" // Bitmap images\n};\n\nexport const ALLOWED_AUDIO_TYPES = {\n\t\"audio/mpeg\": \"mp3\" // MP3 audio\n};\n\nexport const ALLOWED_VIDEO_TYPES = {\n\t\"video/mp4\": \"mp4\", // MP4 video\n\t\"video/webm\": \"webm\" // WebM video\n};\n","import { Request } from \"express\";\nimport fs from \"fs\";\nimport multer from \"multer\";\nimport path from \"path\";\n\nimport {\n\tALLOWED_AUDIO_TYPES,\n\tALLOWED_DOCUMENT_TYPES,\n\tALLOWED_IMAGE_TYPES,\n\tALLOWED_VIDEO_TYPES\n} from \"@/multer/fileTypes\";\n\n// Define allowed file types - adjust based on your needs\nconst ALLOWED_FILE_TYPES = {\n\t...ALLOWED_DOCUMENT_TYPES,\n\t...ALLOWED_IMAGE_TYPES,\n\t...ALLOWED_AUDIO_TYPES,\n\t...ALLOWED_VIDEO_TYPES\n};\n\nexport const uploadDir = \"uploads\";\nexport const originalDir = path.join(uploadDir, \"original\");\n\n// Define storage configuration\nconst storage = multer.diskStorage({\n\tdestination: (req, file, cb) => {\n\t\t// Ensure \"uploads/original\" directory exists\n\t\tif (!fs.existsSync(originalDir)) fs.mkdirSync(originalDir, { recursive: true });\n\n\t\tcb(null, originalDir);\n\t},\n\tfilename: (req, file, cb) => {\n\t\tconst fileExt = path.extname(file.originalname);\n\t\tconst fileName =\n\t\t\tfile.originalname.replace(fileExt, \"\").toLowerCase().split(\" \").join(\"-\") + \"-\" + Date.now();\n\n\t\tcb(null, fileName + fileExt);\n\t}\n});\n\n// File filter function to validate uploads\nconst fileFilter = (req: Request, file: Express.Multer.File, cb: multer.FileFilterCallback) => {\n\tif (!file.mimetype || !(file.mimetype in ALLOWED_FILE_TYPES)) {\n\t\tcb(new Error(\"Invalid file type\"));\n\t\treturn;\n\t}\n\tcb(null, true);\n};\n\n// Create multer instance with configuration\nconst globalUpload = multer({\n\tstorage: storage,\n\tfileFilter: fileFilter,\n\tlimits: {\n\t\tfileSize: 5 * 1024 * 1024, // 5MB file size limit\n\t\tfiles: 5 // Maximum 5 files per upload\n\t}\n});\n\nexport const fileUrl = (\n\treq: Request,\n\tdirectory: string = originalDir,\n\tfileName: string = req.file?.filename!\n) => {\n\tconst normalizedDirectory = directory.replace(/\\\\/g, \"/\");\n\tconst host = req.get(\"host\");\n\tconst protocol = req.protocol;\n\treturn `${protocol}://${host}/${normalizedDirectory}/${fileName}`;\n};\n\nexport default globalUpload;\n"],"mappings":"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","names":["import_fs","import_path","import_sharp","path","sharp","import_path","path","multer","fs","path","fs","sharp"]}