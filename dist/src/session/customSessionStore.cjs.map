{"version":3,"sources":["../../../src/session/customSessionStore.ts","../../../src/core/constants.ts","../../../src/databases/drizzle/connection.ts","../../../src/models/drizzle/authentication.model.ts","../../../src/databases/drizzle/helpers.ts","../../../src/databases/drizzle/lists.ts","../../../src/models/drizzle/todo.model.ts","../../../src/databases/drizzle/schema.ts"],"sourcesContent":["import { eq } from \"drizzle-orm\";\nimport { SessionData, Store } from \"express-session\";\n\nimport { sessionTimeout } from \"@/core/constants\";\nimport db from \"@/databases/drizzle/connection\";\nimport { sessions } from \"@/models/drizzle/authentication.model\";\n\ninterface ExtendedSessionData extends SessionData {\n\tpassport?: {\n\t\tuser?: number;\n\t};\n}\n\nexport default class DrizzleSessionStore extends Store {\n\tasync get(id: string, callback: (err: any, session?: SessionData | null) => void): Promise<void> {\n\t\ttry {\n\t\t\tconst result = await db.select().from(sessions).where(eq(sessions.sessionId, id)).execute();\n\n\t\t\tif (!result || result.length === 0) {\n\t\t\t\treturn callback(null, null);\n\t\t\t}\n\n\t\t\tconst session = result[0];\n\t\t\tif (new Date(session.expires) < new Date()) {\n\t\t\t\tawait this.destroy(id);\n\t\t\t\treturn callback(null, null);\n\t\t\t}\n\n\t\t\treturn callback(null, JSON.parse(session.sessionCookie!));\n\t\t} catch (err) {\n\t\t\treturn callback(err);\n\t\t}\n\t}\n\n\tasync set(\n\t\tid: string,\n\t\tsession: ExtendedSessionData,\n\t\tcallback?: (err?: any) => void\n\t): Promise<void> {\n\t\ttry {\n\t\t\tif (!session) {\n\t\t\t\treturn callback?.();\n\t\t\t}\n\n\t\t\tconst sessionString = JSON.stringify(session);\n\t\t\tconst expire = session.cookie.expires || new Date(Date.now() + sessionTimeout);\n\n\t\t\t// get session user from cookie\n\t\t\tconst userId = session?.passport?.user || null;\n\n\t\t\tawait db\n\t\t\t\t.insert(sessions)\n\t\t\t\t.values({\n\t\t\t\t\tsessionId: id,\n\t\t\t\t\tsessionCookie: sessionString,\n\t\t\t\t\tuserId,\n\t\t\t\t\texpires: expire\n\t\t\t\t})\n\t\t\t\t.onConflictDoUpdate({\n\t\t\t\t\ttarget: sessions.sessionId,\n\t\t\t\t\tset: {\n\t\t\t\t\t\tsessionCookie: sessionString,\n\t\t\t\t\t\tuserId,\n\t\t\t\t\t\texpires: expire\n\t\t\t\t\t}\n\t\t\t\t})\n\t\t\t\t.returning();\n\n\t\t\tcallback?.();\n\t\t} catch (err) {\n\t\t\tcallback?.(err);\n\t\t}\n\t}\n\n\tasync destroy(id: string, callback?: (err?: any) => void): Promise<void> {\n\t\ttry {\n\t\t\tawait db.delete(sessions).where(eq(sessions.sessionId, id)).execute();\n\n\t\t\tcallback?.();\n\t\t} catch (err) {\n\t\t\tcallback?.(err);\n\t\t}\n\t}\n\n\tasync touch(id: string, session: SessionData, callback?: () => void): Promise<void> {\n\t\ttry {\n\t\t\tconst expire = session.cookie.expires || new Date(Date.now() + sessionTimeout);\n\n\t\t\tawait db\n\t\t\t\t.update(sessions)\n\t\t\t\t.set({\n\t\t\t\t\texpires: expire\n\t\t\t\t})\n\t\t\t\t.where(eq(sessions.sessionId, id))\n\t\t\t\t.execute();\n\n\t\t\tcallback?.();\n\t\t} catch (err) {\n\t\t\tcallback?.();\n\t\t}\n\t}\n}\n","export const origins = [\"http://localhost:3000\"];\nexport const sessionTimeout = 1000 * 60 * 60 * 24 * 7; // 1 week in milliseconds\nexport const csrfTimeout = 1000 * 60 * 60; // 5 seconds in milliseconds\n","import dotenv from \"dotenv\";\nimport { drizzle } from \"drizzle-orm/postgres-js\";\nimport postgres from \"postgres\";\n\nimport schema from \"@/databases/drizzle/schema\";\n\ndotenv.config();\n\nconst sql = postgres(process.env.DATABASE_URL);\nconst db = drizzle(sql, { schema });\n\nconst pool = postgres(process.env.DATABASE_URL, { max: 1 });\nexport const dbPool = drizzle(pool);\n\nexport default db;\n","import { relations } from \"drizzle-orm\";\nimport {\n\tinteger,\n\tpgEnum,\n\tpgTable,\n\tserial,\n\ttext,\n\ttimestamp,\n\tuniqueIndex\n} from \"drizzle-orm/pg-core\";\n\nimport { timestamps } from \"@/databases/drizzle/helpers\";\nimport { ROLE_LIST, TOKEN_LIST } from \"@/databases/drizzle/lists\";\n\nexport const ROLE_TYPE = pgEnum(\"role_type\", ROLE_LIST.enumValues);\n\nexport const TOKEN_TYPE = pgEnum(\"token_type\", TOKEN_LIST.enumValues);\n\nexport const users = pgTable(\"user\", {\n\tid: serial(\"id\").primaryKey(),\n\tname: text(\"name\"),\n\tusername: text(\"username\").unique(),\n\temail: text(\"email\").unique(),\n\tpassword: text(\"password\"),\n\temailVerified: timestamp(\"email_verified\", { withTimezone: true }),\n\timage: text(\"image\"),\n\trole: ROLE_TYPE(\"role\").default(\"SUBSCRIBER\"),\n\t...timestamps\n});\n\nexport const accounts = pgTable(\"account\", {\n\tid: serial(\"id\").primaryKey(),\n\tuserId: integer(\"user_id\")\n\t\t.notNull()\n\t\t.references(() => users.id, { onDelete: \"cascade\" }),\n\ttype: text(\"type\").notNull(),\n\tprovider: text(\"provider\").notNull(),\n\tproviderAccountId: text(\"provider_account_id\").notNull(),\n\trefreshToken: text(\"refresh_token\"),\n\taccessToken: text(\"access_token\"),\n\texpiresAt: integer(\"expires_at\"),\n\ttokenType: text(\"token_type\"),\n\tscope: text(\"scope\"),\n\tidToken: text(\"id_token\"),\n\tsessionState: text(\"session_state\"),\n\t...timestamps\n});\n\nexport const sessions = pgTable(\"session\", {\n\tid: serial(\"id\").primaryKey(),\n\tsessionId: text(\"session_id\").notNull().unique(),\n\tsessionCookie: text(\"session_cookie\").unique(),\n\tuserId: integer(\"user_id\").references(() => users.id, { onDelete: \"cascade\" }),\n\texpires: timestamp(\"expires\", { withTimezone: true }).notNull(),\n\t...timestamps\n});\n\nexport const verificationToken = pgTable(\n\t\"verification_token\",\n\t{\n\t\tid: serial(\"id\").primaryKey(),\n\t\tidentifier: text(\"identifier\").notNull(),\n\t\ttoken: text(\"token\").notNull(),\n\t\ttokenType: TOKEN_TYPE(\"token_type\").notNull(),\n\t\texpires: timestamp(\"expires\", { withTimezone: true }).notNull(),\n\t\t...timestamps\n\t},\n\ttable => ({\n\t\tidentifierTypeIdx: uniqueIndex(\"identifier_type_idx\").on(table.identifier, table.tokenType)\n\t})\n);\n\n// Relationships\nexport const usersRelations = relations(users, ({ many }) => ({\n\taccounts: many(accounts),\n\tsessions: many(sessions)\n}));\n\nexport const accountsRelations = relations(accounts, ({ one }) => ({\n\tuser: one(users, {\n\t\tfields: [accounts.userId],\n\t\treferences: [users.id]\n\t})\n}));\n\nexport const sessionsRelations = relations(sessions, ({ one }) => ({\n\tuser: one(users, {\n\t\tfields: [sessions.userId],\n\t\treferences: [users.id]\n\t})\n}));\n","import { timestamp } from \"drizzle-orm/pg-core\";\n\nexport const timestamps = {\n\tcreatedAt: timestamp(\"created_at\", { withTimezone: true }).notNull().defaultNow(),\n\tupdatedAt: timestamp(\"updated_at\", { withTimezone: true })\n\t\t.notNull()\n\t\t.defaultNow()\n\t\t.$onUpdate(() => new Date())\n};\n","export const ROLE_LIST = {\n\tSUPER_ADMIN: \"SUPER_ADMIN\",\n\tADMINISTRATOR: \"ADMINISTRATOR\",\n\tEDITOR: \"EDITOR\",\n\tAUTHOR: \"AUTHOR\",\n\tCONTRIBUTOR: \"CONTRIBUTOR\",\n\tSUBSCRIBER: \"SUBSCRIBER\",\n\tenumValues: [\"SUPER_ADMIN\", \"ADMINISTRATOR\", \"EDITOR\", \"AUTHOR\", \"CONTRIBUTOR\", \"SUBSCRIBER\"]\n} as const;\n\nexport const TOKEN_LIST = {\n\tPASSWORD_RESET: \"PASSWORD_RESET\",\n\tEMAIL_VERIFICATION: \"EMAIL_VERIFICATION\",\n\tLOGIN_OTP: \"LOGIN_OTP\",\n\tenumValues: [\"PASSWORD_RESET\", \"EMAIL_VERIFICATION\", \"LOGIN_OTP\"]\n} as const;\n","import { pgTable, serial, text, varchar } from \"drizzle-orm/pg-core\";\n\nimport { timestamps } from \"@/databases/drizzle/helpers\";\n\nexport const todo = pgTable(\"todo\", {\n\tid: serial(\"id\").primaryKey(),\n\ttitle: varchar(\"title\", { length: 255 }).notNull(),\n\tdescription: text(\"description\").notNull(),\n\t...timestamps\n});\n","import * as AuthenticationSchema from \"@/models/drizzle/authentication.model\";\nimport * as TodoSchema from \"@/models/drizzle/todo.model\";\n\nconst schema = {\n\t...TodoSchema,\n\t...AuthenticationSchema\n};\n\nexport default schema;\n"],"mappings":"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","names":["import_drizzle_orm","import_pg_core","import_pg_core","dotenv","postgres"]}