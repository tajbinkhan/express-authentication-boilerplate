{"version":3,"sources":["../../../src/service/cookieService.ts","../../../src/app/authentication/authentication.JWT.ts","../../../src/core/constants.ts","../../../src/utils/appHelpers.ts"],"sourcesContent":["import { Request, Response } from \"express\";\n\nimport { encode } from \"@/app/authentication/authentication.JWT\";\n\nimport { sessionTimeout } from \"@/core/constants\";\nimport { UserSchemaType } from \"@/databases/drizzle/types\";\nimport AppHelpers from \"@/utils/appHelpers\";\n\nexport default class CookieService {\n\tprotected request: Request;\n\tprotected response: Response;\n\tprotected jwtCookieName: string;\n\tprotected sessionCookieName: string;\n\n\tconstructor(request: Request, response: Response) {\n\t\tthis.request = request;\n\t\tthis.response = response;\n\t\tthis.jwtCookieName = process.env.JWT_COOKIE_NAME;\n\t\tthis.sessionCookieName = process.env.SESSION_COOKIE_NAME;\n\t}\n\n\tasync saveCookieToBrowser(user: Omit<UserSchemaType, \"password\">) {\n\t\ttry {\n\t\t\tconst accessToken = await encode({\n\t\t\t\ttoken: user\n\t\t\t});\n\n\t\t\tthis.response.cookie(this.jwtCookieName, accessToken, {\n\t\t\t\thttpOnly: true,\n\t\t\t\tmaxAge: sessionTimeout,\n\t\t\t\tsameSite: AppHelpers.sameSiteCookieConfig().sameSite,\n\t\t\t\tsecure: AppHelpers.sameSiteCookieConfig().secure,\n\t\t\t\t...(AppHelpers.sameSiteCookieConfig().domain && {\n\t\t\t\t\tdomain: AppHelpers.sameSiteCookieConfig().domain\n\t\t\t\t})\n\t\t\t});\n\n\t\t\treturn Promise.resolve(accessToken);\n\t\t} catch (error) {\n\t\t\treturn Promise.resolve(null);\n\t\t}\n\t}\n\n\tasync clearCookieFromBrowser() {\n\t\tthis.response.clearCookie(this.jwtCookieName);\n\t\tthis.response.clearCookie(this.sessionCookieName);\n\t}\n}\n","import { hkdf } from \"@panva/hkdf\";\nimport { EncryptJWT, JWTPayload, base64url, calculateJwkThumbprint, jwtDecrypt } from \"jose\";\n\nimport { sessionTimeout } from \"@/core/constants\";\n\ntype Awaitable<T> = T | PromiseLike<T>;\nconst DEFAULT_MAX_AGE = sessionTimeout;\n\nconst now = () => (Date.now() / 1000) | 0;\n\nconst alg = \"dir\";\nconst enc = \"A256CBC-HS512\";\ntype Digest = Parameters<typeof calculateJwkThumbprint>[1];\n\n/** Issues a JWT. By default, the JWT is encrypted using \"A256CBC-HS512\". */\nexport async function encode<Payload = JWT>(params: JWTEncodeParams<Payload>) {\n\tconst {\n\t\ttoken,\n\t\tsecret = process.env.SECRET,\n\t\tmaxAge = DEFAULT_MAX_AGE,\n\t\tsalt = process.env.SESSION_COOKIE_NAME\n\t} = params;\n\n\tconst secrets = Array.isArray(secret) ? secret : [secret];\n\tconst encryptionSecret = await getDerivedEncryptionKey(enc, secrets[0], salt);\n\n\tconst thumbprint = await calculateJwkThumbprint(\n\t\t{ kty: \"oct\", k: base64url.encode(encryptionSecret) },\n\t\t`sha${encryptionSecret.byteLength << 3}` as Digest\n\t);\n\n\tconst generatedToken = await new EncryptJWT(token as JWTPayload)\n\t\t.setProtectedHeader({ alg, enc, kid: thumbprint })\n\t\t.setIssuedAt()\n\t\t.setExpirationTime(now() + maxAge)\n\t\t.setJti(crypto.randomUUID())\n\t\t.encrypt(encryptionSecret);\n\n\treturn generatedToken;\n}\n\n/** Decodes an Express.js issued JWT. */\nexport async function decode<Payload = JWT>(params: JWTDecodeParams): Promise<Payload | null> {\n\tconst { token, secret = process.env.SECRET, salt = process.env.SESSION_COOKIE_NAME } = params;\n\tconst secrets = Array.isArray(secret) ? secret : [secret];\n\tif (!token) return null;\n\tconst { payload } = await jwtDecrypt(\n\t\ttoken,\n\t\tasync ({ kid, enc }) => {\n\t\t\tfor (const secret of secrets) {\n\t\t\t\tconst encryptionSecret = await getDerivedEncryptionKey(enc, secret, salt);\n\t\t\t\tif (kid === undefined) return encryptionSecret;\n\n\t\t\t\tconst thumbprint = await calculateJwkThumbprint(\n\t\t\t\t\t{ kty: \"oct\", k: base64url.encode(encryptionSecret) },\n\t\t\t\t\t`sha${encryptionSecret.byteLength << 3}` as Digest\n\t\t\t\t);\n\t\t\t\tif (kid === thumbprint) return encryptionSecret;\n\t\t\t}\n\n\t\t\tthrow new Error(\"no matching decryption secret\");\n\t\t},\n\t\t{\n\t\t\tclockTolerance: 15,\n\t\t\tkeyManagementAlgorithms: [alg],\n\t\t\tcontentEncryptionAlgorithms: [enc, \"A256GCM\"]\n\t\t}\n\t);\n\treturn payload as Payload;\n}\n\nasync function getDerivedEncryptionKey(\n\tenc: string,\n\tkeyMaterial: Parameters<typeof hkdf>[1],\n\tsalt: Parameters<typeof hkdf>[2]\n) {\n\tlet length: number;\n\tswitch (enc) {\n\t\tcase \"A256CBC-HS512\":\n\t\t\tlength = 64;\n\t\t\tbreak;\n\t\tcase \"A256GCM\":\n\t\t\tlength = 32;\n\t\t\tbreak;\n\t\tdefault:\n\t\t\tthrow new Error(\"Unsupported JWT Content Encryption Algorithm\");\n\t}\n\treturn await hkdf(\n\t\t\"sha256\",\n\t\tkeyMaterial,\n\t\tsalt,\n\t\t`Express.js Generated Encryption Key (${salt})`,\n\t\tlength\n\t);\n}\n\nexport interface DefaultJWT extends Record<string, unknown> {\n\tname?: string | null;\n\temail?: string | null;\n\tpicture?: string | null;\n\tsub?: string;\n\tiat?: number;\n\texp?: number;\n\tjti?: string;\n}\n\n/**\n * Returned by the `jwt` callback when using JWT sessions\n *\n * [`jwt` callback](https://authjs.dev/reference/core/types#jwt)\n */\nexport interface JWT extends Record<string, unknown>, DefaultJWT {}\n\nexport interface JWTEncodeParams<Payload = JWT> {\n\t/**\n\t * The maximum age of the Express.js issued JWT in seconds.\n\t *\n\t * @default 30 * 24 * 60 * 60 // 30 days\n\t */\n\tmaxAge?: number;\n\t/** Used in combination with `secret`, to derive the encryption secret for JWTs. */\n\tsalt?: string;\n\t/** Used in combination with `salt`, to derive the encryption secret for JWTs. */\n\tsecret?: string | string[];\n\t/** The JWT payload. */\n\ttoken: Payload;\n}\n\nexport interface JWTDecodeParams {\n\t/** Used in combination with `secret`, to derive the encryption secret for JWTs. */\n\tsalt?: string;\n\t/**\n\t * Used in combination with `salt`, to derive the encryption secret for JWTs.\n\t *\n\t * @note\n\t * You can also pass an array of secrets, in which case the first secret that successfully\n\t * decrypts the JWT will be used. This is useful for rotating secrets without invalidating existing sessions.\n\t * The newer secret should be added to the start of the array, which will be used for all new sessions.\n\t */\n\tsecret?: string | string[];\n\t/** The Express.js issued JWT to be decoded */\n\ttoken?: string;\n}\n\nexport interface JWTOptions {\n\t/**\n\t * The secret used to encode/decode the Express.js issued JWT.\n\t * It can be an array of secrets, in which case the first secret that successfully\n\t * decrypts the JWT will be used. This is useful for rotating secrets without invalidating existing sessions.\n\t * @internal\n\t */\n\tsecret: string | string[];\n\t/**\n\t * The maximum age of the Express.js issued JWT in seconds.\n\t *\n\t * @default 30 * 24 * 60 * 60 // 30 days\n\t */\n\tmaxAge: number;\n\t/** Override this method to control the Express.js issued JWT encoding. */\n\tencode: (params: JWTEncodeParams) => Awaitable<string>;\n\t/** Override this method to control the Express.js issued JWT decoding. */\n\tdecode: (params: JWTDecodeParams) => Awaitable<JWT | null>;\n}\n","export const origins = [\"http://localhost:3000\"];\nexport const sessionTimeout = 1000 * 60 * 60 * 24 * 7; // 1 week in milliseconds\nexport const csrfTimeout = 1000 * 60 * 60; // 5 seconds in milliseconds\n","import * as crypto from \"crypto\";\nimport { CookieOptions } from \"express\";\n\ninterface SameSiteCookieConfig {\n\tsameSite: CookieOptions[\"sameSite\"];\n\tsecure: boolean;\n\tdomain?: string;\n}\n\nexport default class AppHelpers {\n\t/**\n\t * Encodes a buffer into a base32 string.\n\t * @param buffer - The buffer to encode.\n\t * @returns The base32 encoded string.\n\t */\n\tprivate base32Encode(buffer: Buffer): string {\n\t\tconst alphabet = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ234567\"; // Base32 alphabet\n\t\tlet result = \"\";\n\t\tlet bits = 0;\n\t\tlet value = 0;\n\n\t\tfor (let i = 0; i < buffer.length; i++) {\n\t\t\tvalue = (value << 8) | buffer[i];\n\t\t\tbits += 8;\n\n\t\t\twhile (bits >= 5) {\n\t\t\t\tresult += alphabet[(value >>> (bits - 5)) & 31];\n\t\t\t\tbits -= 5;\n\t\t\t}\n\t\t}\n\n\t\tif (bits > 0) {\n\t\t\tresult += alphabet[(value << (5 - bits)) & 31];\n\t\t}\n\n\t\treturn result;\n\t}\n\n\t/**\n\t * Generates a token using the user information and a secret key.\n\t * @param userInfo - The user information to encrypt.\n\t * @param secretKey - The secret key to encrypt the user information.\n\t * @returns The generated token.\n\t */\n\tpublic generateToken(userId: number, secretKey: string): string {\n\t\t// 1. Generate a timestamp\n\t\tconst timestamp = new Date().toISOString();\n\n\t\t// 2. Combine timestamp and user information\n\t\tconst data = `${timestamp}:${userId}`;\n\t\tconst buffer = Buffer.from(data, \"utf-8\");\n\n\t\t// 3. Encrypt the data using AES\n\t\tconst algorithm = \"aes-256-cbc\";\n\t\tconst iv = crypto.randomBytes(16); // Initialization vector\n\t\tconst key = crypto.createHash(\"sha256\").update(secretKey).digest(); // Derive a 256-bit key\n\t\tconst cipher = crypto.createCipheriv(algorithm, key, iv);\n\t\tconst encrypted = Buffer.concat([cipher.update(buffer), cipher.final()]);\n\n\t\t// 4. Combine IV and encrypted data\n\t\tconst encryptedBuffer = Buffer.concat([iv, encrypted]);\n\n\t\t// 5. Encode to Base32\n\t\treturn this.base32Encode(encryptedBuffer);\n\t}\n\n\t/**\n\t * Determines if the input is an email or a username.\n\t * @param input - The user-provided input.\n\t * @returns \"email\" if the input is an email, \"username\" otherwise.\n\t */\n\tstatic detectInputType(input: string): \"EMAIL\" | \"USERNAME\" {\n\t\t// Regular expression to validate email format\n\t\tconst emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n\t\treturn emailRegex.test(input) ? \"EMAIL\" : \"USERNAME\";\n\t}\n\n\t/**\n\t * Generates a random OTP of the specified length.\n\t * @param length - The length of the OTP to generate.\n\t * @returns The generated OTP.\n\t * @throws An error if the length is less than 4.\n\t */\n\tstatic OTPGenerator(length: number = 4): number {\n\t\tif (length < 4) {\n\t\t\tthrow new Error(\"The OTP length must be at least 4.\");\n\t\t}\n\n\t\tconst min = Math.pow(10, length - 1);\n\t\tconst max = Math.pow(10, length) - 1;\n\t\treturn Math.floor(Math.random() * (max - min + 1) + min);\n\t}\n\n\t/**\n\t * Generate OTP expiry time.\n\t * @param expiryTime - The expiry time in minutes.\n\t * @returns The expiry time in Date format.\n\t */\n\tstatic OTPExpiry(expiryTime: number = 5): Date {\n\t\tconst now = new Date();\n\t\treturn new Date(now.getTime() + expiryTime * 60000);\n\t}\n\n\t/**\n\t * Determines the appropriate SameSite and secure settings for cookies based on the provided URLs.\n\t * @returns The SameSite and secure settings for cookies.\n\t */\n\tstatic sameSiteCookieConfig(): SameSiteCookieConfig {\n\t\ttry {\n\t\t\tconst appUrl = process.env.APP_URL;\n\t\t\tconst apiUrl =\n\t\t\t\tprocess.env.NODE_ENV === \"production\"\n\t\t\t\t\t? process.env.API_URL\n\t\t\t\t\t: `http://localhost:${process.env.PORT}`;\n\n\t\t\tconst appUrlObj = new URL(appUrl);\n\t\t\tconst apiUrlObj = new URL(apiUrl);\n\n\t\t\t// Extract the base domain (excluding subdomains)\n\t\t\tconst getBaseDomain = (hostname: string) => {\n\t\t\t\tconst parts = hostname.split(\".\");\n\t\t\t\treturn parts.slice(-2).join(\".\");\n\t\t\t};\n\n\t\t\tconst appBaseDomain = getBaseDomain(appUrlObj.hostname);\n\t\t\tconst apiBaseDomain = getBaseDomain(apiUrlObj.hostname);\n\n\t\t\tconst isSecure = appUrlObj.protocol === \"https:\" || apiUrlObj.protocol === \"https:\";\n\n\t\t\t// Determine domain value - only set if on same base domain\n\t\t\tlet domain: string | undefined;\n\t\t\tif (appBaseDomain === apiBaseDomain && !appUrlObj.hostname.includes(\"localhost\")) {\n\t\t\t\tdomain = \".\" + appBaseDomain;\n\t\t\t}\n\n\t\t\t// For localhost, set the exact hostname\n\t\t\tif (apiUrlObj.hostname.includes(\"localhost\")) {\n\t\t\t\tdomain = apiUrlObj.hostname;\n\t\t\t}\n\n\t\t\t// Determine sameSite value\n\t\t\tlet sameSite: CookieOptions[\"sameSite\"];\n\t\t\tif (appBaseDomain === apiBaseDomain) {\n\t\t\t\tsameSite = \"strict\";\n\t\t\t} else if (\n\t\t\t\tappUrlObj.hostname.includes(\"localhost\") &&\n\t\t\t\tapiUrlObj.hostname.includes(\"localhost\")\n\t\t\t) {\n\t\t\t\tsameSite = \"lax\";\n\t\t\t} else {\n\t\t\t\tsameSite = \"none\";\n\t\t\t}\n\n\t\t\treturn {\n\t\t\t\tsameSite,\n\t\t\t\tsecure: isSecure,\n\t\t\t\tdomain\n\t\t\t};\n\t\t} catch (error) {\n\t\t\treturn {\n\t\t\t\tsameSite: \"lax\",\n\t\t\t\tsecure: true\n\t\t\t};\n\t\t}\n\t}\n}\n"],"mappings":"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","names":["enc","crypto","now"]}