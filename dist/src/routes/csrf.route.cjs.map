{"version":3,"sources":["../../../src/routes/csrf.route.ts","../../../src/utils/csrf.ts","../../../src/core/constants.ts","../../../src/utils/appHelpers.ts","../../../src/utils/statusCodes.ts","../../../src/utils/serviceApi.ts"],"sourcesContent":["import express, { Router } from \"express\";\n\nimport { generateToken } from \"@/utils/csrf\";\nimport { ApiResponse } from \"@/utils/serviceApi\";\n\nexport const csrfRouter: Router = (() => {\n\tconst router = express.Router();\n\n\trouter.get(\"/\", (req, res) => {\n\t\tnew ApiResponse(res).successResponse(\"CSRF token generated\", generateToken(req, res));\n\t});\n\n\treturn router;\n})();\n","import { doubleCsrf } from \"csrf-csrf\";\n\nimport { csrfTimeout } from \"@/core/constants\";\nimport AppHelpers from \"@/utils/appHelpers\";\n\nconst {\n\tgenerateToken, // Use this in your routes to generate tokens\n\tvalidateRequest, // Use this as middleware to validate tokens\n\tdoubleCsrfProtection, // This is the express middleware\n\tinvalidCsrfTokenError // This is the error thrown when the token is invalid\n} = doubleCsrf({\n\tgetSecret: () => process.env.SECRET, // Secret for generating tokens\n\tcookieName: \"csrf-token\", // Cookie name for the token\n\tcookieOptions: {\n\t\tmaxAge: csrfTimeout,\n\t\tsameSite: AppHelpers.sameSiteCookieConfig().sameSite,\n\t\tsecure: AppHelpers.sameSiteCookieConfig().secure,\n\t\t...(AppHelpers.sameSiteCookieConfig().domain && {\n\t\t\tdomain: AppHelpers.sameSiteCookieConfig().domain\n\t\t})\n\t},\n\tsize: 32, // The size of the generated tokens\n\terrorConfig: {\n\t\tmessage: \"Invalid CSRF token\"\n\t},\n\tgetTokenFromRequest: req => req.headers[\"x-csrf-token\"] // Get the token from the request\n});\n\nexport { doubleCsrfProtection, generateToken, invalidCsrfTokenError, validateRequest };\n","export const origins = [\"http://localhost:3000\"];\nexport const sessionTimeout = 1000 * 60 * 60 * 24 * 7; // 1 week in milliseconds\nexport const csrfTimeout = 1000 * 60 * 60; // 5 seconds in milliseconds\n","import * as crypto from \"crypto\";\nimport { CookieOptions } from \"express\";\n\ninterface SameSiteCookieConfig {\n\tsameSite: CookieOptions[\"sameSite\"];\n\tsecure: boolean;\n\tdomain?: string;\n}\n\nexport default class AppHelpers {\n\t/**\n\t * Encodes a buffer into a base32 string.\n\t * @param buffer - The buffer to encode.\n\t * @returns The base32 encoded string.\n\t */\n\tprivate base32Encode(buffer: Buffer): string {\n\t\tconst alphabet = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ234567\"; // Base32 alphabet\n\t\tlet result = \"\";\n\t\tlet bits = 0;\n\t\tlet value = 0;\n\n\t\tfor (let i = 0; i < buffer.length; i++) {\n\t\t\tvalue = (value << 8) | buffer[i];\n\t\t\tbits += 8;\n\n\t\t\twhile (bits >= 5) {\n\t\t\t\tresult += alphabet[(value >>> (bits - 5)) & 31];\n\t\t\t\tbits -= 5;\n\t\t\t}\n\t\t}\n\n\t\tif (bits > 0) {\n\t\t\tresult += alphabet[(value << (5 - bits)) & 31];\n\t\t}\n\n\t\treturn result;\n\t}\n\n\t/**\n\t * Generates a token using the user information and a secret key.\n\t * @param userInfo - The user information to encrypt.\n\t * @param secretKey - The secret key to encrypt the user information.\n\t * @returns The generated token.\n\t */\n\tpublic generateToken(userId: number, secretKey: string): string {\n\t\t// 1. Generate a timestamp\n\t\tconst timestamp = new Date().toISOString();\n\n\t\t// 2. Combine timestamp and user information\n\t\tconst data = `${timestamp}:${userId}`;\n\t\tconst buffer = Buffer.from(data, \"utf-8\");\n\n\t\t// 3. Encrypt the data using AES\n\t\tconst algorithm = \"aes-256-cbc\";\n\t\tconst iv = crypto.randomBytes(16); // Initialization vector\n\t\tconst key = crypto.createHash(\"sha256\").update(secretKey).digest(); // Derive a 256-bit key\n\t\tconst cipher = crypto.createCipheriv(algorithm, key, iv);\n\t\tconst encrypted = Buffer.concat([cipher.update(buffer), cipher.final()]);\n\n\t\t// 4. Combine IV and encrypted data\n\t\tconst encryptedBuffer = Buffer.concat([iv, encrypted]);\n\n\t\t// 5. Encode to Base32\n\t\treturn this.base32Encode(encryptedBuffer);\n\t}\n\n\t/**\n\t * Determines if the input is an email or a username.\n\t * @param input - The user-provided input.\n\t * @returns \"email\" if the input is an email, \"username\" otherwise.\n\t */\n\tstatic detectInputType(input: string): \"EMAIL\" | \"USERNAME\" {\n\t\t// Regular expression to validate email format\n\t\tconst emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n\t\treturn emailRegex.test(input) ? \"EMAIL\" : \"USERNAME\";\n\t}\n\n\t/**\n\t * Generates a random OTP of the specified length.\n\t * @param length - The length of the OTP to generate.\n\t * @returns The generated OTP.\n\t * @throws An error if the length is less than 4.\n\t */\n\tstatic OTPGenerator(length: number = 4): number {\n\t\tif (length < 4) {\n\t\t\tthrow new Error(\"The OTP length must be at least 4.\");\n\t\t}\n\n\t\tconst min = Math.pow(10, length - 1);\n\t\tconst max = Math.pow(10, length) - 1;\n\t\treturn Math.floor(Math.random() * (max - min + 1) + min);\n\t}\n\n\t/**\n\t * Generate OTP expiry time.\n\t * @param expiryTime - The expiry time in minutes.\n\t * @returns The expiry time in Date format.\n\t */\n\tstatic OTPExpiry(expiryTime: number = 5): Date {\n\t\tconst now = new Date();\n\t\treturn new Date(now.getTime() + expiryTime * 60000);\n\t}\n\n\t/**\n\t * Determines the appropriate SameSite and secure settings for cookies based on the provided URLs.\n\t * @returns The SameSite and secure settings for cookies.\n\t */\n\tstatic sameSiteCookieConfig(): SameSiteCookieConfig {\n\t\ttry {\n\t\t\tconst appUrl = process.env.APP_URL;\n\t\t\tconst apiUrl =\n\t\t\t\tprocess.env.NODE_ENV === \"production\"\n\t\t\t\t\t? process.env.API_URL\n\t\t\t\t\t: `http://localhost:${process.env.PORT}`;\n\n\t\t\tconst appUrlObj = new URL(appUrl);\n\t\t\tconst apiUrlObj = new URL(apiUrl);\n\n\t\t\t// Extract the base domain (excluding subdomains)\n\t\t\tconst getBaseDomain = (hostname: string) => {\n\t\t\t\tconst parts = hostname.split(\".\");\n\t\t\t\treturn parts.slice(-2).join(\".\");\n\t\t\t};\n\n\t\t\tconst appBaseDomain = getBaseDomain(appUrlObj.hostname);\n\t\t\tconst apiBaseDomain = getBaseDomain(apiUrlObj.hostname);\n\n\t\t\tconst isSecure = appUrlObj.protocol === \"https:\" || apiUrlObj.protocol === \"https:\";\n\n\t\t\t// Determine domain value - only set if on same base domain\n\t\t\tlet domain: string | undefined;\n\t\t\tif (appBaseDomain === apiBaseDomain && !appUrlObj.hostname.includes(\"localhost\")) {\n\t\t\t\tdomain = \".\" + appBaseDomain;\n\t\t\t}\n\n\t\t\t// For localhost, set the exact hostname\n\t\t\tif (apiUrlObj.hostname.includes(\"localhost\")) {\n\t\t\t\tdomain = apiUrlObj.hostname;\n\t\t\t}\n\n\t\t\t// Determine sameSite value\n\t\t\tlet sameSite: CookieOptions[\"sameSite\"];\n\t\t\tif (appBaseDomain === apiBaseDomain) {\n\t\t\t\tsameSite = \"strict\";\n\t\t\t} else if (\n\t\t\t\tappUrlObj.hostname.includes(\"localhost\") &&\n\t\t\t\tapiUrlObj.hostname.includes(\"localhost\")\n\t\t\t) {\n\t\t\t\tsameSite = \"lax\";\n\t\t\t} else {\n\t\t\t\tsameSite = \"none\";\n\t\t\t}\n\n\t\t\treturn {\n\t\t\t\tsameSite,\n\t\t\t\tsecure: isSecure,\n\t\t\t\tdomain\n\t\t\t};\n\t\t} catch (error) {\n\t\t\treturn {\n\t\t\t\tsameSite: \"lax\",\n\t\t\t\tsecure: true\n\t\t\t};\n\t\t}\n\t}\n}\n","export const status = {\n\tHTTP_100_CONTINUE: 100,\n\tHTTP_101_SWITCHING_PROTOCOLS: 101,\n\tHTTP_102_PROCESSING: 102,\n\tHTTP_103_EARLY_HINTS: 103,\n\tHTTP_200_OK: 200,\n\tHTTP_201_CREATED: 201,\n\tHTTP_202_ACCEPTED: 202,\n\tHTTP_203_NON_AUTHORITATIVE_INFORMATION: 203,\n\tHTTP_204_NO_DATA: 204,\n\tHTTP_205_RESET_DATA: 205,\n\tHTTP_206_PARTIAL_DATA: 206,\n\tHTTP_207_MULTI_STATUS: 207,\n\tHTTP_208_ALREADY_REPORTED: 208,\n\tHTTP_226_IM_USED: 226,\n\tHTTP_300_MULTIPLE_CHOICES: 300,\n\tHTTP_301_MOVED_PERMANENTLY: 301,\n\tHTTP_302_FOUND: 302,\n\tHTTP_303_SEE_OTHER: 303,\n\tHTTP_304_NOT_MODIFIED: 304,\n\tHTTP_305_USE_PROXY: 305,\n\tHTTP_306_SWITCH_PROXY: 306,\n\tHTTP_307_TEMPORARY_REDIRECT: 307,\n\tHTTP_308_PERMANENT_REDIRECT: 308,\n\tHTTP_400_BAD_REQUEST: 400,\n\tHTTP_401_UNAUTHORIZED: 401,\n\tHTTP_402_PAYMENT_REQUIRED: 402,\n\tHTTP_403_FORBIDDEN: 403,\n\tHTTP_404_NOT_FOUND: 404,\n\tHTTP_405_METHOD_NOT_ALLOWED: 405,\n\tHTTP_406_NOT_ACCEPTABLE: 406,\n\tHTTP_407_PROXY_AUTHENTICATION_REQUIRED: 407,\n\tHTTP_408_REQUEST_TIMEOUT: 408,\n\tHTTP_409_CONFLICT: 409,\n\tHTTP_410_GONE: 410,\n\tHTTP_411_LENGTH_REQUIRED: 411,\n\tHTTP_412_PRECONDITION_FAILED: 412,\n\tHTTP_413_PAYLOAD_TOO_LARGE: 413,\n\tHTTP_414_URI_TOO_LONG: 414,\n\tHTTP_415_UNSUPPORTED_MEDIA_TYPE: 415,\n\tHTTP_416_RANGE_NOT_SATISFIABLE: 416,\n\tHTTP_417_EXPECTATION_FAILED: 417,\n\tHTTP_418_IM_A_TEAPOT: 418,\n\tHTTP_421_MISDIRECTED_REQUEST: 421,\n\tHTTP_422_UNPROCESSABLE_ENTITY: 422,\n\tHTTP_423_LOCKED: 423,\n\tHTTP_424_FAILED_DEPENDENCY: 424,\n\tHTTP_425_TOO_EARLY: 425,\n\tHTTP_426_UPGRADE_REQUIRED: 426,\n\tHTTP_428_PRECONDITION_REQUIRED: 428,\n\tHTTP_429_TOO_MANY_REQUESTS: 429,\n\tHTTP_431_REQUEST_HEADER_FIELDS_TOO_LARGE: 431,\n\tHTTP_451_UNAVAILABLE_FOR_LEGAL_REASONS: 451,\n\tHTTP_500_INTERNAL_SERVER_ERROR: 500,\n\tHTTP_501_NOT_IMPLEMENTED: 501,\n\tHTTP_502_BAD_GATEWAY: 502,\n\tHTTP_503_SERVICE_UNAVAILABLE: 503,\n\tHTTP_504_GATEWAY_TIMEOUT: 504,\n\tHTTP_505_HTTP_VERSION_NOT_SUPPORTED: 505,\n\tHTTP_506_VARIANT_ALSO_NEGOTIATES: 506,\n\tHTTP_507_INSUFFICIENT_STORAGE: 507,\n\tHTTP_508_LOOP_DETECTED: 508,\n\tHTTP_510_NOT_EXTENDED: 510,\n\tHTTP_511_NETWORK_AUTHENTICATION_REQUIRED: 511\n};\n","import { Response } from \"express\";\n\nimport { status } from \"@/utils/statusCodes\";\n\n// Create a type from the status object values\ntype HttpStatusCode = (typeof status)[keyof typeof status];\n\n// Stricter Pagination interface with required fields\nexport interface Pagination {\n\ttotalItems: number;\n\tlimit: number;\n\toffset: number;\n\tcurrentPage: number;\n\ttotalPages: number;\n\thasPrevPage: boolean;\n\thasNextPage: boolean;\n\tprevPage: number | null;\n\tnextPage: number | null;\n}\n\n// Base interface for API responses\ninterface BaseApiResponse {\n\tstatus: HttpStatusCode;\n\tmessage: string;\n}\n\n// Generic response interfaces with strict typing\nexport interface ServiceApiResponse<T> extends BaseApiResponse {\n\tdata: T;\n\tpagination?: Pagination;\n}\n\nexport interface ServiceSendApiResponse<T> extends BaseApiResponse {\n\tdata?: T;\n\tpagination?: Pagination;\n}\n\n// Error type definitions\nexport interface ApiError extends BaseApiResponse {\n\terror?: string;\n}\n\nconst isApiError = (error: unknown): error is ApiError => {\n\treturn (\n\t\terror !== null &&\n\t\ttypeof error === \"object\" &&\n\t\t\"status\" in error &&\n\t\ttypeof (error as ApiError).status === \"number\" &&\n\t\t\"message\" in error &&\n\t\ttypeof (error as ApiError).message === \"string\"\n\t);\n};\n\nconst NO_CONTENT_STATUSES = new Set([status.HTTP_204_NO_DATA]);\n\nexport class ServiceResponse {\n\tstatic async createResponse<T>(\n\t\tstatus: HttpStatusCode,\n\t\tmessage: string,\n\t\tdata: T,\n\t\tpagination?: Pagination\n\t): Promise<ServiceApiResponse<T>> {\n\t\tif (NO_CONTENT_STATUSES.has(status)) {\n\t\t\treturn Promise.resolve({ status, message, data: undefined as T });\n\t\t}\n\t\treturn Promise.resolve({ status, message, data, pagination });\n\t}\n\n\tstatic async createRejectResponse<T>(\n\t\tstatus: HttpStatusCode,\n\t\tmessage: string\n\t): Promise<ServiceApiResponse<T>> {\n\t\treturn Promise.reject({ status, message });\n\t}\n\n\tstatic createErrorResponse(error: unknown): Promise<never> {\n\t\tconsole.error(\"Error:\", error instanceof Error ? error.message : error);\n\n\t\tif (isApiError(error)) return Promise.reject(error);\n\n\t\treturn Promise.reject({\n\t\t\tstatus: status.HTTP_500_INTERNAL_SERVER_ERROR,\n\t\t\tmessage: \"Internal Server Error\"\n\t\t});\n\t}\n}\n\nexport class ApiResponse {\n\tprivate readonly response: Response;\n\n\tconstructor(response: Response) {\n\t\tthis.response = response;\n\t}\n\n\tsuccessResponse<T>(message: string, data?: T, pagination?: Pagination) {\n\t\treturn this.sendResponse<T>({\n\t\t\tstatus: status.HTTP_200_OK,\n\t\t\tmessage,\n\t\t\tdata,\n\t\t\tpagination\n\t\t});\n\t}\n\n\tunauthorizedResponse(message: string) {\n\t\treturn this.sendResponse({\n\t\t\tstatus: status.HTTP_401_UNAUTHORIZED,\n\t\t\tmessage\n\t\t});\n\t}\n\n\tforbiddenResponse(message: string) {\n\t\treturn this.sendResponse({\n\t\t\tstatus: status.HTTP_403_FORBIDDEN,\n\t\t\tmessage\n\t\t});\n\t}\n\n\tbadResponse(message: string) {\n\t\treturn this.sendResponse({\n\t\t\tstatus: status.HTTP_400_BAD_REQUEST,\n\t\t\tmessage\n\t\t});\n\t}\n\n\tinternalServerError(message: string = \"Internal Server Error\") {\n\t\treturn this.sendResponse({\n\t\t\tstatus: status.HTTP_500_INTERNAL_SERVER_ERROR,\n\t\t\tmessage\n\t\t});\n\t}\n\n\tsendResponse<T>({ status, message, data, pagination }: ServiceSendApiResponse<T>): Response {\n\t\tif (NO_CONTENT_STATUSES.has(status)) {\n\t\t\treturn this.response.status(status).json({});\n\t\t}\n\n\t\tconst responseBody: Partial<ServiceSendApiResponse<T>> = { status, message };\n\n\t\tif (data !== undefined) {\n\t\t\tresponseBody.data = data;\n\t\t}\n\n\t\tif (pagination) {\n\t\t\tresponseBody.pagination = pagination;\n\t\t}\n\n\t\treturn this.response.status(status).json(responseBody);\n\t}\n}\n"],"mappings":"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","names":["status","express"]}