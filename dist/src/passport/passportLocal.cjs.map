{"version":3,"sources":["../../../src/passport/passportLocal.ts","../../../src/app/authentication/authentication.service.ts","../../../src/core/constants.ts","../../../src/databases/drizzle/connection.ts","../../../src/models/drizzle/authentication.model.ts","../../../src/databases/drizzle/helpers.ts","../../../src/databases/drizzle/lists.ts","../../../src/models/drizzle/todo.model.ts","../../../src/databases/drizzle/schema.ts","../../../src/databases/drizzle/service.ts","../../../src/service/otpService.ts","../../../src/utils/appHelpers.ts","../../../src/utils/statusCodes.ts","../../../src/utils/serviceApi.ts"],"sourcesContent":["import { NextFunction, Request, Response } from \"express\";\nimport passport from \"passport\";\nimport { Strategy } from \"passport-local\";\n\nimport AuthenticationService from \"@/app/authentication/authentication.service\";\n\nimport db from \"@/databases/drizzle/connection\";\nimport { sessions } from \"@/models/drizzle/authentication.model\";\nimport AppHelpers from \"@/utils/appHelpers\";\nimport { ApiResponse } from \"@/utils/serviceApi\";\nimport { status } from \"@/utils/statusCodes\";\n\nconst authenticationService = new AuthenticationService();\n\npassport.serializeUser(async (user, done) => {\n\tdone(null, user.id);\n});\n\npassport.deserializeUser(async (id: number, done) => {\n\tconst user = await authenticationService.findUserById(id);\n\tdone(null, user.data);\n});\n\nexport default passport.use(\n\tnew Strategy(async (username, password, done) => {\n\t\ttry {\n\t\t\tconst inputType = AppHelpers.detectInputType(username);\n\n\t\t\tif (inputType === \"EMAIL\") {\n\t\t\t\tconst user = await authenticationService.findUserByEmail(username);\n\n\t\t\t\treturn done(null, user.data);\n\t\t\t} else {\n\t\t\t\tconst user = await authenticationService.findUserByUsername(username);\n\n\t\t\t\treturn done(null, user.data);\n\t\t\t}\n\t\t} catch (error) {\n\t\t\treturn done(error);\n\t\t}\n\t})\n);\n\nexport const localAuthentication = (req: Request, res: Response, next: NextFunction) => {\n\tpassport.authenticate(\"local\", (err: any, user: Express.User) => {\n\t\tconst apiResponse = new ApiResponse(res);\n\t\tif (err)\n\t\t\treturn apiResponse.sendResponse({\n\t\t\t\tstatus: err.status,\n\t\t\t\tmessage: err.message\n\t\t\t});\n\n\t\t// Log the user in\n\t\treq.login(user, loginErr => {\n\t\t\t// If there is an error in logging in\n\t\t\tif (loginErr)\n\t\t\t\treturn apiResponse.sendResponse({\n\t\t\t\t\tstatus: status.HTTP_400_BAD_REQUEST,\n\t\t\t\t\tmessage: \"Login Failed\"\n\t\t\t\t});\n\n\t\t\t// assign user to the current session\n\t\t\tdb.update(sessions)\n\t\t\t\t.set({\n\t\t\t\t\tuserId: user.id\n\t\t\t\t})\n\t\t\t\t.execute();\n\n\t\t\t// Success response\n\t\t\treturn apiResponse.successResponse(\"Logged in successfully\", user);\n\t\t});\n\t})(req, res, next);\n};\n","import bcrypt from \"bcrypt\";\nimport { and, eq } from \"drizzle-orm\";\nimport { Profile as GoogleUserProfile } from \"passport-google-oauth20\";\n\nimport { CreateUserType } from \"@/app/authentication/authentication.type\";\n\nimport { sessionTimeout } from \"@/core/constants\";\nimport DrizzleService from \"@/databases/drizzle/service\";\nimport { AccountSchemaType, UserSchemaType } from \"@/databases/drizzle/types\";\nimport { accounts, users } from \"@/models/drizzle/authentication.model\";\nimport OTPEmailService from \"@/service/otpService\";\nimport AppHelpers from \"@/utils/appHelpers\";\nimport { ServiceApiResponse, ServiceResponse } from \"@/utils/serviceApi\";\nimport { status } from \"@/utils/statusCodes\";\n\nexport default class AuthenticationService extends DrizzleService {\n\tprotected otpService: OTPEmailService;\n\n\t/**\n\t * Constructor for AuthenticationService\n\t */\n\tconstructor() {\n\t\tsuper();\n\t\tthis.otpService = new OTPEmailService();\n\t}\n\n\tasync createUser(\n\t\tdata: CreateUserType\n\t): Promise<ServiceApiResponse<Omit<UserSchemaType, \"password\">>> {\n\t\ttry {\n\t\t\tdata.username && (await this.duplicateUserCheckByUsername(data.username));\n\t\t\tdata.email && (await this.duplicateUserCheckByEmail(data.email));\n\t\t\tconst createdUser = await this.db.insert(users).values(data).returning();\n\n\t\t\tconst { password, ...user } = createdUser[0];\n\n\t\t\treturn ServiceResponse.createResponse(\n\t\t\t\tstatus.HTTP_201_CREATED,\n\t\t\t\t\"User created successfully\",\n\t\t\t\tuser\n\t\t\t);\n\t\t} catch (error) {\n\t\t\treturn ServiceResponse.createErrorResponse(error);\n\t\t}\n\t}\n\n\tasync createGoogleAccount(\n\t\tuserId: number,\n\t\tdata: GoogleUserProfile,\n\t\taccessToken: string\n\t): Promise<ServiceApiResponse<AccountSchemaType>> {\n\t\ttry {\n\t\t\tconst createdGoogleAccount = await this.db\n\t\t\t\t.insert(accounts)\n\t\t\t\t.values({\n\t\t\t\t\tuserId,\n\t\t\t\t\ttype: \"oauth\",\n\t\t\t\t\tprovider: \"google\",\n\t\t\t\t\tproviderAccountId: data.id,\n\t\t\t\t\taccessToken: accessToken,\n\t\t\t\t\trefreshToken: null,\n\t\t\t\t\texpiresAt: sessionTimeout,\n\t\t\t\t\ttokenType: \"access_token\",\n\t\t\t\t\tscope: \"profile\",\n\t\t\t\t\tidToken: data.id,\n\t\t\t\t\tsessionState: null\n\t\t\t\t})\n\t\t\t\t.returning();\n\n\t\t\treturn ServiceResponse.createResponse(\n\t\t\t\tstatus.HTTP_201_CREATED,\n\t\t\t\t\"Google account created successfully\",\n\t\t\t\tcreatedGoogleAccount[0]\n\t\t\t);\n\t\t} catch (error) {\n\t\t\treturn ServiceResponse.createErrorResponse(error);\n\t\t}\n\t}\n\n\tasync createUserFromGoogle(\n\t\tdata: GoogleUserProfile,\n\t\taccessToken: string\n\t): Promise<ServiceApiResponse<Omit<UserSchemaType, \"password\">>> {\n\t\ttry {\n\t\t\tconst checkUserExistence = await this.db.query.users.findFirst({\n\t\t\t\twhere: eq(users.email, data._json.email!),\n\t\t\t\twith: {\n\t\t\t\t\taccounts: {\n\t\t\t\t\t\twhere: and(eq(accounts.providerAccountId, data.id), eq(accounts.provider, \"google\"))\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\n\t\t\t// If user exists\n\t\t\tif (checkUserExistence) {\n\t\t\t\t// If user has a google account, update the access token\n\t\t\t\tif (checkUserExistence.accounts.length > 0) {\n\t\t\t\t\tawait this.db\n\t\t\t\t\t\t.update(accounts)\n\t\t\t\t\t\t.set({ accessToken })\n\t\t\t\t\t\t.where(eq(accounts.providerAccountId, data.id));\n\n\t\t\t\t\tif (!checkUserExistence.emailVerified)\n\t\t\t\t\t\tawait this.accountVerification(checkUserExistence.id);\n\n\t\t\t\t\tconst { accounts: userAccounts, ...user } = checkUserExistence;\n\n\t\t\t\t\treturn ServiceResponse.createResponse(\n\t\t\t\t\t\tstatus.HTTP_200_OK,\n\t\t\t\t\t\t\"Google account updated successfully\",\n\t\t\t\t\t\tuser\n\t\t\t\t\t);\n\t\t\t\t} else {\n\t\t\t\t\t// If user does not have a google account, create one\n\t\t\t\t\tawait this.createGoogleAccount(checkUserExistence.id, data, accessToken);\n\n\t\t\t\t\tconst { accounts: userAccounts, ...user } = checkUserExistence;\n\n\t\t\t\t\treturn ServiceResponse.createResponse(\n\t\t\t\t\t\tstatus.HTTP_201_CREATED,\n\t\t\t\t\t\t\"Google account created successfully\",\n\t\t\t\t\t\tuser\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// If user does not exist, create a new user\n\t\t\tconst createdUser = await this.createUser({\n\t\t\t\tname: data._json.name!,\n\t\t\t\temail: data._json.email!,\n\t\t\t\tusername: data._json.email!.split(\"@\")[0],\n\t\t\t\tpassword: null,\n\t\t\t\temailVerified: new Date(),\n\t\t\t\timage: data._json.picture!\n\t\t\t});\n\n\t\t\t// Create google account\n\t\t\tawait this.createGoogleAccount(createdUser.data?.id!, data, accessToken);\n\n\t\t\treturn ServiceResponse.createResponse(\n\t\t\t\tstatus.HTTP_201_CREATED,\n\t\t\t\t\"User created successfully\",\n\t\t\t\tcreatedUser.data\n\t\t\t);\n\t\t} catch (error) {\n\t\t\treturn ServiceResponse.createErrorResponse(error);\n\t\t}\n\t}\n\n\tasync findUserByUsernameOrEmail(username: string): Promise<ServiceApiResponse<UserSchemaType>> {\n\t\ttry {\n\t\t\tconst inputType = AppHelpers.detectInputType(username);\n\n\t\t\tlet findUser: Partial<Omit<UserSchemaType, \"password\">> = {};\n\n\t\t\tif (inputType === \"EMAIL\") {\n\t\t\t\tconst user = await this.findUserByEmail(username, true);\n\t\t\t\tfindUser = user.data!;\n\t\t\t\treturn ServiceResponse.createResponse(\n\t\t\t\t\tstatus.HTTP_200_OK,\n\t\t\t\t\t\"User found successfully\",\n\t\t\t\t\tfindUser as UserSchemaType\n\t\t\t\t);\n\t\t\t} else if (inputType === \"USERNAME\") {\n\t\t\t\tconst user = await this.findUserByUsername(username, true);\n\t\t\t\tfindUser = user.data!;\n\t\t\t\treturn ServiceResponse.createResponse(\n\t\t\t\t\tstatus.HTTP_200_OK,\n\t\t\t\t\t\"User found successfully\",\n\t\t\t\t\tfindUser as UserSchemaType\n\t\t\t\t);\n\t\t\t}\n\t\t\treturn ServiceResponse.createResponse(\n\t\t\t\tstatus.HTTP_400_BAD_REQUEST,\n\t\t\t\t\"Invalid input type\",\n\t\t\t\tfindUser as UserSchemaType\n\t\t\t);\n\t\t} catch (error) {\n\t\t\treturn ServiceResponse.createErrorResponse(error);\n\t\t}\n\t}\n\n\tasync findUserById(\n\t\tid: number,\n\t\twithPassword: boolean = false\n\t): Promise<ServiceApiResponse<UserSchemaType>> {\n\t\ttry {\n\t\t\tconst user = await this.db.query.users.findFirst({\n\t\t\t\twhere: eq(users.id, id)\n\t\t\t});\n\n\t\t\tif (!user)\n\t\t\t\treturn ServiceResponse.createRejectResponse(status.HTTP_404_NOT_FOUND, \"User not found\");\n\n\t\t\tif (withPassword)\n\t\t\t\treturn ServiceResponse.createResponse(status.HTTP_200_OK, \"User found successfully\", user);\n\n\t\t\tconst { password, ...userData } = user;\n\n\t\t\treturn ServiceResponse.createResponse(\n\t\t\t\tstatus.HTTP_200_OK,\n\t\t\t\t\"User found successfully\",\n\t\t\t\tuserData as UserSchemaType\n\t\t\t);\n\t\t} catch (error) {\n\t\t\treturn ServiceResponse.createErrorResponse(error);\n\t\t}\n\t}\n\n\tasync findUserByEmail(\n\t\temail: string,\n\t\twithPassword: boolean = false\n\t): Promise<ServiceApiResponse<UserSchemaType>> {\n\t\ttry {\n\t\t\tconst user = await this.db.query.users.findFirst({\n\t\t\t\twhere: eq(users.email, email)\n\t\t\t});\n\n\t\t\tif (!user)\n\t\t\t\treturn ServiceResponse.createRejectResponse(status.HTTP_404_NOT_FOUND, \"User not found\");\n\n\t\t\tif (withPassword)\n\t\t\t\treturn ServiceResponse.createResponse(status.HTTP_200_OK, \"User found successfully\", user);\n\n\t\t\tconst { password, ...userData } = user;\n\n\t\t\treturn ServiceResponse.createResponse(\n\t\t\t\tstatus.HTTP_200_OK,\n\t\t\t\t\"User found successfully\",\n\t\t\t\tuserData as UserSchemaType\n\t\t\t);\n\t\t} catch (error) {\n\t\t\treturn ServiceResponse.createErrorResponse(error);\n\t\t}\n\t}\n\n\tasync findUserByUsername(\n\t\tusername: string,\n\t\twithPassword: boolean = false\n\t): Promise<ServiceApiResponse<UserSchemaType>> {\n\t\ttry {\n\t\t\tconst user = await this.db.query.users.findFirst({\n\t\t\t\twhere: eq(users.username, username)\n\t\t\t});\n\n\t\t\tif (!user)\n\t\t\t\treturn ServiceResponse.createRejectResponse(status.HTTP_404_NOT_FOUND, \"User not found\");\n\n\t\t\tif (withPassword)\n\t\t\t\treturn ServiceResponse.createResponse(status.HTTP_200_OK, \"User found successfully\", user);\n\n\t\t\tconst { password, ...userData } = user;\n\n\t\t\treturn ServiceResponse.createResponse(\n\t\t\t\tstatus.HTTP_200_OK,\n\t\t\t\t\"User found successfully\",\n\t\t\t\tuserData as UserSchemaType\n\t\t\t);\n\t\t} catch (error) {\n\t\t\treturn ServiceResponse.createErrorResponse(error);\n\t\t}\n\t}\n\n\tasync duplicateUserCheckByEmail(email: string): Promise<ServiceApiResponse<boolean>> {\n\t\ttry {\n\t\t\tconst user = await this.db.query.users.findFirst({\n\t\t\t\twhere: eq(users.email, email)\n\t\t\t});\n\n\t\t\tif (user)\n\t\t\t\treturn ServiceResponse.createRejectResponse(\n\t\t\t\t\tstatus.HTTP_409_CONFLICT,\n\t\t\t\t\t\"User already exists\"\n\t\t\t\t);\n\n\t\t\treturn ServiceResponse.createResponse(status.HTTP_200_OK, \"User does not exist\", false);\n\t\t} catch (error) {\n\t\t\treturn ServiceResponse.createErrorResponse(error);\n\t\t}\n\t}\n\n\tasync duplicateUserCheckByUsername(username: string): Promise<ServiceApiResponse<boolean>> {\n\t\ttry {\n\t\t\tconst user = await this.db.query.users.findFirst({\n\t\t\t\twhere: eq(users.username, username)\n\t\t\t});\n\n\t\t\tif (user)\n\t\t\t\treturn ServiceResponse.createRejectResponse(\n\t\t\t\t\tstatus.HTTP_409_CONFLICT,\n\t\t\t\t\t\"User already exists\"\n\t\t\t\t);\n\n\t\t\treturn ServiceResponse.createResponse(status.HTTP_200_OK, \"User does not exist\", false);\n\t\t} catch (error) {\n\t\t\treturn ServiceResponse.createErrorResponse(error);\n\t\t}\n\t}\n\n\tasync passwordChecker(\n\t\tpassword: string,\n\t\thashedPassword: string | null\n\t): Promise<ServiceApiResponse<boolean>> {\n\t\ttry {\n\t\t\tif (!hashedPassword) {\n\t\t\t\treturn ServiceResponse.createRejectResponse(\n\t\t\t\t\tstatus.HTTP_400_BAD_REQUEST,\n\t\t\t\t\t\"User account has no password\"\n\t\t\t\t);\n\t\t\t}\n\t\t\tconst check = await bcrypt.compare(password, hashedPassword);\n\n\t\t\tif (!check)\n\t\t\t\treturn ServiceResponse.createRejectResponse(\n\t\t\t\t\tstatus.HTTP_400_BAD_REQUEST,\n\t\t\t\t\t\"Password incorrect\"\n\t\t\t\t);\n\n\t\t\treturn ServiceResponse.createResponse(status.HTTP_200_OK, \"Password checked\", check);\n\t\t} catch (error) {\n\t\t\treturn ServiceResponse.createErrorResponse(error);\n\t\t}\n\t}\n\n\tasync accountVerification(id: number): Promise<ServiceApiResponse<boolean>> {\n\t\ttry {\n\t\t\tawait this.db\n\t\t\t\t.update(users)\n\t\t\t\t.set({\n\t\t\t\t\temailVerified: new Date()\n\t\t\t\t})\n\t\t\t\t.where(eq(users.id, id));\n\n\t\t\treturn ServiceResponse.createResponse(status.HTTP_200_OK, \"User verified\", true);\n\t\t} catch (error) {\n\t\t\treturn ServiceResponse.createErrorResponse(error);\n\t\t}\n\t}\n\n\tasync checkAccountVerification(id: number): Promise<ServiceApiResponse<boolean>> {\n\t\ttry {\n\t\t\tconst user = await this.findUserById(id);\n\n\t\t\tif (!user.data?.emailVerified)\n\t\t\t\treturn ServiceResponse.createRejectResponse(\n\t\t\t\t\tstatus.HTTP_400_BAD_REQUEST,\n\t\t\t\t\t\"User is not verified\"\n\t\t\t\t);\n\n\t\t\treturn ServiceResponse.createResponse(status.HTTP_200_OK, \"User is verified\", true);\n\t\t} catch (error) {\n\t\t\treturn ServiceResponse.createErrorResponse(error);\n\t\t}\n\t}\n\n\tasync changePassword(id: number, newPassword: string): Promise<ServiceApiResponse<boolean>> {\n\t\ttry {\n\t\t\tconst hashedPassword = await bcrypt.hash(newPassword, 10);\n\n\t\t\tawait this.db\n\t\t\t\t.update(users)\n\t\t\t\t.set({\n\t\t\t\t\tpassword: hashedPassword\n\t\t\t\t})\n\t\t\t\t.where(eq(users.id, id));\n\n\t\t\treturn ServiceResponse.createResponse(\n\t\t\t\tstatus.HTTP_200_OK,\n\t\t\t\t\"Password changed successfully\",\n\t\t\t\ttrue\n\t\t\t);\n\t\t} catch (error) {\n\t\t\treturn ServiceResponse.createErrorResponse(error);\n\t\t}\n\t}\n}\n","export const origins = [\"http://localhost:3000\"];\nexport const sessionTimeout = 1000 * 60 * 60 * 24 * 7; // 1 week in milliseconds\nexport const csrfTimeout = 1000 * 60 * 60; // 5 seconds in milliseconds\n","import dotenv from \"dotenv\";\nimport { drizzle } from \"drizzle-orm/postgres-js\";\nimport postgres from \"postgres\";\n\nimport schema from \"@/databases/drizzle/schema\";\n\ndotenv.config();\n\nconst sql = postgres(process.env.DATABASE_URL);\nconst db = drizzle(sql, { schema });\n\nconst pool = postgres(process.env.DATABASE_URL, { max: 1 });\nexport const dbPool = drizzle(pool);\n\nexport default db;\n","import { relations } from \"drizzle-orm\";\nimport {\n\tinteger,\n\tpgEnum,\n\tpgTable,\n\tserial,\n\ttext,\n\ttimestamp,\n\tuniqueIndex\n} from \"drizzle-orm/pg-core\";\n\nimport { timestamps } from \"@/databases/drizzle/helpers\";\nimport { ROLE_LIST, TOKEN_LIST } from \"@/databases/drizzle/lists\";\n\nexport const ROLE_TYPE = pgEnum(\"role_type\", ROLE_LIST.enumValues);\n\nexport const TOKEN_TYPE = pgEnum(\"token_type\", TOKEN_LIST.enumValues);\n\nexport const users = pgTable(\"user\", {\n\tid: serial(\"id\").primaryKey(),\n\tname: text(\"name\"),\n\tusername: text(\"username\").unique(),\n\temail: text(\"email\").unique(),\n\tpassword: text(\"password\"),\n\temailVerified: timestamp(\"email_verified\", { withTimezone: true }),\n\timage: text(\"image\"),\n\trole: ROLE_TYPE(\"role\").default(\"SUBSCRIBER\"),\n\t...timestamps\n});\n\nexport const accounts = pgTable(\"account\", {\n\tid: serial(\"id\").primaryKey(),\n\tuserId: integer(\"user_id\")\n\t\t.notNull()\n\t\t.references(() => users.id, { onDelete: \"cascade\" }),\n\ttype: text(\"type\").notNull(),\n\tprovider: text(\"provider\").notNull(),\n\tproviderAccountId: text(\"provider_account_id\").notNull(),\n\trefreshToken: text(\"refresh_token\"),\n\taccessToken: text(\"access_token\"),\n\texpiresAt: integer(\"expires_at\"),\n\ttokenType: text(\"token_type\"),\n\tscope: text(\"scope\"),\n\tidToken: text(\"id_token\"),\n\tsessionState: text(\"session_state\"),\n\t...timestamps\n});\n\nexport const sessions = pgTable(\"session\", {\n\tid: serial(\"id\").primaryKey(),\n\tsessionId: text(\"session_id\").notNull().unique(),\n\tsessionCookie: text(\"session_cookie\").unique(),\n\tuserId: integer(\"user_id\").references(() => users.id, { onDelete: \"cascade\" }),\n\texpires: timestamp(\"expires\", { withTimezone: true }).notNull(),\n\t...timestamps\n});\n\nexport const verificationToken = pgTable(\n\t\"verification_token\",\n\t{\n\t\tid: serial(\"id\").primaryKey(),\n\t\tidentifier: text(\"identifier\").notNull(),\n\t\ttoken: text(\"token\").notNull(),\n\t\ttokenType: TOKEN_TYPE(\"token_type\").notNull(),\n\t\texpires: timestamp(\"expires\", { withTimezone: true }).notNull(),\n\t\t...timestamps\n\t},\n\ttable => ({\n\t\tidentifierTypeIdx: uniqueIndex(\"identifier_type_idx\").on(table.identifier, table.tokenType)\n\t})\n);\n\n// Relationships\nexport const usersRelations = relations(users, ({ many }) => ({\n\taccounts: many(accounts),\n\tsessions: many(sessions)\n}));\n\nexport const accountsRelations = relations(accounts, ({ one }) => ({\n\tuser: one(users, {\n\t\tfields: [accounts.userId],\n\t\treferences: [users.id]\n\t})\n}));\n\nexport const sessionsRelations = relations(sessions, ({ one }) => ({\n\tuser: one(users, {\n\t\tfields: [sessions.userId],\n\t\treferences: [users.id]\n\t})\n}));\n","import { timestamp } from \"drizzle-orm/pg-core\";\n\nexport const timestamps = {\n\tcreatedAt: timestamp(\"created_at\", { withTimezone: true }).notNull().defaultNow(),\n\tupdatedAt: timestamp(\"updated_at\", { withTimezone: true })\n\t\t.notNull()\n\t\t.defaultNow()\n\t\t.$onUpdate(() => new Date())\n};\n","export const ROLE_LIST = {\n\tSUPER_ADMIN: \"SUPER_ADMIN\",\n\tADMINISTRATOR: \"ADMINISTRATOR\",\n\tEDITOR: \"EDITOR\",\n\tAUTHOR: \"AUTHOR\",\n\tCONTRIBUTOR: \"CONTRIBUTOR\",\n\tSUBSCRIBER: \"SUBSCRIBER\",\n\tenumValues: [\"SUPER_ADMIN\", \"ADMINISTRATOR\", \"EDITOR\", \"AUTHOR\", \"CONTRIBUTOR\", \"SUBSCRIBER\"]\n} as const;\n\nexport const TOKEN_LIST = {\n\tPASSWORD_RESET: \"PASSWORD_RESET\",\n\tEMAIL_VERIFICATION: \"EMAIL_VERIFICATION\",\n\tLOGIN_OTP: \"LOGIN_OTP\",\n\tenumValues: [\"PASSWORD_RESET\", \"EMAIL_VERIFICATION\", \"LOGIN_OTP\"]\n} as const;\n","import { pgTable, serial, text, varchar } from \"drizzle-orm/pg-core\";\n\nimport { timestamps } from \"@/databases/drizzle/helpers\";\n\nexport const todo = pgTable(\"todo\", {\n\tid: serial(\"id\").primaryKey(),\n\ttitle: varchar(\"title\", { length: 255 }).notNull(),\n\tdescription: text(\"description\").notNull(),\n\t...timestamps\n});\n","import * as AuthenticationSchema from \"@/models/drizzle/authentication.model\";\nimport * as TodoSchema from \"@/models/drizzle/todo.model\";\n\nconst schema = {\n\t...TodoSchema,\n\t...AuthenticationSchema\n};\n\nexport default schema;\n","import db from \"@/databases/drizzle/connection\";\n\nexport default abstract class DrizzleService {\n\tprotected db: typeof db;\n\n\tconstructor() {\n\t\tthis.db = db;\n\t}\n}\n","import { and, eq } from \"drizzle-orm\";\n\nimport DrizzleService from \"@/databases/drizzle/service\";\nimport { TokenType, UserSchemaType } from \"@/databases/drizzle/types\";\nimport { verificationToken } from \"@/models/drizzle/authentication.model\";\nimport AppHelpers from \"@/utils/appHelpers\";\nimport { ServiceResponse } from \"@/utils/serviceApi\";\nimport { status } from \"@/utils/statusCodes\";\n\nexport default class OTPService extends DrizzleService {\n\tprivate async limitOTPRequest(\n\t\tuser: Partial<UserSchemaType>,\n\t\ttokenType: TokenType,\n\t\ttimeLimit: number = 5\n\t) {\n\t\ttry {\n\t\t\tconst otpRequestCount = await this.db.query.verificationToken.findFirst({\n\t\t\t\twhere: and(\n\t\t\t\t\teq(verificationToken.identifier, user.email!),\n\t\t\t\t\teq(verificationToken.tokenType, tokenType)\n\t\t\t\t)\n\t\t\t});\n\n\t\t\tconst currentMinute = new Date().getTime();\n\t\t\tconst otpRequestUpdateTime = new Date(otpRequestCount?.updatedAt!).getTime();\n\t\t\tconst timeDifference = currentMinute - otpRequestUpdateTime;\n\t\t\t// Convert it to human readable time\n\t\t\tconst timeDifferenceInMinutes = Math.floor(timeDifference / 60000);\n\t\t\tconsole.log(\"Time difference in minutes: \", timeDifferenceInMinutes);\n\n\t\t\tif (otpRequestCount && timeDifferenceInMinutes < timeLimit) {\n\t\t\t\tconst message = `You can only request OTP per ${timeLimit} minute(s). Please wait for ${timeLimit - timeDifferenceInMinutes} minute(s)`;\n\t\t\t\treturn ServiceResponse.createRejectResponse(status.HTTP_429_TOO_MANY_REQUESTS, message);\n\t\t\t}\n\n\t\t\treturn Promise.resolve(true);\n\t\t} catch (error) {\n\t\t\treturn ServiceResponse.createErrorResponse(error);\n\t\t}\n\t}\n\n\tasync saveOTPToDatabase(\n\t\tuser: Partial<UserSchemaType>,\n\t\ttokenType: TokenType,\n\t\texpiresAt: Date = AppHelpers.OTPExpiry()\n\t) {\n\t\ttry {\n\t\t\tif (!user.email)\n\t\t\t\treturn ServiceResponse.createRejectResponse(\n\t\t\t\t\tstatus.HTTP_404_NOT_FOUND,\n\t\t\t\t\t\"Email is not registered\"\n\t\t\t\t);\n\n\t\t\tawait this.limitOTPRequest(user, tokenType);\n\n\t\t\tconst generatedOTP = AppHelpers.OTPGenerator();\n\t\t\tawait this.db\n\t\t\t\t.insert(verificationToken)\n\t\t\t\t.values({\n\t\t\t\t\tidentifier: user.email,\n\t\t\t\t\ttoken: String(generatedOTP),\n\t\t\t\t\ttokenType,\n\t\t\t\t\texpires: expiresAt\n\t\t\t\t})\n\t\t\t\t.onConflictDoUpdate({\n\t\t\t\t\ttarget: [verificationToken.identifier, verificationToken.tokenType],\n\t\t\t\t\tset: {\n\t\t\t\t\t\ttoken: String(generatedOTP),\n\t\t\t\t\t\texpires: expiresAt\n\t\t\t\t\t}\n\t\t\t\t});\n\n\t\t\treturn Promise.resolve(generatedOTP);\n\t\t} catch (error) {\n\t\t\treturn ServiceResponse.createErrorResponse(error);\n\t\t}\n\t}\n\n\tasync verifyOTPFromDatabase(user: Partial<UserSchemaType>, otp: string, tokenType: TokenType) {\n\t\ttry {\n\t\t\tconst tokenRecord = await this.db.query.verificationToken.findFirst({\n\t\t\t\twhere: and(\n\t\t\t\t\teq(verificationToken.identifier, user.email!),\n\t\t\t\t\teq(verificationToken.token, otp),\n\t\t\t\t\teq(verificationToken.tokenType, tokenType)\n\t\t\t\t)\n\t\t\t});\n\n\t\t\tif (!tokenRecord)\n\t\t\t\treturn ServiceResponse.createRejectResponse(status.HTTP_400_BAD_REQUEST, \"Invalid OTP\");\n\n\t\t\tif (tokenRecord?.expires && tokenRecord.expires < new Date()) {\n\t\t\t\tawait this.deleteOTPFromDatabase(user, tokenType);\n\t\t\t\treturn ServiceResponse.createRejectResponse(status.HTTP_400_BAD_REQUEST, \"OTP expired\");\n\t\t\t}\n\n\t\t\tawait this.deleteOTPFromDatabase(user, tokenType);\n\n\t\t\treturn Promise.resolve(true);\n\t\t} catch (error) {\n\t\t\treturn ServiceResponse.createErrorResponse(error);\n\t\t}\n\t}\n\n\tasync deleteOTPFromDatabase(user: Partial<UserSchemaType>, tokenType: TokenType) {\n\t\ttry {\n\t\t\tawait this.db\n\t\t\t\t.delete(verificationToken)\n\t\t\t\t.where(\n\t\t\t\t\tand(\n\t\t\t\t\t\teq(verificationToken.identifier, user.email!),\n\t\t\t\t\t\teq(verificationToken.tokenType, tokenType)\n\t\t\t\t\t)\n\t\t\t\t);\n\n\t\t\treturn Promise.resolve(true);\n\t\t} catch (error) {\n\t\t\treturn ServiceResponse.createErrorResponse(error);\n\t\t}\n\t}\n}\n","import * as crypto from \"crypto\";\nimport { CookieOptions } from \"express\";\n\ninterface SameSiteCookieConfig {\n\tsameSite: CookieOptions[\"sameSite\"];\n\tsecure: boolean;\n\tdomain?: string;\n}\n\nexport default class AppHelpers {\n\t/**\n\t * Encodes a buffer into a base32 string.\n\t * @param buffer - The buffer to encode.\n\t * @returns The base32 encoded string.\n\t */\n\tprivate base32Encode(buffer: Buffer): string {\n\t\tconst alphabet = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ234567\"; // Base32 alphabet\n\t\tlet result = \"\";\n\t\tlet bits = 0;\n\t\tlet value = 0;\n\n\t\tfor (let i = 0; i < buffer.length; i++) {\n\t\t\tvalue = (value << 8) | buffer[i];\n\t\t\tbits += 8;\n\n\t\t\twhile (bits >= 5) {\n\t\t\t\tresult += alphabet[(value >>> (bits - 5)) & 31];\n\t\t\t\tbits -= 5;\n\t\t\t}\n\t\t}\n\n\t\tif (bits > 0) {\n\t\t\tresult += alphabet[(value << (5 - bits)) & 31];\n\t\t}\n\n\t\treturn result;\n\t}\n\n\t/**\n\t * Generates a token using the user information and a secret key.\n\t * @param userInfo - The user information to encrypt.\n\t * @param secretKey - The secret key to encrypt the user information.\n\t * @returns The generated token.\n\t */\n\tpublic generateToken(userId: number, secretKey: string): string {\n\t\t// 1. Generate a timestamp\n\t\tconst timestamp = new Date().toISOString();\n\n\t\t// 2. Combine timestamp and user information\n\t\tconst data = `${timestamp}:${userId}`;\n\t\tconst buffer = Buffer.from(data, \"utf-8\");\n\n\t\t// 3. Encrypt the data using AES\n\t\tconst algorithm = \"aes-256-cbc\";\n\t\tconst iv = crypto.randomBytes(16); // Initialization vector\n\t\tconst key = crypto.createHash(\"sha256\").update(secretKey).digest(); // Derive a 256-bit key\n\t\tconst cipher = crypto.createCipheriv(algorithm, key, iv);\n\t\tconst encrypted = Buffer.concat([cipher.update(buffer), cipher.final()]);\n\n\t\t// 4. Combine IV and encrypted data\n\t\tconst encryptedBuffer = Buffer.concat([iv, encrypted]);\n\n\t\t// 5. Encode to Base32\n\t\treturn this.base32Encode(encryptedBuffer);\n\t}\n\n\t/**\n\t * Determines if the input is an email or a username.\n\t * @param input - The user-provided input.\n\t * @returns \"email\" if the input is an email, \"username\" otherwise.\n\t */\n\tstatic detectInputType(input: string): \"EMAIL\" | \"USERNAME\" {\n\t\t// Regular expression to validate email format\n\t\tconst emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n\t\treturn emailRegex.test(input) ? \"EMAIL\" : \"USERNAME\";\n\t}\n\n\t/**\n\t * Generates a random OTP of the specified length.\n\t * @param length - The length of the OTP to generate.\n\t * @returns The generated OTP.\n\t * @throws An error if the length is less than 4.\n\t */\n\tstatic OTPGenerator(length: number = 4): number {\n\t\tif (length < 4) {\n\t\t\tthrow new Error(\"The OTP length must be at least 4.\");\n\t\t}\n\n\t\tconst min = Math.pow(10, length - 1);\n\t\tconst max = Math.pow(10, length) - 1;\n\t\treturn Math.floor(Math.random() * (max - min + 1) + min);\n\t}\n\n\t/**\n\t * Generate OTP expiry time.\n\t * @param expiryTime - The expiry time in minutes.\n\t * @returns The expiry time in Date format.\n\t */\n\tstatic OTPExpiry(expiryTime: number = 5): Date {\n\t\tconst now = new Date();\n\t\treturn new Date(now.getTime() + expiryTime * 60000);\n\t}\n\n\t/**\n\t * Determines the appropriate SameSite and secure settings for cookies based on the provided URLs.\n\t * @returns The SameSite and secure settings for cookies.\n\t */\n\tstatic sameSiteCookieConfig(): SameSiteCookieConfig {\n\t\ttry {\n\t\t\tconst appUrl = process.env.APP_URL;\n\t\t\tconst apiUrl =\n\t\t\t\tprocess.env.NODE_ENV === \"production\"\n\t\t\t\t\t? process.env.API_URL\n\t\t\t\t\t: `http://localhost:${process.env.PORT}`;\n\n\t\t\tconst appUrlObj = new URL(appUrl);\n\t\t\tconst apiUrlObj = new URL(apiUrl);\n\n\t\t\t// Extract the base domain (excluding subdomains)\n\t\t\tconst getBaseDomain = (hostname: string) => {\n\t\t\t\tconst parts = hostname.split(\".\");\n\t\t\t\treturn parts.slice(-2).join(\".\");\n\t\t\t};\n\n\t\t\tconst appBaseDomain = getBaseDomain(appUrlObj.hostname);\n\t\t\tconst apiBaseDomain = getBaseDomain(apiUrlObj.hostname);\n\n\t\t\tconst isSecure = appUrlObj.protocol === \"https:\" || apiUrlObj.protocol === \"https:\";\n\n\t\t\t// Determine domain value - only set if on same base domain\n\t\t\tlet domain: string | undefined;\n\t\t\tif (appBaseDomain === apiBaseDomain && !appUrlObj.hostname.includes(\"localhost\")) {\n\t\t\t\tdomain = \".\" + appBaseDomain;\n\t\t\t}\n\n\t\t\t// For localhost, set the exact hostname\n\t\t\tif (apiUrlObj.hostname.includes(\"localhost\")) {\n\t\t\t\tdomain = apiUrlObj.hostname;\n\t\t\t}\n\n\t\t\t// Determine sameSite value\n\t\t\tlet sameSite: CookieOptions[\"sameSite\"];\n\t\t\tif (appBaseDomain === apiBaseDomain) {\n\t\t\t\tsameSite = \"strict\";\n\t\t\t} else if (\n\t\t\t\tappUrlObj.hostname.includes(\"localhost\") &&\n\t\t\t\tapiUrlObj.hostname.includes(\"localhost\")\n\t\t\t) {\n\t\t\t\tsameSite = \"lax\";\n\t\t\t} else {\n\t\t\t\tsameSite = \"none\";\n\t\t\t}\n\n\t\t\treturn {\n\t\t\t\tsameSite,\n\t\t\t\tsecure: isSecure,\n\t\t\t\tdomain\n\t\t\t};\n\t\t} catch (error) {\n\t\t\treturn {\n\t\t\t\tsameSite: \"lax\",\n\t\t\t\tsecure: true\n\t\t\t};\n\t\t}\n\t}\n}\n","export const status = {\n\tHTTP_100_CONTINUE: 100,\n\tHTTP_101_SWITCHING_PROTOCOLS: 101,\n\tHTTP_102_PROCESSING: 102,\n\tHTTP_103_EARLY_HINTS: 103,\n\tHTTP_200_OK: 200,\n\tHTTP_201_CREATED: 201,\n\tHTTP_202_ACCEPTED: 202,\n\tHTTP_203_NON_AUTHORITATIVE_INFORMATION: 203,\n\tHTTP_204_NO_DATA: 204,\n\tHTTP_205_RESET_DATA: 205,\n\tHTTP_206_PARTIAL_DATA: 206,\n\tHTTP_207_MULTI_STATUS: 207,\n\tHTTP_208_ALREADY_REPORTED: 208,\n\tHTTP_226_IM_USED: 226,\n\tHTTP_300_MULTIPLE_CHOICES: 300,\n\tHTTP_301_MOVED_PERMANENTLY: 301,\n\tHTTP_302_FOUND: 302,\n\tHTTP_303_SEE_OTHER: 303,\n\tHTTP_304_NOT_MODIFIED: 304,\n\tHTTP_305_USE_PROXY: 305,\n\tHTTP_306_SWITCH_PROXY: 306,\n\tHTTP_307_TEMPORARY_REDIRECT: 307,\n\tHTTP_308_PERMANENT_REDIRECT: 308,\n\tHTTP_400_BAD_REQUEST: 400,\n\tHTTP_401_UNAUTHORIZED: 401,\n\tHTTP_402_PAYMENT_REQUIRED: 402,\n\tHTTP_403_FORBIDDEN: 403,\n\tHTTP_404_NOT_FOUND: 404,\n\tHTTP_405_METHOD_NOT_ALLOWED: 405,\n\tHTTP_406_NOT_ACCEPTABLE: 406,\n\tHTTP_407_PROXY_AUTHENTICATION_REQUIRED: 407,\n\tHTTP_408_REQUEST_TIMEOUT: 408,\n\tHTTP_409_CONFLICT: 409,\n\tHTTP_410_GONE: 410,\n\tHTTP_411_LENGTH_REQUIRED: 411,\n\tHTTP_412_PRECONDITION_FAILED: 412,\n\tHTTP_413_PAYLOAD_TOO_LARGE: 413,\n\tHTTP_414_URI_TOO_LONG: 414,\n\tHTTP_415_UNSUPPORTED_MEDIA_TYPE: 415,\n\tHTTP_416_RANGE_NOT_SATISFIABLE: 416,\n\tHTTP_417_EXPECTATION_FAILED: 417,\n\tHTTP_418_IM_A_TEAPOT: 418,\n\tHTTP_421_MISDIRECTED_REQUEST: 421,\n\tHTTP_422_UNPROCESSABLE_ENTITY: 422,\n\tHTTP_423_LOCKED: 423,\n\tHTTP_424_FAILED_DEPENDENCY: 424,\n\tHTTP_425_TOO_EARLY: 425,\n\tHTTP_426_UPGRADE_REQUIRED: 426,\n\tHTTP_428_PRECONDITION_REQUIRED: 428,\n\tHTTP_429_TOO_MANY_REQUESTS: 429,\n\tHTTP_431_REQUEST_HEADER_FIELDS_TOO_LARGE: 431,\n\tHTTP_451_UNAVAILABLE_FOR_LEGAL_REASONS: 451,\n\tHTTP_500_INTERNAL_SERVER_ERROR: 500,\n\tHTTP_501_NOT_IMPLEMENTED: 501,\n\tHTTP_502_BAD_GATEWAY: 502,\n\tHTTP_503_SERVICE_UNAVAILABLE: 503,\n\tHTTP_504_GATEWAY_TIMEOUT: 504,\n\tHTTP_505_HTTP_VERSION_NOT_SUPPORTED: 505,\n\tHTTP_506_VARIANT_ALSO_NEGOTIATES: 506,\n\tHTTP_507_INSUFFICIENT_STORAGE: 507,\n\tHTTP_508_LOOP_DETECTED: 508,\n\tHTTP_510_NOT_EXTENDED: 510,\n\tHTTP_511_NETWORK_AUTHENTICATION_REQUIRED: 511\n};\n","import { Response } from \"express\";\n\nimport { status } from \"@/utils/statusCodes\";\n\n// Create a type from the status object values\ntype HttpStatusCode = (typeof status)[keyof typeof status];\n\n// Stricter Pagination interface with required fields\nexport interface Pagination {\n\ttotalItems: number;\n\tlimit: number;\n\toffset: number;\n\tcurrentPage: number;\n\ttotalPages: number;\n\thasPrevPage: boolean;\n\thasNextPage: boolean;\n\tprevPage: number | null;\n\tnextPage: number | null;\n}\n\n// Base interface for API responses\ninterface BaseApiResponse {\n\tstatus: HttpStatusCode;\n\tmessage: string;\n}\n\n// Generic response interfaces with strict typing\nexport interface ServiceApiResponse<T> extends BaseApiResponse {\n\tdata: T;\n\tpagination?: Pagination;\n}\n\nexport interface ServiceSendApiResponse<T> extends BaseApiResponse {\n\tdata?: T;\n\tpagination?: Pagination;\n}\n\n// Error type definitions\nexport interface ApiError extends BaseApiResponse {\n\terror?: string;\n}\n\nconst isApiError = (error: unknown): error is ApiError => {\n\treturn (\n\t\terror !== null &&\n\t\ttypeof error === \"object\" &&\n\t\t\"status\" in error &&\n\t\ttypeof (error as ApiError).status === \"number\" &&\n\t\t\"message\" in error &&\n\t\ttypeof (error as ApiError).message === \"string\"\n\t);\n};\n\nconst NO_CONTENT_STATUSES = new Set([status.HTTP_204_NO_DATA]);\n\nexport class ServiceResponse {\n\tstatic async createResponse<T>(\n\t\tstatus: HttpStatusCode,\n\t\tmessage: string,\n\t\tdata: T,\n\t\tpagination?: Pagination\n\t): Promise<ServiceApiResponse<T>> {\n\t\tif (NO_CONTENT_STATUSES.has(status)) {\n\t\t\treturn Promise.resolve({ status, message, data: undefined as T });\n\t\t}\n\t\treturn Promise.resolve({ status, message, data, pagination });\n\t}\n\n\tstatic async createRejectResponse<T>(\n\t\tstatus: HttpStatusCode,\n\t\tmessage: string\n\t): Promise<ServiceApiResponse<T>> {\n\t\treturn Promise.reject({ status, message });\n\t}\n\n\tstatic createErrorResponse(error: unknown): Promise<never> {\n\t\tconsole.error(\"Error:\", error instanceof Error ? error.message : error);\n\n\t\tif (isApiError(error)) return Promise.reject(error);\n\n\t\treturn Promise.reject({\n\t\t\tstatus: status.HTTP_500_INTERNAL_SERVER_ERROR,\n\t\t\tmessage: \"Internal Server Error\"\n\t\t});\n\t}\n}\n\nexport class ApiResponse {\n\tprivate readonly response: Response;\n\n\tconstructor(response: Response) {\n\t\tthis.response = response;\n\t}\n\n\tsuccessResponse<T>(message: string, data?: T, pagination?: Pagination) {\n\t\treturn this.sendResponse<T>({\n\t\t\tstatus: status.HTTP_200_OK,\n\t\t\tmessage,\n\t\t\tdata,\n\t\t\tpagination\n\t\t});\n\t}\n\n\tunauthorizedResponse(message: string) {\n\t\treturn this.sendResponse({\n\t\t\tstatus: status.HTTP_401_UNAUTHORIZED,\n\t\t\tmessage\n\t\t});\n\t}\n\n\tforbiddenResponse(message: string) {\n\t\treturn this.sendResponse({\n\t\t\tstatus: status.HTTP_403_FORBIDDEN,\n\t\t\tmessage\n\t\t});\n\t}\n\n\tbadResponse(message: string) {\n\t\treturn this.sendResponse({\n\t\t\tstatus: status.HTTP_400_BAD_REQUEST,\n\t\t\tmessage\n\t\t});\n\t}\n\n\tinternalServerError(message: string = \"Internal Server Error\") {\n\t\treturn this.sendResponse({\n\t\t\tstatus: status.HTTP_500_INTERNAL_SERVER_ERROR,\n\t\t\tmessage\n\t\t});\n\t}\n\n\tsendResponse<T>({ status, message, data, pagination }: ServiceSendApiResponse<T>): Response {\n\t\tif (NO_CONTENT_STATUSES.has(status)) {\n\t\t\treturn this.response.status(status).json({});\n\t\t}\n\n\t\tconst responseBody: Partial<ServiceSendApiResponse<T>> = { status, message };\n\n\t\tif (data !== undefined) {\n\t\t\tresponseBody.data = data;\n\t\t}\n\n\t\tif (pagination) {\n\t\t\tresponseBody.pagination = pagination;\n\t\t}\n\n\t\treturn this.response.status(status).json(responseBody);\n\t}\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA,sBAAqB;AACrB,4BAAyB;;;ACFzB,oBAAmB;AACnB,IAAAA,sBAAwB;;;ACAjB,IAAM,iBAAiB,MAAO,KAAK,KAAK,KAAK;AAC7C,IAAM,cAAc,MAAO,KAAK;;;ACFvC,oBAAmB;AACnB,yBAAwB;AACxB,sBAAqB;;;ACFrB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yBAA0B;AAC1B,IAAAC,kBAQO;;;ACTP,qBAA0B;AAEnB,IAAM,aAAa;AAAA,EACzB,eAAW,0BAAU,cAAc,EAAE,cAAc,KAAK,CAAC,EAAE,QAAQ,EAAE,WAAW;AAAA,EAChF,eAAW,0BAAU,cAAc,EAAE,cAAc,KAAK,CAAC,EACvD,QAAQ,EACR,WAAW,EACX,UAAU,MAAM,oBAAI,KAAK,CAAC;AAC7B;;;ACRO,IAAM,YAAY;AAAA,EACxB,aAAa;AAAA,EACb,eAAe;AAAA,EACf,QAAQ;AAAA,EACR,QAAQ;AAAA,EACR,aAAa;AAAA,EACb,YAAY;AAAA,EACZ,YAAY,CAAC,eAAe,iBAAiB,UAAU,UAAU,eAAe,YAAY;AAC7F;AAEO,IAAM,aAAa;AAAA,EACzB,gBAAgB;AAAA,EAChB,oBAAoB;AAAA,EACpB,WAAW;AAAA,EACX,YAAY,CAAC,kBAAkB,sBAAsB,WAAW;AACjE;;;AFDO,IAAM,gBAAY,wBAAO,aAAa,UAAU,UAAU;AAE1D,IAAM,iBAAa,wBAAO,cAAc,WAAW,UAAU;AAE7D,IAAM,YAAQ,yBAAQ,QAAQ;AAAA,EACpC,QAAI,wBAAO,IAAI,EAAE,WAAW;AAAA,EAC5B,UAAM,sBAAK,MAAM;AAAA,EACjB,cAAU,sBAAK,UAAU,EAAE,OAAO;AAAA,EAClC,WAAO,sBAAK,OAAO,EAAE,OAAO;AAAA,EAC5B,cAAU,sBAAK,UAAU;AAAA,EACzB,mBAAe,2BAAU,kBAAkB,EAAE,cAAc,KAAK,CAAC;AAAA,EACjE,WAAO,sBAAK,OAAO;AAAA,EACnB,MAAM,UAAU,MAAM,EAAE,QAAQ,YAAY;AAAA,EAC5C,GAAG;AACJ,CAAC;AAEM,IAAM,eAAW,yBAAQ,WAAW;AAAA,EAC1C,QAAI,wBAAO,IAAI,EAAE,WAAW;AAAA,EAC5B,YAAQ,yBAAQ,SAAS,EACvB,QAAQ,EACR,WAAW,MAAM,MAAM,IAAI,EAAE,UAAU,UAAU,CAAC;AAAA,EACpD,UAAM,sBAAK,MAAM,EAAE,QAAQ;AAAA,EAC3B,cAAU,sBAAK,UAAU,EAAE,QAAQ;AAAA,EACnC,uBAAmB,sBAAK,qBAAqB,EAAE,QAAQ;AAAA,EACvD,kBAAc,sBAAK,eAAe;AAAA,EAClC,iBAAa,sBAAK,cAAc;AAAA,EAChC,eAAW,yBAAQ,YAAY;AAAA,EAC/B,eAAW,sBAAK,YAAY;AAAA,EAC5B,WAAO,sBAAK,OAAO;AAAA,EACnB,aAAS,sBAAK,UAAU;AAAA,EACxB,kBAAc,sBAAK,eAAe;AAAA,EAClC,GAAG;AACJ,CAAC;AAEM,IAAM,eAAW,yBAAQ,WAAW;AAAA,EAC1C,QAAI,wBAAO,IAAI,EAAE,WAAW;AAAA,EAC5B,eAAW,sBAAK,YAAY,EAAE,QAAQ,EAAE,OAAO;AAAA,EAC/C,mBAAe,sBAAK,gBAAgB,EAAE,OAAO;AAAA,EAC7C,YAAQ,yBAAQ,SAAS,EAAE,WAAW,MAAM,MAAM,IAAI,EAAE,UAAU,UAAU,CAAC;AAAA,EAC7E,aAAS,2BAAU,WAAW,EAAE,cAAc,KAAK,CAAC,EAAE,QAAQ;AAAA,EAC9D,GAAG;AACJ,CAAC;AAEM,IAAM,wBAAoB;AAAA,EAChC;AAAA,EACA;AAAA,IACC,QAAI,wBAAO,IAAI,EAAE,WAAW;AAAA,IAC5B,gBAAY,sBAAK,YAAY,EAAE,QAAQ;AAAA,IACvC,WAAO,sBAAK,OAAO,EAAE,QAAQ;AAAA,IAC7B,WAAW,WAAW,YAAY,EAAE,QAAQ;AAAA,IAC5C,aAAS,2BAAU,WAAW,EAAE,cAAc,KAAK,CAAC,EAAE,QAAQ;AAAA,IAC9D,GAAG;AAAA,EACJ;AAAA,EACA,YAAU;AAAA,IACT,uBAAmB,6BAAY,qBAAqB,EAAE,GAAG,MAAM,YAAY,MAAM,SAAS;AAAA,EAC3F;AACD;AAGO,IAAM,qBAAiB,8BAAU,OAAO,CAAC,EAAE,KAAK,OAAO;AAAA,EAC7D,UAAU,KAAK,QAAQ;AAAA,EACvB,UAAU,KAAK,QAAQ;AACxB,EAAE;AAEK,IAAM,wBAAoB,8BAAU,UAAU,CAAC,EAAE,IAAI,OAAO;AAAA,EAClE,MAAM,IAAI,OAAO;AAAA,IAChB,QAAQ,CAAC,SAAS,MAAM;AAAA,IACxB,YAAY,CAAC,MAAM,EAAE;AAAA,EACtB,CAAC;AACF,EAAE;AAEK,IAAM,wBAAoB,8BAAU,UAAU,CAAC,EAAE,IAAI,OAAO;AAAA,EAClE,MAAM,IAAI,OAAO;AAAA,IAChB,QAAQ,CAAC,SAAS,MAAM;AAAA,IACxB,YAAY,CAAC,MAAM,EAAE;AAAA,EACtB,CAAC;AACF,EAAE;;;AG1FF;AAAA;AAAA;AAAA;AAAA,IAAAC,kBAA+C;AAIxC,IAAM,WAAO,yBAAQ,QAAQ;AAAA,EACnC,QAAI,wBAAO,IAAI,EAAE,WAAW;AAAA,EAC5B,WAAO,yBAAQ,SAAS,EAAE,QAAQ,IAAI,CAAC,EAAE,QAAQ;AAAA,EACjD,iBAAa,sBAAK,aAAa,EAAE,QAAQ;AAAA,EACzC,GAAG;AACJ,CAAC;;;ACND,IAAM,SAAS;AAAA,EACd,GAAG;AAAA,EACH,GAAG;AACJ;AAEA,IAAO,iBAAQ;;;ALFf,cAAAC,QAAO,OAAO;AAEd,IAAM,UAAM,gBAAAC,SAAS,QAAQ,IAAI,YAAY;AAC7C,IAAM,SAAK,4BAAQ,KAAK,EAAE,uBAAO,CAAC;AAElC,IAAM,WAAO,gBAAAA,SAAS,QAAQ,IAAI,cAAc,EAAE,KAAK,EAAE,CAAC;AACnD,IAAM,aAAS,4BAAQ,IAAI;AAElC,IAAO,qBAAQ;;;AMZf,IAA8B,iBAA9B,MAA6C;AAAA,EAClC;AAAA,EAEV,cAAc;AACb,SAAK,KAAK;AAAA,EACX;AACD;;;ACRA,IAAAC,sBAAwB;;;ACAxB,aAAwB;AASxB,IAAqB,aAArB,MAAgC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAMvB,aAAa,QAAwB;AAC5C,UAAM,WAAW;AACjB,QAAI,SAAS;AACb,QAAI,OAAO;AACX,QAAI,QAAQ;AAEZ,aAAS,IAAI,GAAG,IAAI,OAAO,QAAQ,KAAK;AACvC,cAAS,SAAS,IAAK,OAAO,CAAC;AAC/B,cAAQ;AAER,aAAO,QAAQ,GAAG;AACjB,kBAAU,SAAU,UAAW,OAAO,IAAM,EAAE;AAC9C,gBAAQ;AAAA,MACT;AAAA,IACD;AAEA,QAAI,OAAO,GAAG;AACb,gBAAU,SAAU,SAAU,IAAI,OAAS,EAAE;AAAA,IAC9C;AAEA,WAAO;AAAA,EACR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQO,cAAc,QAAgB,WAA2B;AAE/D,UAAMC,cAAY,oBAAI,KAAK,GAAE,YAAY;AAGzC,UAAM,OAAO,GAAGA,UAAS,IAAI,MAAM;AACnC,UAAM,SAAS,OAAO,KAAK,MAAM,OAAO;AAGxC,UAAM,YAAY;AAClB,UAAM,KAAY,mBAAY,EAAE;AAChC,UAAM,MAAa,kBAAW,QAAQ,EAAE,OAAO,SAAS,EAAE,OAAO;AACjE,UAAM,SAAgB,sBAAe,WAAW,KAAK,EAAE;AACvD,UAAM,YAAY,OAAO,OAAO,CAAC,OAAO,OAAO,MAAM,GAAG,OAAO,MAAM,CAAC,CAAC;AAGvE,UAAM,kBAAkB,OAAO,OAAO,CAAC,IAAI,SAAS,CAAC;AAGrD,WAAO,KAAK,aAAa,eAAe;AAAA,EACzC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,OAAO,gBAAgB,OAAqC;AAE3D,UAAM,aAAa;AACnB,WAAO,WAAW,KAAK,KAAK,IAAI,UAAU;AAAA,EAC3C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,OAAO,aAAa,SAAiB,GAAW;AAC/C,QAAI,SAAS,GAAG;AACf,YAAM,IAAI,MAAM,oCAAoC;AAAA,IACrD;AAEA,UAAM,MAAM,KAAK,IAAI,IAAI,SAAS,CAAC;AACnC,UAAM,MAAM,KAAK,IAAI,IAAI,MAAM,IAAI;AACnC,WAAO,KAAK,MAAM,KAAK,OAAO,KAAK,MAAM,MAAM,KAAK,GAAG;AAAA,EACxD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,OAAO,UAAU,aAAqB,GAAS;AAC9C,UAAM,MAAM,oBAAI,KAAK;AACrB,WAAO,IAAI,KAAK,IAAI,QAAQ,IAAI,aAAa,GAAK;AAAA,EACnD;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA,OAAO,uBAA6C;AACnD,QAAI;AACH,YAAM,SAAS,QAAQ,IAAI;AAC3B,YAAM,SACL,OACG,QAAQ,IAAI,UACZ,oBAAoB,QAAQ,IAAI,IAAI;AAExC,YAAM,YAAY,IAAI,IAAI,MAAM;AAChC,YAAM,YAAY,IAAI,IAAI,MAAM;AAGhC,YAAM,gBAAgB,CAAC,aAAqB;AAC3C,cAAM,QAAQ,SAAS,MAAM,GAAG;AAChC,eAAO,MAAM,MAAM,EAAE,EAAE,KAAK,GAAG;AAAA,MAChC;AAEA,YAAM,gBAAgB,cAAc,UAAU,QAAQ;AACtD,YAAM,gBAAgB,cAAc,UAAU,QAAQ;AAEtD,YAAM,WAAW,UAAU,aAAa,YAAY,UAAU,aAAa;AAG3E,UAAI;AACJ,UAAI,kBAAkB,iBAAiB,CAAC,UAAU,SAAS,SAAS,WAAW,GAAG;AACjF,iBAAS,MAAM;AAAA,MAChB;AAGA,UAAI,UAAU,SAAS,SAAS,WAAW,GAAG;AAC7C,iBAAS,UAAU;AAAA,MACpB;AAGA,UAAI;AACJ,UAAI,kBAAkB,eAAe;AACpC,mBAAW;AAAA,MACZ,WACC,UAAU,SAAS,SAAS,WAAW,KACvC,UAAU,SAAS,SAAS,WAAW,GACtC;AACD,mBAAW;AAAA,MACZ,OAAO;AACN,mBAAW;AAAA,MACZ;AAEA,aAAO;AAAA,QACN;AAAA,QACA,QAAQ;AAAA,QACR;AAAA,MACD;AAAA,IACD,SAAS,OAAO;AACf,aAAO;AAAA,QACN,UAAU;AAAA,QACV,QAAQ;AAAA,MACT;AAAA,IACD;AAAA,EACD;AACD;;;ACrKO,IAAM,SAAS;AAAA,EACrB,mBAAmB;AAAA,EACnB,8BAA8B;AAAA,EAC9B,qBAAqB;AAAA,EACrB,sBAAsB;AAAA,EACtB,aAAa;AAAA,EACb,kBAAkB;AAAA,EAClB,mBAAmB;AAAA,EACnB,wCAAwC;AAAA,EACxC,kBAAkB;AAAA,EAClB,qBAAqB;AAAA,EACrB,uBAAuB;AAAA,EACvB,uBAAuB;AAAA,EACvB,2BAA2B;AAAA,EAC3B,kBAAkB;AAAA,EAClB,2BAA2B;AAAA,EAC3B,4BAA4B;AAAA,EAC5B,gBAAgB;AAAA,EAChB,oBAAoB;AAAA,EACpB,uBAAuB;AAAA,EACvB,oBAAoB;AAAA,EACpB,uBAAuB;AAAA,EACvB,6BAA6B;AAAA,EAC7B,6BAA6B;AAAA,EAC7B,sBAAsB;AAAA,EACtB,uBAAuB;AAAA,EACvB,2BAA2B;AAAA,EAC3B,oBAAoB;AAAA,EACpB,oBAAoB;AAAA,EACpB,6BAA6B;AAAA,EAC7B,yBAAyB;AAAA,EACzB,wCAAwC;AAAA,EACxC,0BAA0B;AAAA,EAC1B,mBAAmB;AAAA,EACnB,eAAe;AAAA,EACf,0BAA0B;AAAA,EAC1B,8BAA8B;AAAA,EAC9B,4BAA4B;AAAA,EAC5B,uBAAuB;AAAA,EACvB,iCAAiC;AAAA,EACjC,gCAAgC;AAAA,EAChC,6BAA6B;AAAA,EAC7B,sBAAsB;AAAA,EACtB,8BAA8B;AAAA,EAC9B,+BAA+B;AAAA,EAC/B,iBAAiB;AAAA,EACjB,4BAA4B;AAAA,EAC5B,oBAAoB;AAAA,EACpB,2BAA2B;AAAA,EAC3B,gCAAgC;AAAA,EAChC,4BAA4B;AAAA,EAC5B,0CAA0C;AAAA,EAC1C,wCAAwC;AAAA,EACxC,gCAAgC;AAAA,EAChC,0BAA0B;AAAA,EAC1B,sBAAsB;AAAA,EACtB,8BAA8B;AAAA,EAC9B,0BAA0B;AAAA,EAC1B,qCAAqC;AAAA,EACrC,kCAAkC;AAAA,EAClC,+BAA+B;AAAA,EAC/B,wBAAwB;AAAA,EACxB,uBAAuB;AAAA,EACvB,0CAA0C;AAC3C;;;ACtBA,IAAM,aAAa,CAAC,UAAsC;AACzD,SACC,UAAU,QACV,OAAO,UAAU,YACjB,YAAY,SACZ,OAAQ,MAAmB,WAAW,YACtC,aAAa,SACb,OAAQ,MAAmB,YAAY;AAEzC;AAEA,IAAM,sBAAsB,oBAAI,IAAI,CAAC,OAAO,gBAAgB,CAAC;AAEtD,IAAM,kBAAN,MAAsB;AAAA,EAC5B,aAAa,eACZC,SACA,SACA,MACA,YACiC;AACjC,QAAI,oBAAoB,IAAIA,OAAM,GAAG;AACpC,aAAO,QAAQ,QAAQ,EAAE,QAAAA,SAAQ,SAAS,MAAM,OAAe,CAAC;AAAA,IACjE;AACA,WAAO,QAAQ,QAAQ,EAAE,QAAAA,SAAQ,SAAS,MAAM,WAAW,CAAC;AAAA,EAC7D;AAAA,EAEA,aAAa,qBACZA,SACA,SACiC;AACjC,WAAO,QAAQ,OAAO,EAAE,QAAAA,SAAQ,QAAQ,CAAC;AAAA,EAC1C;AAAA,EAEA,OAAO,oBAAoB,OAAgC;AAC1D,YAAQ,MAAM,UAAU,iBAAiB,QAAQ,MAAM,UAAU,KAAK;AAEtE,QAAI,WAAW,KAAK,EAAG,QAAO,QAAQ,OAAO,KAAK;AAElD,WAAO,QAAQ,OAAO;AAAA,MACrB,QAAQ,OAAO;AAAA,MACf,SAAS;AAAA,IACV,CAAC;AAAA,EACF;AACD;AAEO,IAAM,cAAN,MAAkB;AAAA,EACP;AAAA,EAEjB,YAAY,UAAoB;AAC/B,SAAK,WAAW;AAAA,EACjB;AAAA,EAEA,gBAAmB,SAAiB,MAAU,YAAyB;AACtE,WAAO,KAAK,aAAgB;AAAA,MAC3B,QAAQ,OAAO;AAAA,MACf;AAAA,MACA;AAAA,MACA;AAAA,IACD,CAAC;AAAA,EACF;AAAA,EAEA,qBAAqB,SAAiB;AACrC,WAAO,KAAK,aAAa;AAAA,MACxB,QAAQ,OAAO;AAAA,MACf;AAAA,IACD,CAAC;AAAA,EACF;AAAA,EAEA,kBAAkB,SAAiB;AAClC,WAAO,KAAK,aAAa;AAAA,MACxB,QAAQ,OAAO;AAAA,MACf;AAAA,IACD,CAAC;AAAA,EACF;AAAA,EAEA,YAAY,SAAiB;AAC5B,WAAO,KAAK,aAAa;AAAA,MACxB,QAAQ,OAAO;AAAA,MACf;AAAA,IACD,CAAC;AAAA,EACF;AAAA,EAEA,oBAAoB,UAAkB,yBAAyB;AAC9D,WAAO,KAAK,aAAa;AAAA,MACxB,QAAQ,OAAO;AAAA,MACf;AAAA,IACD,CAAC;AAAA,EACF;AAAA,EAEA,aAAgB,EAAE,QAAAA,SAAQ,SAAS,MAAM,WAAW,GAAwC;AAC3F,QAAI,oBAAoB,IAAIA,OAAM,GAAG;AACpC,aAAO,KAAK,SAAS,OAAOA,OAAM,EAAE,KAAK,CAAC,CAAC;AAAA,IAC5C;AAEA,UAAM,eAAmD,EAAE,QAAAA,SAAQ,QAAQ;AAE3E,QAAI,SAAS,QAAW;AACvB,mBAAa,OAAO;AAAA,IACrB;AAEA,QAAI,YAAY;AACf,mBAAa,aAAa;AAAA,IAC3B;AAEA,WAAO,KAAK,SAAS,OAAOA,OAAM,EAAE,KAAK,YAAY;AAAA,EACtD;AACD;;;AH3IA,IAAqB,aAArB,cAAwC,eAAe;AAAA,EACtD,MAAc,gBACb,MACA,WACA,YAAoB,GACnB;AACD,QAAI;AACH,YAAM,kBAAkB,MAAM,KAAK,GAAG,MAAM,kBAAkB,UAAU;AAAA,QACvE,WAAO;AAAA,cACN,wBAAG,kBAAkB,YAAY,KAAK,KAAM;AAAA,cAC5C,wBAAG,kBAAkB,WAAW,SAAS;AAAA,QAC1C;AAAA,MACD,CAAC;AAED,YAAM,iBAAgB,oBAAI,KAAK,GAAE,QAAQ;AACzC,YAAM,uBAAuB,IAAI,KAAK,iBAAiB,SAAU,EAAE,QAAQ;AAC3E,YAAM,iBAAiB,gBAAgB;AAEvC,YAAM,0BAA0B,KAAK,MAAM,iBAAiB,GAAK;AACjE,cAAQ,IAAI,gCAAgC,uBAAuB;AAEnE,UAAI,mBAAmB,0BAA0B,WAAW;AAC3D,cAAM,UAAU,gCAAgC,SAAS,+BAA+B,YAAY,uBAAuB;AAC3H,eAAO,gBAAgB,qBAAqB,OAAO,4BAA4B,OAAO;AAAA,MACvF;AAEA,aAAO,QAAQ,QAAQ,IAAI;AAAA,IAC5B,SAAS,OAAO;AACf,aAAO,gBAAgB,oBAAoB,KAAK;AAAA,IACjD;AAAA,EACD;AAAA,EAEA,MAAM,kBACL,MACA,WACA,YAAkB,WAAW,UAAU,GACtC;AACD,QAAI;AACH,UAAI,CAAC,KAAK;AACT,eAAO,gBAAgB;AAAA,UACtB,OAAO;AAAA,UACP;AAAA,QACD;AAED,YAAM,KAAK,gBAAgB,MAAM,SAAS;AAE1C,YAAM,eAAe,WAAW,aAAa;AAC7C,YAAM,KAAK,GACT,OAAO,iBAAiB,EACxB,OAAO;AAAA,QACP,YAAY,KAAK;AAAA,QACjB,OAAO,OAAO,YAAY;AAAA,QAC1B;AAAA,QACA,SAAS;AAAA,MACV,CAAC,EACA,mBAAmB;AAAA,QACnB,QAAQ,CAAC,kBAAkB,YAAY,kBAAkB,SAAS;AAAA,QAClE,KAAK;AAAA,UACJ,OAAO,OAAO,YAAY;AAAA,UAC1B,SAAS;AAAA,QACV;AAAA,MACD,CAAC;AAEF,aAAO,QAAQ,QAAQ,YAAY;AAAA,IACpC,SAAS,OAAO;AACf,aAAO,gBAAgB,oBAAoB,KAAK;AAAA,IACjD;AAAA,EACD;AAAA,EAEA,MAAM,sBAAsB,MAA+B,KAAa,WAAsB;AAC7F,QAAI;AACH,YAAM,cAAc,MAAM,KAAK,GAAG,MAAM,kBAAkB,UAAU;AAAA,QACnE,WAAO;AAAA,cACN,wBAAG,kBAAkB,YAAY,KAAK,KAAM;AAAA,cAC5C,wBAAG,kBAAkB,OAAO,GAAG;AAAA,cAC/B,wBAAG,kBAAkB,WAAW,SAAS;AAAA,QAC1C;AAAA,MACD,CAAC;AAED,UAAI,CAAC;AACJ,eAAO,gBAAgB,qBAAqB,OAAO,sBAAsB,aAAa;AAEvF,UAAI,aAAa,WAAW,YAAY,UAAU,oBAAI,KAAK,GAAG;AAC7D,cAAM,KAAK,sBAAsB,MAAM,SAAS;AAChD,eAAO,gBAAgB,qBAAqB,OAAO,sBAAsB,aAAa;AAAA,MACvF;AAEA,YAAM,KAAK,sBAAsB,MAAM,SAAS;AAEhD,aAAO,QAAQ,QAAQ,IAAI;AAAA,IAC5B,SAAS,OAAO;AACf,aAAO,gBAAgB,oBAAoB,KAAK;AAAA,IACjD;AAAA,EACD;AAAA,EAEA,MAAM,sBAAsB,MAA+B,WAAsB;AAChF,QAAI;AACH,YAAM,KAAK,GACT,OAAO,iBAAiB,EACxB;AAAA,YACA;AAAA,cACC,wBAAG,kBAAkB,YAAY,KAAK,KAAM;AAAA,cAC5C,wBAAG,kBAAkB,WAAW,SAAS;AAAA,QAC1C;AAAA,MACD;AAED,aAAO,QAAQ,QAAQ,IAAI;AAAA,IAC5B,SAAS,OAAO;AACf,aAAO,gBAAgB,oBAAoB,KAAK;AAAA,IACjD;AAAA,EACD;AACD;;;ATzGA,IAAqB,wBAArB,cAAmD,eAAe;AAAA,EACvD;AAAA;AAAA;AAAA;AAAA,EAKV,cAAc;AACb,UAAM;AACN,SAAK,aAAa,IAAI,WAAgB;AAAA,EACvC;AAAA,EAEA,MAAM,WACL,MACgE;AAChE,QAAI;AACH,WAAK,YAAa,MAAM,KAAK,6BAA6B,KAAK,QAAQ;AACvE,WAAK,SAAU,MAAM,KAAK,0BAA0B,KAAK,KAAK;AAC9D,YAAM,cAAc,MAAM,KAAK,GAAG,OAAO,KAAK,EAAE,OAAO,IAAI,EAAE,UAAU;AAEvE,YAAM,EAAE,UAAU,GAAG,KAAK,IAAI,YAAY,CAAC;AAE3C,aAAO,gBAAgB;AAAA,QACtB,OAAO;AAAA,QACP;AAAA,QACA;AAAA,MACD;AAAA,IACD,SAAS,OAAO;AACf,aAAO,gBAAgB,oBAAoB,KAAK;AAAA,IACjD;AAAA,EACD;AAAA,EAEA,MAAM,oBACL,QACA,MACA,aACiD;AACjD,QAAI;AACH,YAAM,uBAAuB,MAAM,KAAK,GACtC,OAAO,QAAQ,EACf,OAAO;AAAA,QACP;AAAA,QACA,MAAM;AAAA,QACN,UAAU;AAAA,QACV,mBAAmB,KAAK;AAAA,QACxB;AAAA,QACA,cAAc;AAAA,QACd,WAAW;AAAA,QACX,WAAW;AAAA,QACX,OAAO;AAAA,QACP,SAAS,KAAK;AAAA,QACd,cAAc;AAAA,MACf,CAAC,EACA,UAAU;AAEZ,aAAO,gBAAgB;AAAA,QACtB,OAAO;AAAA,QACP;AAAA,QACA,qBAAqB,CAAC;AAAA,MACvB;AAAA,IACD,SAAS,OAAO;AACf,aAAO,gBAAgB,oBAAoB,KAAK;AAAA,IACjD;AAAA,EACD;AAAA,EAEA,MAAM,qBACL,MACA,aACgE;AAChE,QAAI;AACH,YAAM,qBAAqB,MAAM,KAAK,GAAG,MAAM,MAAM,UAAU;AAAA,QAC9D,WAAO,wBAAG,MAAM,OAAO,KAAK,MAAM,KAAM;AAAA,QACxC,MAAM;AAAA,UACL,UAAU;AAAA,YACT,WAAO,6BAAI,wBAAG,SAAS,mBAAmB,KAAK,EAAE,OAAG,wBAAG,SAAS,UAAU,QAAQ,CAAC;AAAA,UACpF;AAAA,QACD;AAAA,MACD,CAAC;AAGD,UAAI,oBAAoB;AAEvB,YAAI,mBAAmB,SAAS,SAAS,GAAG;AAC3C,gBAAM,KAAK,GACT,OAAO,QAAQ,EACf,IAAI,EAAE,YAAY,CAAC,EACnB,UAAM,wBAAG,SAAS,mBAAmB,KAAK,EAAE,CAAC;AAE/C,cAAI,CAAC,mBAAmB;AACvB,kBAAM,KAAK,oBAAoB,mBAAmB,EAAE;AAErD,gBAAM,EAAE,UAAU,cAAc,GAAG,KAAK,IAAI;AAE5C,iBAAO,gBAAgB;AAAA,YACtB,OAAO;AAAA,YACP;AAAA,YACA;AAAA,UACD;AAAA,QACD,OAAO;AAEN,gBAAM,KAAK,oBAAoB,mBAAmB,IAAI,MAAM,WAAW;AAEvE,gBAAM,EAAE,UAAU,cAAc,GAAG,KAAK,IAAI;AAE5C,iBAAO,gBAAgB;AAAA,YACtB,OAAO;AAAA,YACP;AAAA,YACA;AAAA,UACD;AAAA,QACD;AAAA,MACD;AAGA,YAAM,cAAc,MAAM,KAAK,WAAW;AAAA,QACzC,MAAM,KAAK,MAAM;AAAA,QACjB,OAAO,KAAK,MAAM;AAAA,QAClB,UAAU,KAAK,MAAM,MAAO,MAAM,GAAG,EAAE,CAAC;AAAA,QACxC,UAAU;AAAA,QACV,eAAe,oBAAI,KAAK;AAAA,QACxB,OAAO,KAAK,MAAM;AAAA,MACnB,CAAC;AAGD,YAAM,KAAK,oBAAoB,YAAY,MAAM,IAAK,MAAM,WAAW;AAEvE,aAAO,gBAAgB;AAAA,QACtB,OAAO;AAAA,QACP;AAAA,QACA,YAAY;AAAA,MACb;AAAA,IACD,SAAS,OAAO;AACf,aAAO,gBAAgB,oBAAoB,KAAK;AAAA,IACjD;AAAA,EACD;AAAA,EAEA,MAAM,0BAA0B,UAA+D;AAC9F,QAAI;AACH,YAAM,YAAY,WAAW,gBAAgB,QAAQ;AAErD,UAAI,WAAsD,CAAC;AAE3D,UAAI,cAAc,SAAS;AAC1B,cAAM,OAAO,MAAM,KAAK,gBAAgB,UAAU,IAAI;AACtD,mBAAW,KAAK;AAChB,eAAO,gBAAgB;AAAA,UACtB,OAAO;AAAA,UACP;AAAA,UACA;AAAA,QACD;AAAA,MACD,WAAW,cAAc,YAAY;AACpC,cAAM,OAAO,MAAM,KAAK,mBAAmB,UAAU,IAAI;AACzD,mBAAW,KAAK;AAChB,eAAO,gBAAgB;AAAA,UACtB,OAAO;AAAA,UACP;AAAA,UACA;AAAA,QACD;AAAA,MACD;AACA,aAAO,gBAAgB;AAAA,QACtB,OAAO;AAAA,QACP;AAAA,QACA;AAAA,MACD;AAAA,IACD,SAAS,OAAO;AACf,aAAO,gBAAgB,oBAAoB,KAAK;AAAA,IACjD;AAAA,EACD;AAAA,EAEA,MAAM,aACL,IACA,eAAwB,OACsB;AAC9C,QAAI;AACH,YAAM,OAAO,MAAM,KAAK,GAAG,MAAM,MAAM,UAAU;AAAA,QAChD,WAAO,wBAAG,MAAM,IAAI,EAAE;AAAA,MACvB,CAAC;AAED,UAAI,CAAC;AACJ,eAAO,gBAAgB,qBAAqB,OAAO,oBAAoB,gBAAgB;AAExF,UAAI;AACH,eAAO,gBAAgB,eAAe,OAAO,aAAa,2BAA2B,IAAI;AAE1F,YAAM,EAAE,UAAU,GAAG,SAAS,IAAI;AAElC,aAAO,gBAAgB;AAAA,QACtB,OAAO;AAAA,QACP;AAAA,QACA;AAAA,MACD;AAAA,IACD,SAAS,OAAO;AACf,aAAO,gBAAgB,oBAAoB,KAAK;AAAA,IACjD;AAAA,EACD;AAAA,EAEA,MAAM,gBACL,OACA,eAAwB,OACsB;AAC9C,QAAI;AACH,YAAM,OAAO,MAAM,KAAK,GAAG,MAAM,MAAM,UAAU;AAAA,QAChD,WAAO,wBAAG,MAAM,OAAO,KAAK;AAAA,MAC7B,CAAC;AAED,UAAI,CAAC;AACJ,eAAO,gBAAgB,qBAAqB,OAAO,oBAAoB,gBAAgB;AAExF,UAAI;AACH,eAAO,gBAAgB,eAAe,OAAO,aAAa,2BAA2B,IAAI;AAE1F,YAAM,EAAE,UAAU,GAAG,SAAS,IAAI;AAElC,aAAO,gBAAgB;AAAA,QACtB,OAAO;AAAA,QACP;AAAA,QACA;AAAA,MACD;AAAA,IACD,SAAS,OAAO;AACf,aAAO,gBAAgB,oBAAoB,KAAK;AAAA,IACjD;AAAA,EACD;AAAA,EAEA,MAAM,mBACL,UACA,eAAwB,OACsB;AAC9C,QAAI;AACH,YAAM,OAAO,MAAM,KAAK,GAAG,MAAM,MAAM,UAAU;AAAA,QAChD,WAAO,wBAAG,MAAM,UAAU,QAAQ;AAAA,MACnC,CAAC;AAED,UAAI,CAAC;AACJ,eAAO,gBAAgB,qBAAqB,OAAO,oBAAoB,gBAAgB;AAExF,UAAI;AACH,eAAO,gBAAgB,eAAe,OAAO,aAAa,2BAA2B,IAAI;AAE1F,YAAM,EAAE,UAAU,GAAG,SAAS,IAAI;AAElC,aAAO,gBAAgB;AAAA,QACtB,OAAO;AAAA,QACP;AAAA,QACA;AAAA,MACD;AAAA,IACD,SAAS,OAAO;AACf,aAAO,gBAAgB,oBAAoB,KAAK;AAAA,IACjD;AAAA,EACD;AAAA,EAEA,MAAM,0BAA0B,OAAqD;AACpF,QAAI;AACH,YAAM,OAAO,MAAM,KAAK,GAAG,MAAM,MAAM,UAAU;AAAA,QAChD,WAAO,wBAAG,MAAM,OAAO,KAAK;AAAA,MAC7B,CAAC;AAED,UAAI;AACH,eAAO,gBAAgB;AAAA,UACtB,OAAO;AAAA,UACP;AAAA,QACD;AAED,aAAO,gBAAgB,eAAe,OAAO,aAAa,uBAAuB,KAAK;AAAA,IACvF,SAAS,OAAO;AACf,aAAO,gBAAgB,oBAAoB,KAAK;AAAA,IACjD;AAAA,EACD;AAAA,EAEA,MAAM,6BAA6B,UAAwD;AAC1F,QAAI;AACH,YAAM,OAAO,MAAM,KAAK,GAAG,MAAM,MAAM,UAAU;AAAA,QAChD,WAAO,wBAAG,MAAM,UAAU,QAAQ;AAAA,MACnC,CAAC;AAED,UAAI;AACH,eAAO,gBAAgB;AAAA,UACtB,OAAO;AAAA,UACP;AAAA,QACD;AAED,aAAO,gBAAgB,eAAe,OAAO,aAAa,uBAAuB,KAAK;AAAA,IACvF,SAAS,OAAO;AACf,aAAO,gBAAgB,oBAAoB,KAAK;AAAA,IACjD;AAAA,EACD;AAAA,EAEA,MAAM,gBACL,UACA,gBACuC;AACvC,QAAI;AACH,UAAI,CAAC,gBAAgB;AACpB,eAAO,gBAAgB;AAAA,UACtB,OAAO;AAAA,UACP;AAAA,QACD;AAAA,MACD;AACA,YAAM,QAAQ,MAAM,cAAAC,QAAO,QAAQ,UAAU,cAAc;AAE3D,UAAI,CAAC;AACJ,eAAO,gBAAgB;AAAA,UACtB,OAAO;AAAA,UACP;AAAA,QACD;AAED,aAAO,gBAAgB,eAAe,OAAO,aAAa,oBAAoB,KAAK;AAAA,IACpF,SAAS,OAAO;AACf,aAAO,gBAAgB,oBAAoB,KAAK;AAAA,IACjD;AAAA,EACD;AAAA,EAEA,MAAM,oBAAoB,IAAkD;AAC3E,QAAI;AACH,YAAM,KAAK,GACT,OAAO,KAAK,EACZ,IAAI;AAAA,QACJ,eAAe,oBAAI,KAAK;AAAA,MACzB,CAAC,EACA,UAAM,wBAAG,MAAM,IAAI,EAAE,CAAC;AAExB,aAAO,gBAAgB,eAAe,OAAO,aAAa,iBAAiB,IAAI;AAAA,IAChF,SAAS,OAAO;AACf,aAAO,gBAAgB,oBAAoB,KAAK;AAAA,IACjD;AAAA,EACD;AAAA,EAEA,MAAM,yBAAyB,IAAkD;AAChF,QAAI;AACH,YAAM,OAAO,MAAM,KAAK,aAAa,EAAE;AAEvC,UAAI,CAAC,KAAK,MAAM;AACf,eAAO,gBAAgB;AAAA,UACtB,OAAO;AAAA,UACP;AAAA,QACD;AAED,aAAO,gBAAgB,eAAe,OAAO,aAAa,oBAAoB,IAAI;AAAA,IACnF,SAAS,OAAO;AACf,aAAO,gBAAgB,oBAAoB,KAAK;AAAA,IACjD;AAAA,EACD;AAAA,EAEA,MAAM,eAAe,IAAY,aAA2D;AAC3F,QAAI;AACH,YAAM,iBAAiB,MAAM,cAAAA,QAAO,KAAK,aAAa,EAAE;AAExD,YAAM,KAAK,GACT,OAAO,KAAK,EACZ,IAAI;AAAA,QACJ,UAAU;AAAA,MACX,CAAC,EACA,UAAM,wBAAG,MAAM,IAAI,EAAE,CAAC;AAExB,aAAO,gBAAgB;AAAA,QACtB,OAAO;AAAA,QACP;AAAA,QACA;AAAA,MACD;AAAA,IACD,SAAS,OAAO;AACf,aAAO,gBAAgB,oBAAoB,KAAK;AAAA,IACjD;AAAA,EACD;AACD;;;AD3WA,IAAM,wBAAwB,IAAI,sBAAsB;AAExD,gBAAAC,QAAS,cAAc,OAAO,MAAM,SAAS;AAC5C,OAAK,MAAM,KAAK,EAAE;AACnB,CAAC;AAED,gBAAAA,QAAS,gBAAgB,OAAO,IAAY,SAAS;AACpD,QAAM,OAAO,MAAM,sBAAsB,aAAa,EAAE;AACxD,OAAK,MAAM,KAAK,IAAI;AACrB,CAAC;AAED,IAAO,wBAAQ,gBAAAA,QAAS;AAAA,EACvB,IAAI,+BAAS,OAAO,UAAU,UAAU,SAAS;AAChD,QAAI;AACH,YAAM,YAAY,WAAW,gBAAgB,QAAQ;AAErD,UAAI,cAAc,SAAS;AAC1B,cAAM,OAAO,MAAM,sBAAsB,gBAAgB,QAAQ;AAEjE,eAAO,KAAK,MAAM,KAAK,IAAI;AAAA,MAC5B,OAAO;AACN,cAAM,OAAO,MAAM,sBAAsB,mBAAmB,QAAQ;AAEpE,eAAO,KAAK,MAAM,KAAK,IAAI;AAAA,MAC5B;AAAA,IACD,SAAS,OAAO;AACf,aAAO,KAAK,KAAK;AAAA,IAClB;AAAA,EACD,CAAC;AACF;AAEO,IAAM,sBAAsB,CAAC,KAAc,KAAe,SAAuB;AACvF,kBAAAA,QAAS,aAAa,SAAS,CAAC,KAAU,SAAuB;AAChE,UAAM,cAAc,IAAI,YAAY,GAAG;AACvC,QAAI;AACH,aAAO,YAAY,aAAa;AAAA,QAC/B,QAAQ,IAAI;AAAA,QACZ,SAAS,IAAI;AAAA,MACd,CAAC;AAGF,QAAI,MAAM,MAAM,cAAY;AAE3B,UAAI;AACH,eAAO,YAAY,aAAa;AAAA,UAC/B,QAAQ,OAAO;AAAA,UACf,SAAS;AAAA,QACV,CAAC;AAGF,yBAAG,OAAO,QAAQ,EAChB,IAAI;AAAA,QACJ,QAAQ,KAAK;AAAA,MACd,CAAC,EACA,QAAQ;AAGV,aAAO,YAAY,gBAAgB,0BAA0B,IAAI;AAAA,IAClE,CAAC;AAAA,EACF,CAAC,EAAE,KAAK,KAAK,IAAI;AAClB;","names":["import_drizzle_orm","import_pg_core","import_pg_core","dotenv","postgres","import_drizzle_orm","timestamp","status","bcrypt","passport"]}